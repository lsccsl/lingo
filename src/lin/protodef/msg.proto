syntax = "proto3";
package msgpacket;

option go_package = "./;msgpacket";

enum MSG_TYPE
{
    _MSG_NULL = 0;
    _MSG_RPC = 1;
    _MSG_RPC_RES = 2;
    _MSG_SRV_REPORT = 3;
    _MSG_SRV_REPORT_RES = 4;
    _MSG_HEARTBEAT = 5;
    _MSG_HEARTBEAT_RES = 6;
    _MSG_TCP_STATIC = 7;
    _MSG_TCP_STATIC_RES = 8;
    _MSG_MAX = 100;

    _MSG_TEST = 101;
    _MSG_TEST_RES = 102;
    _MSG_LOGIN = 103;
    _MSG_LOGIN_RES = 104;
    _MSG_TEST_RPC = 105;
    _MSG_TEST_RPC_RES = 106;
    _MSG_SERVER_MAX = 1000;

    _MSG_CLIENT_ENTER = 1001;
    _MSG_CLIENT_ENTER_RES = 1002;
    _MSG_GET_MAP = 1003;
    _MSG_GET_MAP_RES = 1004;
    _MSG_PATH_SEARCH = 1005;
    _MSG_PATH_SEARCH_RES = 1006;

    _MSG_NAV_SEARCH = 1007;
    _MSG_NAV_SEARCH_RES = 1008;
    _MSG_NAV_ADD_OBSTACLE = 1009;
    _MSG_NAV_ADD_OBSTACLE_RES = 1010;
    _MSG_NAV_DEL_OBSTACLE = 1011;
    _MSG_NAV_DEL_OBSTACLE_RES = 1012;
    _MSG_NAV_GET_ALL_OBSTACLE = 1013;
    _MSG_NAV_GET_ALL_OBSTACLE_RES = 1014;

    _MSG_UPDATE_POS = 1015;
    _MSG_UPDATE_POS_RES = 1016;
}

enum RESPONSE_CODE
{
    RESPONSE_CODE_Fail = 0;
    RESPONSE_CODE_OK = 1;
    RESPONSE_CODE_Rpc_not_accept = 2;
    RESPONSE_CODE_redirect = 3;
}

message POS_T
{
    int32 pos_x = 1;
    int32 pos_y = 2;
}

message PROTO_VEC_3F
{
    float x = 1;
    float y = 2;
    float z = 3;
}

message MSG_RPC
{
    int64 msg_id = 1;
    int32 msg_type = 2;
    bytes msg_bin = 3;

    int64 timestamp = 4;
    int64 timestamp_arrive = 5;
    int64 timeout_wait = 6;
}
message MSG_RPC_RES
{
    int64 msg_id = 1;
    int32 msg_type = 2;
    RESPONSE_CODE res_code = 3;
    bytes msg_bin = 4;

    int64 timestamp = 5;
    int64 timestamp_arrive = 6;
    int64 timestamp_process = 7;
}

message MSG_SRV_REPORT
{
    int64 srv_id = 1;
    int64 tcp_conn_id = 2;
}
message MSG_SRV_REPORT_RES
{
    int64 srv_id = 1;
    int64 tcp_conn_id = 2;
}

message MSG_HEARTBEAT
{
    int64 id = 1;
}
message MSG_HEARTBEAT_RES
{
    int64 id = 1;
}

message MSG_TEST
{
    int64 id = 1;
    string str = 2;
    int64 seq = 3;
    int64 timestamp = 4;
    int64 timestamp_arrive = 5;
}
message MSG_TEST_RES
{
    int64 id = 1;
    string str = 2;
    int64 seq = 3;
    int64 timestamp = 4;
    int64 timestamp_arrive = 5;
    int64 timestamp_process = 6;
}

message MSG_TEST_RPC
{
    int64 rpc_count = 1;
}
message MSG_TEST_RPC_RES
{
}

message MSG_LOGIN
{
    int64 id = 1;

    float X = 2;
    float Y = 3;
}

message MSG_LOGIN_RES
{
    int64 id = 1;
    int64 connect_id = 2;
    int64 fd = 3;
}

message MSG_TCP_STATIC
{
    int64 seq = 1;
}
message MSG_TCP_STATIC_RES
{
    int64 packet_count = 1;
    int64 byte_recv = 2;
    int64 byte_proc = 3;
    int64 byte_send = 4;
    map<int32, int64> map_static_msg_recv = 5;
}

message MSG_CLIENT_ENTER
{
    int64 client_id = 1;
}
message MSG_CLIENT_ENTER_RES
{
    int64 client_id = 1;
    RESPONSE_CODE res = 2;
    string redirect_ip = 4; // redirect to other server
    int32 redirect_port = 5;
}

message MSG_GET_MAP
{
}
message MSG_GET_MAP_RES
{
    int32 map_wid = 1;
    int32 map_high = 2;
    int32 map_pitch = 3;
    bytes map_data = 4;
}



message MSG_PATH_SEARCH
{
    POS_T pos_src = 1;
    POS_T pos_dst = 2;
}
message MSG_PATH_SEARCH_RES
{
    POS_T pos_src = 1;
    POS_T pos_dst = 2;
    repeated POS_T path_pos = 3;
    repeated POS_T path_key_pos = 4;
}



message MSG_NAV_SEARCH
{
    PROTO_VEC_3F pos_src = 1;
    PROTO_VEC_3F pos_dst = 2;
}
message MSG_NAV_SEARCH_RES
{
    repeated PROTO_VEC_3F path_pos = 1;
}

message NAV_OBSTACLE
{
    uint32 obstacle_id = 1;
    PROTO_VEC_3F center = 2;
    PROTO_VEC_3F half_ext = 3;
    float y_radian = 4;
}
message MSG_NAV_ADD_OBSTACLE
{
    NAV_OBSTACLE obstacle = 1;
}
message MSG_NAV_ADD_OBSTACLE_RES
{
    NAV_OBSTACLE obstacle = 2;
}

message MSG_NAV_DEL_OBSTACLE
{
    uint32 obstacle_id = 1;
}
message MSG_NAV_DEL_OBSTACLE_RES
{
    uint32 obstacle_id = 1;
}

message MSG_NAV_GET_ALL_OBSTACLE
{}
message MSG_NAV_GET_ALL_OBSTACLE_RES
{
    repeated NAV_OBSTACLE obstacle = 1;
}

message MSG_UPDATE_POS
{
    PROTO_VEC_3F new_pos = 1;
}
message MSG_UPDATE_POS_RES
{
    PROTO_VEC_3F new_pos = 1;
}
