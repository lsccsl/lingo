syntax = "proto3";
package msgpacket;

option go_package = "./;msgpacket";

enum MSG_TYPE
{
    _MSG_NULL = 0;
    _MSG_RPC = 1;
    _MSG_RPC_RES = 2;
    _MSG_SRV_REPORT = 3;
    _MSG_HEARTBEAT = 4;
    _MSG_HEARTBEAT_RES = 5;
    _MSG_TCP_STATIC = 6;
    _MSG_TCP_STATIC_RES = 7;
    _MSG_MAX = 100;

    _MSG_TEST = 101;
    _MSG_TEST_RES = 102;
    _MSG_LOGIN = 103;
    _MSG_LOGIN_RES = 104;
}

enum RESPONSE_CODE
{
    RESPONSE_CODE_NONE = 0;
    RESPONSE_CODE_Fail = 1;
    RESPONSE_CODE_Rpc_not_accept = 2;
}

message MSG_RPC
{
    int64 msg_id = 1;
    int32 msg_type = 2;
    bytes msg_bin = 3;
}
message MSG_RPC_RES
{
    int64 msg_id = 1;
    int32 msg_type = 2;
    RESPONSE_CODE res_code = 3;
    bytes msg_bin = 4;
}

message MSG_SRV_REPORT
{
    int64 srv_id = 1;
}

message MSG_HEARTBEAT
{
    int64 id = 1;
}
message MSG_HEARTBEAT_RES
{
    int64 id = 1;
}

message MSG_TEST
{
    int64 id = 1;
    string str = 2;
    int64 seq = 3;
    int64 timestamp = 4;
    int64 timestamp_arrive = 5;
}
message MSG_TEST_RES
{
    int64 id = 1;
    string str = 2;
    int64 seq = 3;
    int64 timestamp = 4;
    int64 timestamp_arrive = 5;
    int64 timestamp_process = 6;
}

message MSG_LOGIN
{
    int64 id = 1;
}

message MSG_LOGIN_RES
{
    int64 id = 1;
    int64 connect_id = 2;
}

message MSG_TCP_STATIC
{
    int64 seq = 1;
}
message MSG_TCP_STATIC_RES
{
    int64 packet_count = 1;
    int64 byte_recv = 2;
    int64 byte_proc = 3;
    int64 byte_send = 4;
    map<int32, int64> map_static_msg_recv = 5;
}
