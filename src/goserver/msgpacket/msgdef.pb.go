// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.19.1
// source: msgdef.proto

package msgpacket

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PB_MSG_TYPE int32

const (
	// msg que inter
	PB_MSG_TYPE__PB_MSG_INTER_NULL                         PB_MSG_TYPE = 0
	PB_MSG_TYPE__PB_MSG_INTER_QUECENTER_REGISTER           PB_MSG_TYPE = 1
	PB_MSG_TYPE__PB_MSG_INTER_QUECENTER_REGISTER_RES       PB_MSG_TYPE = 2
	PB_MSG_TYPE__PB_MSG_INTER_QUECENTER_OFFLINE_NTF        PB_MSG_TYPE = 3
	PB_MSG_TYPE__PB_MSG_INTER_QUECENTER_ONLINE_NTF         PB_MSG_TYPE = 4
	PB_MSG_TYPE__PB_MSG_INTER_QUESRV_CONNECT               PB_MSG_TYPE = 5
	PB_MSG_TYPE__PB_MSG_INTER_QUESRV_CONNECT_RES           PB_MSG_TYPE = 6
	PB_MSG_TYPE__PB_MSG_INTER_QUECENTER_HEARTBEAT          PB_MSG_TYPE = 7
	PB_MSG_TYPE__PB_MSG_INTER_QUECENTER_HEARTBEAT_RES      PB_MSG_TYPE = 8
	PB_MSG_TYPE__PB_MSG_INTER_QUESRV_HEARTBEAT             PB_MSG_TYPE = 9
	PB_MSG_TYPE__PB_MSG_INTER_QUESRV_HEARTBEAT_RES         PB_MSG_TYPE = 10
	PB_MSG_TYPE__PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER     PB_MSG_TYPE = 11
	PB_MSG_TYPE__PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES PB_MSG_TYPE = 12
	PB_MSG_TYPE__PB_MSG_INTER_CLISRV_HEARTBEAT             PB_MSG_TYPE = 13
	PB_MSG_TYPE__PB_MSG_INTER_CLISRV_HEARTBEAT_RES         PB_MSG_TYPE = 14
	PB_MSG_TYPE__PB_MSG_INTER_CLISRV_REG_TO_QUE            PB_MSG_TYPE = 15
	PB_MSG_TYPE__PB_MSG_INTER_CLISRV_REG_TO_QUE_RES        PB_MSG_TYPE = 16
	PB_MSG_TYPE__PB_MSG_INTER_QUESRV_REPORT_BROADCAST      PB_MSG_TYPE = 17
	PB_MSG_TYPE__PB_MSG_INTER_QUESRV_NTF                   PB_MSG_TYPE = 18
	PB_MSG_TYPE__PB_MSG_INTER_MSG                          PB_MSG_TYPE = 30
	PB_MSG_TYPE__PB_MSG_INTER_MSG_RES                      PB_MSG_TYPE = 31
	PB_MSG_TYPE__PB_MSG_INTER_QUESRV_GET_SRVTYPE           PB_MSG_TYPE = 32
	PB_MSG_TYPE__PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES       PB_MSG_TYPE = 33
	PB_MSG_TYPE__PB_MSG_INTER_MAX                          PB_MSG_TYPE = 1000
	PB_MSG_TYPE__PB_MSG_CENTERSRV_GAMESRV_GETINFO          PB_MSG_TYPE = 1001
	PB_MSG_TYPE__PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES      PB_MSG_TYPE = 1002
	PB_MSG_TYPE__PB_MSG_LOGONSRV_CENTERSRV_LOGON           PB_MSG_TYPE = 1003
	PB_MSG_TYPE__PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES       PB_MSG_TYPE = 1004
	// client msg
	PB_MSG_TYPE__PB_MSG_LOGON     PB_MSG_TYPE = 2001
	PB_MSG_TYPE__PB_MSG_LOGON_RES PB_MSG_TYPE = 2002
)

// Enum value maps for PB_MSG_TYPE.
var (
	PB_MSG_TYPE_name = map[int32]string{
		0:    "_PB_MSG_INTER_NULL",
		1:    "_PB_MSG_INTER_QUECENTER_REGISTER",
		2:    "_PB_MSG_INTER_QUECENTER_REGISTER_RES",
		3:    "_PB_MSG_INTER_QUECENTER_OFFLINE_NTF",
		4:    "_PB_MSG_INTER_QUECENTER_ONLINE_NTF",
		5:    "_PB_MSG_INTER_QUESRV_CONNECT",
		6:    "_PB_MSG_INTER_QUESRV_CONNECT_RES",
		7:    "_PB_MSG_INTER_QUECENTER_HEARTBEAT",
		8:    "_PB_MSG_INTER_QUECENTER_HEARTBEAT_RES",
		9:    "_PB_MSG_INTER_QUESRV_HEARTBEAT",
		10:   "_PB_MSG_INTER_QUESRV_HEARTBEAT_RES",
		11:   "_PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER",
		12:   "_PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES",
		13:   "_PB_MSG_INTER_CLISRV_HEARTBEAT",
		14:   "_PB_MSG_INTER_CLISRV_HEARTBEAT_RES",
		15:   "_PB_MSG_INTER_CLISRV_REG_TO_QUE",
		16:   "_PB_MSG_INTER_CLISRV_REG_TO_QUE_RES",
		17:   "_PB_MSG_INTER_QUESRV_REPORT_BROADCAST",
		18:   "_PB_MSG_INTER_QUESRV_NTF",
		30:   "_PB_MSG_INTER_MSG",
		31:   "_PB_MSG_INTER_MSG_RES",
		32:   "_PB_MSG_INTER_QUESRV_GET_SRVTYPE",
		33:   "_PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES",
		1000: "_PB_MSG_INTER_MAX",
		1001: "_PB_MSG_CENTERSRV_GAMESRV_GETINFO",
		1002: "_PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES",
		1003: "_PB_MSG_LOGONSRV_CENTERSRV_LOGON",
		1004: "_PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES",
		2001: "_PB_MSG_LOGON",
		2002: "_PB_MSG_LOGON_RES",
	}
	PB_MSG_TYPE_value = map[string]int32{
		"_PB_MSG_INTER_NULL":                         0,
		"_PB_MSG_INTER_QUECENTER_REGISTER":           1,
		"_PB_MSG_INTER_QUECENTER_REGISTER_RES":       2,
		"_PB_MSG_INTER_QUECENTER_OFFLINE_NTF":        3,
		"_PB_MSG_INTER_QUECENTER_ONLINE_NTF":         4,
		"_PB_MSG_INTER_QUESRV_CONNECT":               5,
		"_PB_MSG_INTER_QUESRV_CONNECT_RES":           6,
		"_PB_MSG_INTER_QUECENTER_HEARTBEAT":          7,
		"_PB_MSG_INTER_QUECENTER_HEARTBEAT_RES":      8,
		"_PB_MSG_INTER_QUESRV_HEARTBEAT":             9,
		"_PB_MSG_INTER_QUESRV_HEARTBEAT_RES":         10,
		"_PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER":     11,
		"_PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES": 12,
		"_PB_MSG_INTER_CLISRV_HEARTBEAT":             13,
		"_PB_MSG_INTER_CLISRV_HEARTBEAT_RES":         14,
		"_PB_MSG_INTER_CLISRV_REG_TO_QUE":            15,
		"_PB_MSG_INTER_CLISRV_REG_TO_QUE_RES":        16,
		"_PB_MSG_INTER_QUESRV_REPORT_BROADCAST":      17,
		"_PB_MSG_INTER_QUESRV_NTF":                   18,
		"_PB_MSG_INTER_MSG":                          30,
		"_PB_MSG_INTER_MSG_RES":                      31,
		"_PB_MSG_INTER_QUESRV_GET_SRVTYPE":           32,
		"_PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES":       33,
		"_PB_MSG_INTER_MAX":                          1000,
		"_PB_MSG_CENTERSRV_GAMESRV_GETINFO":          1001,
		"_PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES":      1002,
		"_PB_MSG_LOGONSRV_CENTERSRV_LOGON":           1003,
		"_PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES":       1004,
		"_PB_MSG_LOGON":                              2001,
		"_PB_MSG_LOGON_RES":                          2002,
	}
)

func (x PB_MSG_TYPE) Enum() *PB_MSG_TYPE {
	p := new(PB_MSG_TYPE)
	*p = x
	return p
}

func (x PB_MSG_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PB_MSG_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_msgdef_proto_enumTypes[0].Descriptor()
}

func (PB_MSG_TYPE) Type() protoreflect.EnumType {
	return &file_msgdef_proto_enumTypes[0]
}

func (x PB_MSG_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PB_MSG_TYPE.Descriptor instead.
func (PB_MSG_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_msgdef_proto_rawDescGZIP(), []int{0}
}

type PB_RESPONSE_CODE int32

const (
	PB_RESPONSE_CODE_PB_RESPONSE_CODE_Fail           PB_RESPONSE_CODE = 0
	PB_RESPONSE_CODE_PB_RESPONSE_CODE_OK             PB_RESPONSE_CODE = 1
	PB_RESPONSE_CODE_PB_RESPONSE_CODE_Rpc_not_accept PB_RESPONSE_CODE = 2
	PB_RESPONSE_CODE_PB_RESPONSE_CODE_redirect       PB_RESPONSE_CODE = 3
	PB_RESPONSE_CODE_PB_RESPONSE_CODE_no_que_srv     PB_RESPONSE_CODE = 4
	PB_RESPONSE_CODE_PB_RESPONSE_CODE_no_srv_uuid    PB_RESPONSE_CODE = 5
)

// Enum value maps for PB_RESPONSE_CODE.
var (
	PB_RESPONSE_CODE_name = map[int32]string{
		0: "PB_RESPONSE_CODE_Fail",
		1: "PB_RESPONSE_CODE_OK",
		2: "PB_RESPONSE_CODE_Rpc_not_accept",
		3: "PB_RESPONSE_CODE_redirect",
		4: "PB_RESPONSE_CODE_no_que_srv",
		5: "PB_RESPONSE_CODE_no_srv_uuid",
	}
	PB_RESPONSE_CODE_value = map[string]int32{
		"PB_RESPONSE_CODE_Fail":           0,
		"PB_RESPONSE_CODE_OK":             1,
		"PB_RESPONSE_CODE_Rpc_not_accept": 2,
		"PB_RESPONSE_CODE_redirect":       3,
		"PB_RESPONSE_CODE_no_que_srv":     4,
		"PB_RESPONSE_CODE_no_srv_uuid":    5,
	}
)

func (x PB_RESPONSE_CODE) Enum() *PB_RESPONSE_CODE {
	p := new(PB_RESPONSE_CODE)
	*p = x
	return p
}

func (x PB_RESPONSE_CODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PB_RESPONSE_CODE) Descriptor() protoreflect.EnumDescriptor {
	return file_msgdef_proto_enumTypes[1].Descriptor()
}

func (PB_RESPONSE_CODE) Type() protoreflect.EnumType {
	return &file_msgdef_proto_enumTypes[1]
}

func (x PB_RESPONSE_CODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PB_RESPONSE_CODE.Descriptor instead.
func (PB_RESPONSE_CODE) EnumDescriptor() ([]byte, []int) {
	return file_msgdef_proto_rawDescGZIP(), []int{1}
}

var File_msgdef_proto protoreflect.FileDescriptor

var file_msgdef_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x64, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x6d, 0x73, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2a, 0xd7, 0x08, 0x0a, 0x0b, 0x50, 0x42,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x16, 0x0a, 0x12, 0x5f, 0x50, 0x42,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x5f, 0x50, 0x42, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x43, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x10,
	0x02, 0x12, 0x27, 0x0a, 0x23, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x5f, 0x50,
	0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x43,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x54, 0x46,
	0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x52, 0x56, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x52, 0x56, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x5f, 0x50,
	0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x43,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10,
	0x07, 0x12, 0x29, 0x0a, 0x25, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x41,
	0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e,
	0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x53, 0x52, 0x56, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x09,
	0x12, 0x26, 0x0a, 0x22, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x52, 0x56, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45,
	0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x5f, 0x50, 0x42, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x53, 0x52, 0x56,
	0x5f, 0x52, 0x45, 0x47, 0x5f, 0x4d, 0x53, 0x47, 0x51, 0x55, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x10, 0x0b, 0x12, 0x2e, 0x0a, 0x2a, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x53, 0x52, 0x56, 0x5f, 0x52, 0x45, 0x47,
	0x5f, 0x4d, 0x53, 0x47, 0x51, 0x55, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x53, 0x52, 0x56, 0x5f, 0x48, 0x45, 0x41,
	0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22, 0x5f, 0x50, 0x42, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x53, 0x52, 0x56,
	0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x0e,
	0x12, 0x23, 0x0a, 0x1f, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4c, 0x49, 0x53, 0x52, 0x56, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x54, 0x4f, 0x5f,
	0x51, 0x55, 0x45, 0x10, 0x0f, 0x12, 0x27, 0x0a, 0x23, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x53, 0x52, 0x56, 0x5f, 0x52, 0x45,
	0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x10, 0x12, 0x29,
	0x0a, 0x25, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x51, 0x55, 0x45, 0x53, 0x52, 0x56, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x52,
	0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x5f, 0x50, 0x42,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x52,
	0x56, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x5f, 0x50, 0x42, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x1e, 0x12, 0x19,
	0x0a, 0x15, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x1f, 0x12, 0x24, 0x0a, 0x20, 0x5f, 0x50, 0x42,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x52,
	0x56, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x52, 0x56, 0x54, 0x59, 0x50, 0x45, 0x10, 0x20, 0x12,
	0x28, 0x0a, 0x24, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x52, 0x56, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x52, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x21, 0x12, 0x16, 0x0a, 0x11, 0x5f, 0x50, 0x42,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0xe8,
	0x07, 0x12, 0x26, 0x0a, 0x21, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x53, 0x52, 0x56, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x56, 0x5f, 0x47,
	0x45, 0x54, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xe9, 0x07, 0x12, 0x2a, 0x0a, 0x25, 0x5f, 0x50, 0x42,
	0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x52, 0x56, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x53, 0x52, 0x56, 0x5f, 0x47, 0x45, 0x54, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xea, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47,
	0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x53, 0x52, 0x56, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x53, 0x52, 0x56, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x10, 0xeb, 0x07, 0x12, 0x29, 0x0a, 0x24,
	0x5f, 0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x53, 0x52, 0x56,
	0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x52, 0x56, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0xec, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x5f, 0x50, 0x42, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x10, 0xd1, 0x0f, 0x12, 0x16, 0x0a, 0x11, 0x5f,
	0x50, 0x42, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xd2, 0x0f, 0x2a, 0xcd, 0x01, 0x0a, 0x10, 0x50, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x42, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x61, 0x69,
	0x6c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x70, 0x63, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x6e, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x72, 0x76, 0x10,
	0x04, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x72, 0x76, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x10, 0x05, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b, 0x6d, 0x73, 0x67, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msgdef_proto_rawDescOnce sync.Once
	file_msgdef_proto_rawDescData = file_msgdef_proto_rawDesc
)

func file_msgdef_proto_rawDescGZIP() []byte {
	file_msgdef_proto_rawDescOnce.Do(func() {
		file_msgdef_proto_rawDescData = protoimpl.X.CompressGZIP(file_msgdef_proto_rawDescData)
	})
	return file_msgdef_proto_rawDescData
}

var file_msgdef_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_msgdef_proto_goTypes = []interface{}{
	(PB_MSG_TYPE)(0),      // 0: msgpacket.PB_MSG_TYPE
	(PB_RESPONSE_CODE)(0), // 1: msgpacket.PB_RESPONSE_CODE
}
var file_msgdef_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_msgdef_proto_init() }
func file_msgdef_proto_init() {
	if File_msgdef_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msgdef_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msgdef_proto_goTypes,
		DependencyIndexes: file_msgdef_proto_depIdxs,
		EnumInfos:         file_msgdef_proto_enumTypes,
	}.Build()
	File_msgdef_proto = out.File
	file_msgdef_proto_rawDesc = nil
	file_msgdef_proto_goTypes = nil
	file_msgdef_proto_depIdxs = nil
}
