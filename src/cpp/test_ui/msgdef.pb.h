// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgdef.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msgdef_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msgdef_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msgdef_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msgdef_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msgdef_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace msgpacket {

enum PB_MSG_TYPE : int {
  _PB_MSG_INTER_NULL = 0,
  _PB_MSG_INTER_QUECENTER_REGISTER = 1,
  _PB_MSG_INTER_QUECENTER_REGISTER_RES = 2,
  _PB_MSG_INTER_QUECENTER_OFFLINE_NTF = 3,
  _PB_MSG_INTER_QUECENTER_ONLINE_NTF = 4,
  _PB_MSG_INTER_QUESRV_CONNECT = 5,
  _PB_MSG_INTER_QUESRV_CONNECT_RES = 6,
  _PB_MSG_INTER_QUECENTER_HEARTBEAT = 7,
  _PB_MSG_INTER_QUECENTER_HEARTBEAT_RES = 8,
  _PB_MSG_INTER_QUESRV_HEARTBEAT = 9,
  _PB_MSG_INTER_QUESRV_HEARTBEAT_RES = 10,
  _PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER = 11,
  _PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES = 12,
  _PB_MSG_INTER_CLISRV_HEARTBEAT = 13,
  _PB_MSG_INTER_CLISRV_HEARTBEAT_RES = 14,
  _PB_MSG_INTER_CLISRV_REG_TO_QUE = 15,
  _PB_MSG_INTER_CLISRV_REG_TO_QUE_RES = 16,
  _PB_MSG_INTER_QUESRV_REPORT_BROADCAST = 17,
  _PB_MSG_INTER_QUESRV_NTF = 18,
  _PB_MSG_INTER_MSG = 30,
  _PB_MSG_INTER_MSG_RES = 31,
  _PB_MSG_INTER_QUESRV_GET_SRVTYPE = 32,
  _PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES = 33,
  _PB_MSG_INTER_MAX = 1000,
  _PB_MSG_CENTERSRV_GAMESRV_GETINFO = 1001,
  _PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES = 1002,
  _PB_MSG_LOGONSRV_CENTERSRV_LOGON = 1003,
  _PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES = 1004,
  _PB_MSG_LOGON = 2001,
  _PB_MSG_LOGON_RES = 2002,
  PB_MSG_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PB_MSG_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PB_MSG_TYPE_IsValid(int value);
constexpr PB_MSG_TYPE PB_MSG_TYPE_MIN = _PB_MSG_INTER_NULL;
constexpr PB_MSG_TYPE PB_MSG_TYPE_MAX = _PB_MSG_LOGON_RES;
constexpr int PB_MSG_TYPE_ARRAYSIZE = PB_MSG_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PB_MSG_TYPE_descriptor();
template<typename T>
inline const std::string& PB_MSG_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PB_MSG_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PB_MSG_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PB_MSG_TYPE_descriptor(), enum_t_value);
}
inline bool PB_MSG_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PB_MSG_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PB_MSG_TYPE>(
    PB_MSG_TYPE_descriptor(), name, value);
}
enum PB_RESPONSE_CODE : int {
  PB_RESPONSE_CODE_Fail = 0,
  PB_RESPONSE_CODE_OK = 1,
  PB_RESPONSE_CODE_Rpc_not_accept = 2,
  PB_RESPONSE_CODE_redirect = 3,
  PB_RESPONSE_CODE_no_que_srv = 4,
  PB_RESPONSE_CODE_no_srv_uuid = 5,
  PB_RESPONSE_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PB_RESPONSE_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PB_RESPONSE_CODE_IsValid(int value);
constexpr PB_RESPONSE_CODE PB_RESPONSE_CODE_MIN = PB_RESPONSE_CODE_Fail;
constexpr PB_RESPONSE_CODE PB_RESPONSE_CODE_MAX = PB_RESPONSE_CODE_no_srv_uuid;
constexpr int PB_RESPONSE_CODE_ARRAYSIZE = PB_RESPONSE_CODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PB_RESPONSE_CODE_descriptor();
template<typename T>
inline const std::string& PB_RESPONSE_CODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PB_RESPONSE_CODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PB_RESPONSE_CODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PB_RESPONSE_CODE_descriptor(), enum_t_value);
}
inline bool PB_RESPONSE_CODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PB_RESPONSE_CODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PB_RESPONSE_CODE>(
    PB_RESPONSE_CODE_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgpacket

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msgpacket::PB_MSG_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msgpacket::PB_MSG_TYPE>() {
  return ::msgpacket::PB_MSG_TYPE_descriptor();
}
template <> struct is_proto_enum< ::msgpacket::PB_RESPONSE_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msgpacket::PB_RESPONSE_CODE>() {
  return ::msgpacket::PB_RESPONSE_CODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msgdef_2eproto
