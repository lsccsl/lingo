// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgDB.proto

#include "msgDB.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace msgpacket {
constexpr DBUserMainKey::DBUserMainKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(int64_t{0}){}
struct DBUserMainKeyDefaultTypeInternal {
  constexpr DBUserMainKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBUserMainKeyDefaultTypeInternal() {}
  union {
    DBUserMainKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBUserMainKeyDefaultTypeInternal _DBUserMainKey_default_instance_;
constexpr DBUserMain::DBUserMain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(int64_t{0}){}
struct DBUserMainDefaultTypeInternal {
  constexpr DBUserMainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBUserMainDefaultTypeInternal() {}
  union {
    DBUserMain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBUserMainDefaultTypeInternal _DBUserMain_default_instance_;
constexpr DBUserDetailKey::DBUserDetailKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(int64_t{0}){}
struct DBUserDetailKeyDefaultTypeInternal {
  constexpr DBUserDetailKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBUserDetailKeyDefaultTypeInternal() {}
  union {
    DBUserDetailKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBUserDetailKeyDefaultTypeInternal _DBUserDetailKey_default_instance_;
constexpr DBUserDetail::DBUserDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , detail_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , detail_id_(0){}
struct DBUserDetailDefaultTypeInternal {
  constexpr DBUserDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBUserDetailDefaultTypeInternal() {}
  union {
    DBUserDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBUserDetailDefaultTypeInternal _DBUserDetail_default_instance_;
constexpr DBUserMainTest::DBUserMainTest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : test_repeated_()
  , _id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , str1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , str2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , detail_(nullptr)
  , user_id_(int64_t{0})
  , en_test_(0)

  , int1_(0)
  , int2_(0){}
struct DBUserMainTestDefaultTypeInternal {
  constexpr DBUserMainTestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBUserMainTestDefaultTypeInternal() {}
  union {
    DBUserMainTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBUserMainTestDefaultTypeInternal _DBUserMainTest_default_instance_;
constexpr DBMapTest::DBMapTest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_int_(int64_t{0}){}
struct DBMapTestDefaultTypeInternal {
  constexpr DBMapTestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBMapTestDefaultTypeInternal() {}
  union {
    DBMapTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBMapTestDefaultTypeInternal _DBMapTest_default_instance_;
constexpr DBRepeatedTest_TestMapEntry_DoNotUse::DBRepeatedTest_TestMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DBRepeatedTest_TestMapEntry_DoNotUseDefaultTypeInternal {
  constexpr DBRepeatedTest_TestMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBRepeatedTest_TestMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DBRepeatedTest_TestMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBRepeatedTest_TestMapEntry_DoNotUseDefaultTypeInternal _DBRepeatedTest_TestMapEntry_DoNotUse_default_instance_;
constexpr DBRepeatedTest::DBRepeatedTest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : test_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , repeated_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , repeated_int_(int64_t{0}){}
struct DBRepeatedTestDefaultTypeInternal {
  constexpr DBRepeatedTestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBRepeatedTestDefaultTypeInternal() {}
  union {
    DBRepeatedTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBRepeatedTestDefaultTypeInternal _DBRepeatedTest_default_instance_;
constexpr DBTestKey::DBTestKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DBTestKeyDefaultTypeInternal {
  constexpr DBTestKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBTestKeyDefaultTypeInternal() {}
  union {
    DBTestKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBTestKeyDefaultTypeInternal _DBTestKey_default_instance_;
constexpr DBTest::DBTest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DBTestDefaultTypeInternal {
  constexpr DBTestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBTestDefaultTypeInternal() {}
  union {
    DBTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBTestDefaultTypeInternal _DBTest_default_instance_;
}  // namespace msgpacket
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msgDB_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msgDB_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msgDB_2eproto = nullptr;

const uint32_t TableStruct_msgDB_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainKey, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMain, _id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMain, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserDetailKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserDetailKey, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserDetail, _id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserDetail, detail_data_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserDetail, detail_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainTest, _id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainTest, user_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainTest, detail_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainTest, test_repeated_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainTest, en_test_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainTest, str1_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainTest, str2_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainTest, int1_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBUserMainTest, int2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBMapTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBMapTest, map_str_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBMapTest, map_int_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBRepeatedTest_TestMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBRepeatedTest_TestMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBRepeatedTest_TestMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBRepeatedTest_TestMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBRepeatedTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBRepeatedTest, repeated_str_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBRepeatedTest, repeated_int_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBRepeatedTest, test_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBTestKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::DBTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msgpacket::DBUserMainKey)},
  { 7, -1, -1, sizeof(::msgpacket::DBUserMain)},
  { 15, -1, -1, sizeof(::msgpacket::DBUserDetailKey)},
  { 22, -1, -1, sizeof(::msgpacket::DBUserDetail)},
  { 31, -1, -1, sizeof(::msgpacket::DBUserMainTest)},
  { 46, -1, -1, sizeof(::msgpacket::DBMapTest)},
  { 54, 62, -1, sizeof(::msgpacket::DBRepeatedTest_TestMapEntry_DoNotUse)},
  { 64, -1, -1, sizeof(::msgpacket::DBRepeatedTest)},
  { 73, -1, -1, sizeof(::msgpacket::DBTestKey)},
  { 79, -1, -1, sizeof(::msgpacket::DBTest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_DBUserMainKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_DBUserMain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_DBUserDetailKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_DBUserDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_DBUserMainTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_DBMapTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_DBRepeatedTest_TestMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_DBRepeatedTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_DBTestKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_DBTest_default_instance_),
};

const char descriptor_table_protodef_msgDB_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013msgDB.proto\022\tmsgpacket\" \n\rDBUserMainKe"
  "y\022\017\n\007user_id\030\001 \001(\003\"*\n\nDBUserMain\022\013\n\003_id\030"
  "\001 \001(\t\022\017\n\007user_id\030\002 \001(\003\"\"\n\017DBUserDetailKe"
  "y\022\017\n\007user_id\030\001 \001(\003\"C\n\014DBUserDetail\022\013\n\003_i"
  "d\030\001 \001(\t\022\023\n\013detail_data\030\002 \001(\t\022\021\n\tdetail_i"
  "d\030\003 \001(\005\"\346\001\n\016DBUserMainTest\022\013\n\003_id\030\001 \001(\t\022"
  "\017\n\007user_id\030\002 \001(\003\022\'\n\006detail\030\003 \001(\0132\027.msgpa"
  "cket.DBUserDetail\0220\n\rtest_repeated\030\004 \003(\013"
  "2\031.msgpacket.DBRepeatedTest\022#\n\007en_test\030\005"
  " \001(\0162\022.msgpacket.EN_TEST\022\014\n\004str1\030\006 \001(\t\022\014"
  "\n\004str2\030\007 \001(\t\022\014\n\004int1\030\010 \001(\005\022\014\n\004int2\030\t \001(\005"
  "\"-\n\tDBMapTest\022\017\n\007map_str\030\001 \001(\t\022\017\n\007map_in"
  "t\030\002 \001(\003\"\274\001\n\016DBRepeatedTest\022\024\n\014repeated_s"
  "tr\030\001 \001(\t\022\024\n\014repeated_int\030\002 \001(\003\0228\n\010test_m"
  "ap\030\003 \003(\0132&.msgpacket.DBRepeatedTest.Test"
  "MapEntry\032D\n\014TestMapEntry\022\013\n\003key\030\001 \001(\003\022#\n"
  "\005value\030\002 \001(\0132\024.msgpacket.DBMapTest:\0028\001\"\013"
  "\n\tDBTestKey\"\010\n\006DBTest*A\n\007EN_TEST\022\014\n\010EN_T"
  "EST0\020\000\022\014\n\010EN_TEST1\020\001\022\014\n\010EN_TEST2\020\002\022\014\n\010EN"
  "_TEST3\020\003B\016Z\014./;msgpacketb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msgDB_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msgDB_2eproto = {
  false, false, 792, descriptor_table_protodef_msgDB_2eproto, "msgDB.proto", 
  &descriptor_table_msgDB_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_msgDB_2eproto::offsets,
  file_level_metadata_msgDB_2eproto, file_level_enum_descriptors_msgDB_2eproto, file_level_service_descriptors_msgDB_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msgDB_2eproto_getter() {
  return &descriptor_table_msgDB_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msgDB_2eproto(&descriptor_table_msgDB_2eproto);
namespace msgpacket {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EN_TEST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msgDB_2eproto);
  return file_level_enum_descriptors_msgDB_2eproto[0];
}
bool EN_TEST_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DBUserMainKey::_Internal {
 public:
};

DBUserMainKey::DBUserMainKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.DBUserMainKey)
}
DBUserMainKey::DBUserMainKey(const DBUserMainKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.DBUserMainKey)
}

inline void DBUserMainKey::SharedCtor() {
user_id_ = int64_t{0};
}

DBUserMainKey::~DBUserMainKey() {
  // @@protoc_insertion_point(destructor:msgpacket.DBUserMainKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBUserMainKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBUserMainKey::ArenaDtor(void* object) {
  DBUserMainKey* _this = reinterpret_cast< DBUserMainKey* >(object);
  (void)_this;
}
void DBUserMainKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBUserMainKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBUserMainKey::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.DBUserMainKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBUserMainKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBUserMainKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.DBUserMainKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.DBUserMainKey)
  return target;
}

size_t DBUserMainKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.DBUserMainKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBUserMainKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBUserMainKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBUserMainKey::GetClassData() const { return &_class_data_; }

void DBUserMainKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBUserMainKey *>(to)->MergeFrom(
      static_cast<const DBUserMainKey &>(from));
}


void DBUserMainKey::MergeFrom(const DBUserMainKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.DBUserMainKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBUserMainKey::CopyFrom(const DBUserMainKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.DBUserMainKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBUserMainKey::IsInitialized() const {
  return true;
}

void DBUserMainKey::InternalSwap(DBUserMainKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBUserMainKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgDB_2eproto_getter, &descriptor_table_msgDB_2eproto_once,
      file_level_metadata_msgDB_2eproto[0]);
}

// ===================================================================

class DBUserMain::_Internal {
 public:
};

DBUserMain::DBUserMain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.DBUserMain)
}
DBUserMain::DBUserMain(const DBUserMain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__id().empty()) {
    _id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal__id(), 
      GetArenaForAllocation());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.DBUserMain)
}

inline void DBUserMain::SharedCtor() {
_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_ = int64_t{0};
}

DBUserMain::~DBUserMain() {
  // @@protoc_insertion_point(destructor:msgpacket.DBUserMain)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBUserMain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBUserMain::ArenaDtor(void* object) {
  DBUserMain* _this = reinterpret_cast< DBUserMain* >(object);
  (void)_this;
}
void DBUserMain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBUserMain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBUserMain::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.DBUserMain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _id_.ClearToEmpty();
  user_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBUserMain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string _id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable__id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.DBUserMain._id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBUserMain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.DBUserMain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string _id = 1;
  if (!this->_internal__id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__id().data(), static_cast<int>(this->_internal__id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.DBUserMain._id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal__id(), target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.DBUserMain)
  return target;
}

size_t DBUserMain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.DBUserMain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string _id = 1;
  if (!this->_internal__id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal__id());
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBUserMain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBUserMain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBUserMain::GetClassData() const { return &_class_data_; }

void DBUserMain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBUserMain *>(to)->MergeFrom(
      static_cast<const DBUserMain &>(from));
}


void DBUserMain::MergeFrom(const DBUserMain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.DBUserMain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal__id().empty()) {
    _internal_set__id(from._internal__id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBUserMain::CopyFrom(const DBUserMain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.DBUserMain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBUserMain::IsInitialized() const {
  return true;
}

void DBUserMain::InternalSwap(DBUserMain* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &_id_, lhs_arena,
      &other->_id_, rhs_arena
  );
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBUserMain::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgDB_2eproto_getter, &descriptor_table_msgDB_2eproto_once,
      file_level_metadata_msgDB_2eproto[1]);
}

// ===================================================================

class DBUserDetailKey::_Internal {
 public:
};

DBUserDetailKey::DBUserDetailKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.DBUserDetailKey)
}
DBUserDetailKey::DBUserDetailKey(const DBUserDetailKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.DBUserDetailKey)
}

inline void DBUserDetailKey::SharedCtor() {
user_id_ = int64_t{0};
}

DBUserDetailKey::~DBUserDetailKey() {
  // @@protoc_insertion_point(destructor:msgpacket.DBUserDetailKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBUserDetailKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBUserDetailKey::ArenaDtor(void* object) {
  DBUserDetailKey* _this = reinterpret_cast< DBUserDetailKey* >(object);
  (void)_this;
}
void DBUserDetailKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBUserDetailKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBUserDetailKey::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.DBUserDetailKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBUserDetailKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBUserDetailKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.DBUserDetailKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.DBUserDetailKey)
  return target;
}

size_t DBUserDetailKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.DBUserDetailKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBUserDetailKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBUserDetailKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBUserDetailKey::GetClassData() const { return &_class_data_; }

void DBUserDetailKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBUserDetailKey *>(to)->MergeFrom(
      static_cast<const DBUserDetailKey &>(from));
}


void DBUserDetailKey::MergeFrom(const DBUserDetailKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.DBUserDetailKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBUserDetailKey::CopyFrom(const DBUserDetailKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.DBUserDetailKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBUserDetailKey::IsInitialized() const {
  return true;
}

void DBUserDetailKey::InternalSwap(DBUserDetailKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBUserDetailKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgDB_2eproto_getter, &descriptor_table_msgDB_2eproto_once,
      file_level_metadata_msgDB_2eproto[2]);
}

// ===================================================================

class DBUserDetail::_Internal {
 public:
};

DBUserDetail::DBUserDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.DBUserDetail)
}
DBUserDetail::DBUserDetail(const DBUserDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__id().empty()) {
    _id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal__id(), 
      GetArenaForAllocation());
  }
  detail_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detail_data().empty()) {
    detail_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detail_data(), 
      GetArenaForAllocation());
  }
  detail_id_ = from.detail_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.DBUserDetail)
}

inline void DBUserDetail::SharedCtor() {
_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
detail_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
detail_id_ = 0;
}

DBUserDetail::~DBUserDetail() {
  // @@protoc_insertion_point(destructor:msgpacket.DBUserDetail)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBUserDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBUserDetail::ArenaDtor(void* object) {
  DBUserDetail* _this = reinterpret_cast< DBUserDetail* >(object);
  (void)_this;
}
void DBUserDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBUserDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBUserDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.DBUserDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _id_.ClearToEmpty();
  detail_data_.ClearToEmpty();
  detail_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBUserDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string _id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable__id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.DBUserDetail._id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string detail_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_detail_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.DBUserDetail.detail_data"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 detail_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          detail_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBUserDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.DBUserDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string _id = 1;
  if (!this->_internal__id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__id().data(), static_cast<int>(this->_internal__id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.DBUserDetail._id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal__id(), target);
  }

  // string detail_data = 2;
  if (!this->_internal_detail_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail_data().data(), static_cast<int>(this->_internal_detail_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.DBUserDetail.detail_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detail_data(), target);
  }

  // int32 detail_id = 3;
  if (this->_internal_detail_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_detail_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.DBUserDetail)
  return target;
}

size_t DBUserDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.DBUserDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string _id = 1;
  if (!this->_internal__id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal__id());
  }

  // string detail_data = 2;
  if (!this->_internal_detail_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail_data());
  }

  // int32 detail_id = 3;
  if (this->_internal_detail_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_detail_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBUserDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBUserDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBUserDetail::GetClassData() const { return &_class_data_; }

void DBUserDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBUserDetail *>(to)->MergeFrom(
      static_cast<const DBUserDetail &>(from));
}


void DBUserDetail::MergeFrom(const DBUserDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.DBUserDetail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal__id().empty()) {
    _internal_set__id(from._internal__id());
  }
  if (!from._internal_detail_data().empty()) {
    _internal_set_detail_data(from._internal_detail_data());
  }
  if (from._internal_detail_id() != 0) {
    _internal_set_detail_id(from._internal_detail_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBUserDetail::CopyFrom(const DBUserDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.DBUserDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBUserDetail::IsInitialized() const {
  return true;
}

void DBUserDetail::InternalSwap(DBUserDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &_id_, lhs_arena,
      &other->_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &detail_data_, lhs_arena,
      &other->detail_data_, rhs_arena
  );
  swap(detail_id_, other->detail_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBUserDetail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgDB_2eproto_getter, &descriptor_table_msgDB_2eproto_once,
      file_level_metadata_msgDB_2eproto[3]);
}

// ===================================================================

class DBUserMainTest::_Internal {
 public:
  static const ::msgpacket::DBUserDetail& detail(const DBUserMainTest* msg);
};

const ::msgpacket::DBUserDetail&
DBUserMainTest::_Internal::detail(const DBUserMainTest* msg) {
  return *msg->detail_;
}
DBUserMainTest::DBUserMainTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  test_repeated_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.DBUserMainTest)
}
DBUserMainTest::DBUserMainTest(const DBUserMainTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      test_repeated_(from.test_repeated_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__id().empty()) {
    _id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal__id(), 
      GetArenaForAllocation());
  }
  str1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str1().empty()) {
    str1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str1(), 
      GetArenaForAllocation());
  }
  str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str2().empty()) {
    str2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str2(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_detail()) {
    detail_ = new ::msgpacket::DBUserDetail(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&int2_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(int2_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.DBUserMainTest)
}

inline void DBUserMainTest::SharedCtor() {
_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&detail_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&int2_) -
    reinterpret_cast<char*>(&detail_)) + sizeof(int2_));
}

DBUserMainTest::~DBUserMainTest() {
  // @@protoc_insertion_point(destructor:msgpacket.DBUserMainTest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBUserMainTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detail_;
}

void DBUserMainTest::ArenaDtor(void* object) {
  DBUserMainTest* _this = reinterpret_cast< DBUserMainTest* >(object);
  (void)_this;
}
void DBUserMainTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBUserMainTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBUserMainTest::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.DBUserMainTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_repeated_.Clear();
  _id_.ClearToEmpty();
  str1_.ClearToEmpty();
  str2_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int2_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(int2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBUserMainTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string _id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable__id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.DBUserMainTest._id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.DBUserDetail detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msgpacket.DBRepeatedTest test_repeated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_test_repeated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.EN_TEST en_test = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_en_test(static_cast<::msgpacket::EN_TEST>(val));
        } else
          goto handle_unusual;
        continue;
      // string str1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_str1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.DBUserMainTest.str1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_str2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.DBUserMainTest.str2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          int1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          int2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBUserMainTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.DBUserMainTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string _id = 1;
  if (!this->_internal__id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__id().data(), static_cast<int>(this->_internal__id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.DBUserMainTest._id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal__id(), target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // .msgpacket.DBUserDetail detail = 3;
  if (this->_internal_has_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::detail(this), target, stream);
  }

  // repeated .msgpacket.DBRepeatedTest test_repeated = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_test_repeated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_test_repeated(i), target, stream);
  }

  // .msgpacket.EN_TEST en_test = 5;
  if (this->_internal_en_test() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_en_test(), target);
  }

  // string str1 = 6;
  if (!this->_internal_str1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str1().data(), static_cast<int>(this->_internal_str1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.DBUserMainTest.str1");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_str1(), target);
  }

  // string str2 = 7;
  if (!this->_internal_str2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str2().data(), static_cast<int>(this->_internal_str2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.DBUserMainTest.str2");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_str2(), target);
  }

  // int32 int1 = 8;
  if (this->_internal_int1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_int1(), target);
  }

  // int32 int2 = 9;
  if (this->_internal_int2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_int2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.DBUserMainTest)
  return target;
}

size_t DBUserMainTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.DBUserMainTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msgpacket.DBRepeatedTest test_repeated = 4;
  total_size += 1UL * this->_internal_test_repeated_size();
  for (const auto& msg : this->test_repeated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string _id = 1;
  if (!this->_internal__id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal__id());
  }

  // string str1 = 6;
  if (!this->_internal_str1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str1());
  }

  // string str2 = 7;
  if (!this->_internal_str2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str2());
  }

  // .msgpacket.DBUserDetail detail = 3;
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  // .msgpacket.EN_TEST en_test = 5;
  if (this->_internal_en_test() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_en_test());
  }

  // int32 int1 = 8;
  if (this->_internal_int1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_int1());
  }

  // int32 int2 = 9;
  if (this->_internal_int2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_int2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBUserMainTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBUserMainTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBUserMainTest::GetClassData() const { return &_class_data_; }

void DBUserMainTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBUserMainTest *>(to)->MergeFrom(
      static_cast<const DBUserMainTest &>(from));
}


void DBUserMainTest::MergeFrom(const DBUserMainTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.DBUserMainTest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  test_repeated_.MergeFrom(from.test_repeated_);
  if (!from._internal__id().empty()) {
    _internal_set__id(from._internal__id());
  }
  if (!from._internal_str1().empty()) {
    _internal_set_str1(from._internal_str1());
  }
  if (!from._internal_str2().empty()) {
    _internal_set_str2(from._internal_str2());
  }
  if (from._internal_has_detail()) {
    _internal_mutable_detail()->::msgpacket::DBUserDetail::MergeFrom(from._internal_detail());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_en_test() != 0) {
    _internal_set_en_test(from._internal_en_test());
  }
  if (from._internal_int1() != 0) {
    _internal_set_int1(from._internal_int1());
  }
  if (from._internal_int2() != 0) {
    _internal_set_int2(from._internal_int2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBUserMainTest::CopyFrom(const DBUserMainTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.DBUserMainTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBUserMainTest::IsInitialized() const {
  return true;
}

void DBUserMainTest::InternalSwap(DBUserMainTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  test_repeated_.InternalSwap(&other->test_repeated_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &_id_, lhs_arena,
      &other->_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str1_, lhs_arena,
      &other->str1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str2_, lhs_arena,
      &other->str2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBUserMainTest, int2_)
      + sizeof(DBUserMainTest::int2_)
      - PROTOBUF_FIELD_OFFSET(DBUserMainTest, detail_)>(
          reinterpret_cast<char*>(&detail_),
          reinterpret_cast<char*>(&other->detail_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBUserMainTest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgDB_2eproto_getter, &descriptor_table_msgDB_2eproto_once,
      file_level_metadata_msgDB_2eproto[4]);
}

// ===================================================================

class DBMapTest::_Internal {
 public:
};

DBMapTest::DBMapTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.DBMapTest)
}
DBMapTest::DBMapTest(const DBMapTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_str().empty()) {
    map_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_str(), 
      GetArenaForAllocation());
  }
  map_int_ = from.map_int_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.DBMapTest)
}

inline void DBMapTest::SharedCtor() {
map_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
map_int_ = int64_t{0};
}

DBMapTest::~DBMapTest() {
  // @@protoc_insertion_point(destructor:msgpacket.DBMapTest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBMapTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBMapTest::ArenaDtor(void* object) {
  DBMapTest* _this = reinterpret_cast< DBMapTest* >(object);
  (void)_this;
}
void DBMapTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBMapTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBMapTest::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.DBMapTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_str_.ClearToEmpty();
  map_int_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMapTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.DBMapTest.map_str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 map_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          map_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBMapTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.DBMapTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_str = 1;
  if (!this->_internal_map_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_str().data(), static_cast<int>(this->_internal_map_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.DBMapTest.map_str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_str(), target);
  }

  // int64 map_int = 2;
  if (this->_internal_map_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_map_int(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.DBMapTest)
  return target;
}

size_t DBMapTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.DBMapTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_str = 1;
  if (!this->_internal_map_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_str());
  }

  // int64 map_int = 2;
  if (this->_internal_map_int() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_map_int());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBMapTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBMapTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBMapTest::GetClassData() const { return &_class_data_; }

void DBMapTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBMapTest *>(to)->MergeFrom(
      static_cast<const DBMapTest &>(from));
}


void DBMapTest::MergeFrom(const DBMapTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.DBMapTest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_str().empty()) {
    _internal_set_map_str(from._internal_map_str());
  }
  if (from._internal_map_int() != 0) {
    _internal_set_map_int(from._internal_map_int());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBMapTest::CopyFrom(const DBMapTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.DBMapTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMapTest::IsInitialized() const {
  return true;
}

void DBMapTest::InternalSwap(DBMapTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_str_, lhs_arena,
      &other->map_str_, rhs_arena
  );
  swap(map_int_, other->map_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMapTest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgDB_2eproto_getter, &descriptor_table_msgDB_2eproto_once,
      file_level_metadata_msgDB_2eproto[5]);
}

// ===================================================================

DBRepeatedTest_TestMapEntry_DoNotUse::DBRepeatedTest_TestMapEntry_DoNotUse() {}
DBRepeatedTest_TestMapEntry_DoNotUse::DBRepeatedTest_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DBRepeatedTest_TestMapEntry_DoNotUse::MergeFrom(const DBRepeatedTest_TestMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DBRepeatedTest_TestMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgDB_2eproto_getter, &descriptor_table_msgDB_2eproto_once,
      file_level_metadata_msgDB_2eproto[6]);
}

// ===================================================================

class DBRepeatedTest::_Internal {
 public:
};

DBRepeatedTest::DBRepeatedTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  test_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.DBRepeatedTest)
}
DBRepeatedTest::DBRepeatedTest(const DBRepeatedTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_map_.MergeFrom(from.test_map_);
  repeated_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    repeated_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_repeated_str().empty()) {
    repeated_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_repeated_str(), 
      GetArenaForAllocation());
  }
  repeated_int_ = from.repeated_int_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.DBRepeatedTest)
}

inline void DBRepeatedTest::SharedCtor() {
repeated_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  repeated_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
repeated_int_ = int64_t{0};
}

DBRepeatedTest::~DBRepeatedTest() {
  // @@protoc_insertion_point(destructor:msgpacket.DBRepeatedTest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBRepeatedTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  repeated_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBRepeatedTest::ArenaDtor(void* object) {
  DBRepeatedTest* _this = reinterpret_cast< DBRepeatedTest* >(object);
  (void)_this;
  _this->test_map_. ~MapField();
}
inline void DBRepeatedTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &DBRepeatedTest::ArenaDtor);
  }
}
void DBRepeatedTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBRepeatedTest::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.DBRepeatedTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_map_.Clear();
  repeated_str_.ClearToEmpty();
  repeated_int_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBRepeatedTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string repeated_str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_repeated_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.DBRepeatedTest.repeated_str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 repeated_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          repeated_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int64, .msgpacket.DBMapTest> test_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&test_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBRepeatedTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.DBRepeatedTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string repeated_str = 1;
  if (!this->_internal_repeated_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repeated_str().data(), static_cast<int>(this->_internal_repeated_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.DBRepeatedTest.repeated_str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_repeated_str(), target);
  }

  // int64 repeated_int = 2;
  if (this->_internal_repeated_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_repeated_int(), target);
  }

  // map<int64, .msgpacket.DBMapTest> test_map = 3;
  if (!this->_internal_test_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_test_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_test_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >::const_iterator
          it = this->_internal_test_map().begin();
          it != this->_internal_test_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DBRepeatedTest_TestMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >::const_iterator
          it = this->_internal_test_map().begin();
          it != this->_internal_test_map().end(); ++it) {
        target = DBRepeatedTest_TestMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.DBRepeatedTest)
  return target;
}

size_t DBRepeatedTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.DBRepeatedTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .msgpacket.DBMapTest> test_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >::const_iterator
      it = this->_internal_test_map().begin();
      it != this->_internal_test_map().end(); ++it) {
    total_size += DBRepeatedTest_TestMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string repeated_str = 1;
  if (!this->_internal_repeated_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repeated_str());
  }

  // int64 repeated_int = 2;
  if (this->_internal_repeated_int() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_repeated_int());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBRepeatedTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBRepeatedTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBRepeatedTest::GetClassData() const { return &_class_data_; }

void DBRepeatedTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBRepeatedTest *>(to)->MergeFrom(
      static_cast<const DBRepeatedTest &>(from));
}


void DBRepeatedTest::MergeFrom(const DBRepeatedTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.DBRepeatedTest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  test_map_.MergeFrom(from.test_map_);
  if (!from._internal_repeated_str().empty()) {
    _internal_set_repeated_str(from._internal_repeated_str());
  }
  if (from._internal_repeated_int() != 0) {
    _internal_set_repeated_int(from._internal_repeated_int());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBRepeatedTest::CopyFrom(const DBRepeatedTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.DBRepeatedTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRepeatedTest::IsInitialized() const {
  return true;
}

void DBRepeatedTest::InternalSwap(DBRepeatedTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  test_map_.InternalSwap(&other->test_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &repeated_str_, lhs_arena,
      &other->repeated_str_, rhs_arena
  );
  swap(repeated_int_, other->repeated_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBRepeatedTest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgDB_2eproto_getter, &descriptor_table_msgDB_2eproto_once,
      file_level_metadata_msgDB_2eproto[7]);
}

// ===================================================================

class DBTestKey::_Internal {
 public:
};

DBTestKey::DBTestKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msgpacket.DBTestKey)
}
DBTestKey::DBTestKey(const DBTestKey& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgpacket.DBTestKey)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBTestKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBTestKey::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DBTestKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgDB_2eproto_getter, &descriptor_table_msgDB_2eproto_once,
      file_level_metadata_msgDB_2eproto[8]);
}

// ===================================================================

class DBTest::_Internal {
 public:
};

DBTest::DBTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msgpacket.DBTest)
}
DBTest::DBTest(const DBTest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgpacket.DBTest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBTest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DBTest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgDB_2eproto_getter, &descriptor_table_msgDB_2eproto_once,
      file_level_metadata_msgDB_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msgpacket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msgpacket::DBUserMainKey* Arena::CreateMaybeMessage< ::msgpacket::DBUserMainKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::DBUserMainKey >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::DBUserMain* Arena::CreateMaybeMessage< ::msgpacket::DBUserMain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::DBUserMain >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::DBUserDetailKey* Arena::CreateMaybeMessage< ::msgpacket::DBUserDetailKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::DBUserDetailKey >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::DBUserDetail* Arena::CreateMaybeMessage< ::msgpacket::DBUserDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::DBUserDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::DBUserMainTest* Arena::CreateMaybeMessage< ::msgpacket::DBUserMainTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::DBUserMainTest >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::DBMapTest* Arena::CreateMaybeMessage< ::msgpacket::DBMapTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::DBMapTest >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::DBRepeatedTest_TestMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::msgpacket::DBRepeatedTest_TestMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::DBRepeatedTest_TestMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::DBRepeatedTest* Arena::CreateMaybeMessage< ::msgpacket::DBRepeatedTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::DBRepeatedTest >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::DBTestKey* Arena::CreateMaybeMessage< ::msgpacket::DBTestKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::DBTestKey >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::DBTest* Arena::CreateMaybeMessage< ::msgpacket::DBTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::DBTest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
