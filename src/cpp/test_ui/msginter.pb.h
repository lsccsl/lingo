// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msginter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msginter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msginter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "msgdef.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msginter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msginter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[37]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msginter_2eproto;
namespace msgpacket {
class PB_MSG_CENTERSRV_GAMESRV_GETINFO;
struct PB_MSG_CENTERSRV_GAMESRV_GETINFODefaultTypeInternal;
extern PB_MSG_CENTERSRV_GAMESRV_GETINFODefaultTypeInternal _PB_MSG_CENTERSRV_GAMESRV_GETINFO_default_instance_;
class PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES;
struct PB_MSG_CENTERSRV_GAMESRV_GETINFO_RESDefaultTypeInternal;
extern PB_MSG_CENTERSRV_GAMESRV_GETINFO_RESDefaultTypeInternal _PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES_default_instance_;
class PB_MSG_DBSERVER_READ;
struct PB_MSG_DBSERVER_READDefaultTypeInternal;
extern PB_MSG_DBSERVER_READDefaultTypeInternal _PB_MSG_DBSERVER_READ_default_instance_;
class PB_MSG_DBSERVER_READ_RES;
struct PB_MSG_DBSERVER_READ_RESDefaultTypeInternal;
extern PB_MSG_DBSERVER_READ_RESDefaultTypeInternal _PB_MSG_DBSERVER_READ_RES_default_instance_;
class PB_MSG_DBSERVER_WRITE;
struct PB_MSG_DBSERVER_WRITEDefaultTypeInternal;
extern PB_MSG_DBSERVER_WRITEDefaultTypeInternal _PB_MSG_DBSERVER_WRITE_default_instance_;
class PB_MSG_DBSERVER_WRITE_RES;
struct PB_MSG_DBSERVER_WRITE_RESDefaultTypeInternal;
extern PB_MSG_DBSERVER_WRITE_RESDefaultTypeInternal _PB_MSG_DBSERVER_WRITE_RES_default_instance_;
class PB_MSG_DBSERVER_WRITE_WRITE_RECORD;
struct PB_MSG_DBSERVER_WRITE_WRITE_RECORDDefaultTypeInternal;
extern PB_MSG_DBSERVER_WRITE_WRITE_RECORDDefaultTypeInternal _PB_MSG_DBSERVER_WRITE_WRITE_RECORD_default_instance_;
class PB_MSG_INTER_CLISRV_HEARTBEAT;
struct PB_MSG_INTER_CLISRV_HEARTBEATDefaultTypeInternal;
extern PB_MSG_INTER_CLISRV_HEARTBEATDefaultTypeInternal _PB_MSG_INTER_CLISRV_HEARTBEAT_default_instance_;
class PB_MSG_INTER_CLISRV_HEARTBEAT_RES;
struct PB_MSG_INTER_CLISRV_HEARTBEAT_RESDefaultTypeInternal;
extern PB_MSG_INTER_CLISRV_HEARTBEAT_RESDefaultTypeInternal _PB_MSG_INTER_CLISRV_HEARTBEAT_RES_default_instance_;
class PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER;
struct PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTERDefaultTypeInternal;
extern PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTERDefaultTypeInternal _PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_default_instance_;
class PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES;
struct PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RESDefaultTypeInternal;
extern PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RESDefaultTypeInternal _PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES_default_instance_;
class PB_MSG_INTER_CLISRV_REG_TO_QUE;
struct PB_MSG_INTER_CLISRV_REG_TO_QUEDefaultTypeInternal;
extern PB_MSG_INTER_CLISRV_REG_TO_QUEDefaultTypeInternal _PB_MSG_INTER_CLISRV_REG_TO_QUE_default_instance_;
class PB_MSG_INTER_CLISRV_REG_TO_QUE_RES;
struct PB_MSG_INTER_CLISRV_REG_TO_QUE_RESDefaultTypeInternal;
extern PB_MSG_INTER_CLISRV_REG_TO_QUE_RESDefaultTypeInternal _PB_MSG_INTER_CLISRV_REG_TO_QUE_RES_default_instance_;
class PB_MSG_INTER_MSG;
struct PB_MSG_INTER_MSGDefaultTypeInternal;
extern PB_MSG_INTER_MSGDefaultTypeInternal _PB_MSG_INTER_MSG_default_instance_;
class PB_MSG_INTER_MSG_RES;
struct PB_MSG_INTER_MSG_RESDefaultTypeInternal;
extern PB_MSG_INTER_MSG_RESDefaultTypeInternal _PB_MSG_INTER_MSG_RES_default_instance_;
class PB_MSG_INTER_QUECENTER_HEARTBEAT;
struct PB_MSG_INTER_QUECENTER_HEARTBEATDefaultTypeInternal;
extern PB_MSG_INTER_QUECENTER_HEARTBEATDefaultTypeInternal _PB_MSG_INTER_QUECENTER_HEARTBEAT_default_instance_;
class PB_MSG_INTER_QUECENTER_HEARTBEAT_RES;
struct PB_MSG_INTER_QUECENTER_HEARTBEAT_RESDefaultTypeInternal;
extern PB_MSG_INTER_QUECENTER_HEARTBEAT_RESDefaultTypeInternal _PB_MSG_INTER_QUECENTER_HEARTBEAT_RES_default_instance_;
class PB_MSG_INTER_QUECENTER_OFFLINE_NTF;
struct PB_MSG_INTER_QUECENTER_OFFLINE_NTFDefaultTypeInternal;
extern PB_MSG_INTER_QUECENTER_OFFLINE_NTFDefaultTypeInternal _PB_MSG_INTER_QUECENTER_OFFLINE_NTF_default_instance_;
class PB_MSG_INTER_QUECENTER_ONLINE_NTF;
struct PB_MSG_INTER_QUECENTER_ONLINE_NTFDefaultTypeInternal;
extern PB_MSG_INTER_QUECENTER_ONLINE_NTFDefaultTypeInternal _PB_MSG_INTER_QUECENTER_ONLINE_NTF_default_instance_;
class PB_MSG_INTER_QUECENTER_REGISTER;
struct PB_MSG_INTER_QUECENTER_REGISTERDefaultTypeInternal;
extern PB_MSG_INTER_QUECENTER_REGISTERDefaultTypeInternal _PB_MSG_INTER_QUECENTER_REGISTER_default_instance_;
class PB_MSG_INTER_QUECENTER_REGISTER_RES;
struct PB_MSG_INTER_QUECENTER_REGISTER_RESDefaultTypeInternal;
extern PB_MSG_INTER_QUECENTER_REGISTER_RESDefaultTypeInternal _PB_MSG_INTER_QUECENTER_REGISTER_RES_default_instance_;
class PB_MSG_INTER_QUESRV_CONNECT;
struct PB_MSG_INTER_QUESRV_CONNECTDefaultTypeInternal;
extern PB_MSG_INTER_QUESRV_CONNECTDefaultTypeInternal _PB_MSG_INTER_QUESRV_CONNECT_default_instance_;
class PB_MSG_INTER_QUESRV_CONNECT_RES;
struct PB_MSG_INTER_QUESRV_CONNECT_RESDefaultTypeInternal;
extern PB_MSG_INTER_QUESRV_CONNECT_RESDefaultTypeInternal _PB_MSG_INTER_QUESRV_CONNECT_RES_default_instance_;
class PB_MSG_INTER_QUESRV_GET_SRVTYPE;
struct PB_MSG_INTER_QUESRV_GET_SRVTYPEDefaultTypeInternal;
extern PB_MSG_INTER_QUESRV_GET_SRVTYPEDefaultTypeInternal _PB_MSG_INTER_QUESRV_GET_SRVTYPE_default_instance_;
class PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES;
struct PB_MSG_INTER_QUESRV_GET_SRVTYPE_RESDefaultTypeInternal;
extern PB_MSG_INTER_QUESRV_GET_SRVTYPE_RESDefaultTypeInternal _PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES_default_instance_;
class PB_MSG_INTER_QUESRV_HEARTBEAT;
struct PB_MSG_INTER_QUESRV_HEARTBEATDefaultTypeInternal;
extern PB_MSG_INTER_QUESRV_HEARTBEATDefaultTypeInternal _PB_MSG_INTER_QUESRV_HEARTBEAT_default_instance_;
class PB_MSG_INTER_QUESRV_HEARTBEAT_RES;
struct PB_MSG_INTER_QUESRV_HEARTBEAT_RESDefaultTypeInternal;
extern PB_MSG_INTER_QUESRV_HEARTBEAT_RESDefaultTypeInternal _PB_MSG_INTER_QUESRV_HEARTBEAT_RES_default_instance_;
class PB_MSG_INTER_QUESRV_INFO;
struct PB_MSG_INTER_QUESRV_INFODefaultTypeInternal;
extern PB_MSG_INTER_QUESRV_INFODefaultTypeInternal _PB_MSG_INTER_QUESRV_INFO_default_instance_;
class PB_MSG_INTER_QUESRV_NTF;
struct PB_MSG_INTER_QUESRV_NTFDefaultTypeInternal;
extern PB_MSG_INTER_QUESRV_NTFDefaultTypeInternal _PB_MSG_INTER_QUESRV_NTF_default_instance_;
class PB_MSG_INTER_QUESRV_NTF_online_offline_ntf;
struct PB_MSG_INTER_QUESRV_NTF_online_offline_ntfDefaultTypeInternal;
extern PB_MSG_INTER_QUESRV_NTF_online_offline_ntfDefaultTypeInternal _PB_MSG_INTER_QUESRV_NTF_online_offline_ntf_default_instance_;
class PB_MSG_INTER_QUESRV_REPORT_BROADCAST;
struct PB_MSG_INTER_QUESRV_REPORT_BROADCASTDefaultTypeInternal;
extern PB_MSG_INTER_QUESRV_REPORT_BROADCASTDefaultTypeInternal _PB_MSG_INTER_QUESRV_REPORT_BROADCAST_default_instance_;
class PB_MSG_LOGON;
struct PB_MSG_LOGONDefaultTypeInternal;
extern PB_MSG_LOGONDefaultTypeInternal _PB_MSG_LOGON_default_instance_;
class PB_MSG_LOGONSRV_CENTERSRV_LOGON;
struct PB_MSG_LOGONSRV_CENTERSRV_LOGONDefaultTypeInternal;
extern PB_MSG_LOGONSRV_CENTERSRV_LOGONDefaultTypeInternal _PB_MSG_LOGONSRV_CENTERSRV_LOGON_default_instance_;
class PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES;
struct PB_MSG_LOGONSRV_CENTERSRV_LOGON_RESDefaultTypeInternal;
extern PB_MSG_LOGONSRV_CENTERSRV_LOGON_RESDefaultTypeInternal _PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES_default_instance_;
class PB_MSG_LOGON_RES;
struct PB_MSG_LOGON_RESDefaultTypeInternal;
extern PB_MSG_LOGON_RESDefaultTypeInternal _PB_MSG_LOGON_RES_default_instance_;
class PB_SRV_INFO_ALL;
struct PB_SRV_INFO_ALLDefaultTypeInternal;
extern PB_SRV_INFO_ALLDefaultTypeInternal _PB_SRV_INFO_ALL_default_instance_;
class PB_SRV_INFO_ONE;
struct PB_SRV_INFO_ONEDefaultTypeInternal;
extern PB_SRV_INFO_ONEDefaultTypeInternal _PB_SRV_INFO_ONE_default_instance_;
}  // namespace msgpacket
PROTOBUF_NAMESPACE_OPEN
template<> ::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO>(Arena*);
template<> ::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES>(Arena*);
template<> ::msgpacket::PB_MSG_DBSERVER_READ* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_DBSERVER_READ>(Arena*);
template<> ::msgpacket::PB_MSG_DBSERVER_READ_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_DBSERVER_READ_RES>(Arena*);
template<> ::msgpacket::PB_MSG_DBSERVER_WRITE* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_DBSERVER_WRITE>(Arena*);
template<> ::msgpacket::PB_MSG_DBSERVER_WRITE_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_DBSERVER_WRITE_RES>(Arena*);
template<> ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT_RES>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_MSG* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_MSG>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_MSG_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_MSG_RES>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUECENTER_OFFLINE_NTF* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUECENTER_OFFLINE_NTF>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUECENTER_ONLINE_NTF* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUECENTER_ONLINE_NTF>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER_RES>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUESRV_CONNECT* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_CONNECT>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUESRV_CONNECT_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_CONNECT_RES>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT_RES>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUESRV_INFO* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_INFO>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUESRV_NTF* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_NTF>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf>(Arena*);
template<> ::msgpacket::PB_MSG_INTER_QUESRV_REPORT_BROADCAST* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_REPORT_BROADCAST>(Arena*);
template<> ::msgpacket::PB_MSG_LOGON* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_LOGON>(Arena*);
template<> ::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON>(Arena*);
template<> ::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES>(Arena*);
template<> ::msgpacket::PB_MSG_LOGON_RES* Arena::CreateMaybeMessage<::msgpacket::PB_MSG_LOGON_RES>(Arena*);
template<> ::msgpacket::PB_SRV_INFO_ALL* Arena::CreateMaybeMessage<::msgpacket::PB_SRV_INFO_ALL>(Arena*);
template<> ::msgpacket::PB_SRV_INFO_ONE* Arena::CreateMaybeMessage<::msgpacket::PB_SRV_INFO_ONE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msgpacket {

// ===================================================================

class PB_SRV_INFO_ONE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_SRV_INFO_ONE) */ {
 public:
  inline PB_SRV_INFO_ONE() : PB_SRV_INFO_ONE(nullptr) {}
  ~PB_SRV_INFO_ONE() override;
  explicit constexpr PB_SRV_INFO_ONE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_SRV_INFO_ONE(const PB_SRV_INFO_ONE& from);
  PB_SRV_INFO_ONE(PB_SRV_INFO_ONE&& from) noexcept
    : PB_SRV_INFO_ONE() {
    *this = ::std::move(from);
  }

  inline PB_SRV_INFO_ONE& operator=(const PB_SRV_INFO_ONE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_SRV_INFO_ONE& operator=(PB_SRV_INFO_ONE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_SRV_INFO_ONE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_SRV_INFO_ONE* internal_default_instance() {
    return reinterpret_cast<const PB_SRV_INFO_ONE*>(
               &_PB_SRV_INFO_ONE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PB_SRV_INFO_ONE& a, PB_SRV_INFO_ONE& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_SRV_INFO_ONE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_SRV_INFO_ONE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_SRV_INFO_ONE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_SRV_INFO_ONE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_SRV_INFO_ONE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_SRV_INFO_ONE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_SRV_INFO_ONE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_SRV_INFO_ONE";
  }
  protected:
  explicit PB_SRV_INFO_ONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvUuidFieldNumber = 1,
    kSrvTypeFieldNumber = 2,
  };
  // int64 srv_uuid = 1;
  void clear_srv_uuid();
  int64_t srv_uuid() const;
  void set_srv_uuid(int64_t value);
  private:
  int64_t _internal_srv_uuid() const;
  void _internal_set_srv_uuid(int64_t value);
  public:

  // int32 srv_type = 2;
  void clear_srv_type();
  int32_t srv_type() const;
  void set_srv_type(int32_t value);
  private:
  int32_t _internal_srv_type() const;
  void _internal_set_srv_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_SRV_INFO_ONE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t srv_uuid_;
  int32_t srv_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_SRV_INFO_ALL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_SRV_INFO_ALL) */ {
 public:
  inline PB_SRV_INFO_ALL() : PB_SRV_INFO_ALL(nullptr) {}
  ~PB_SRV_INFO_ALL() override;
  explicit constexpr PB_SRV_INFO_ALL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_SRV_INFO_ALL(const PB_SRV_INFO_ALL& from);
  PB_SRV_INFO_ALL(PB_SRV_INFO_ALL&& from) noexcept
    : PB_SRV_INFO_ALL() {
    *this = ::std::move(from);
  }

  inline PB_SRV_INFO_ALL& operator=(const PB_SRV_INFO_ALL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_SRV_INFO_ALL& operator=(PB_SRV_INFO_ALL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_SRV_INFO_ALL& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_SRV_INFO_ALL* internal_default_instance() {
    return reinterpret_cast<const PB_SRV_INFO_ALL*>(
               &_PB_SRV_INFO_ALL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PB_SRV_INFO_ALL& a, PB_SRV_INFO_ALL& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_SRV_INFO_ALL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_SRV_INFO_ALL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_SRV_INFO_ALL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_SRV_INFO_ALL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_SRV_INFO_ALL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_SRV_INFO_ALL& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_SRV_INFO_ALL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_SRV_INFO_ALL";
  }
  protected:
  explicit PB_SRV_INFO_ALL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArraySrvFieldNumber = 1,
  };
  // repeated .msgpacket.PB_SRV_INFO_ONE array_srv = 1;
  int array_srv_size() const;
  private:
  int _internal_array_srv_size() const;
  public:
  void clear_array_srv();
  ::msgpacket::PB_SRV_INFO_ONE* mutable_array_srv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_SRV_INFO_ONE >*
      mutable_array_srv();
  private:
  const ::msgpacket::PB_SRV_INFO_ONE& _internal_array_srv(int index) const;
  ::msgpacket::PB_SRV_INFO_ONE* _internal_add_array_srv();
  public:
  const ::msgpacket::PB_SRV_INFO_ONE& array_srv(int index) const;
  ::msgpacket::PB_SRV_INFO_ONE* add_array_srv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_SRV_INFO_ONE >&
      array_srv() const;

  // @@protoc_insertion_point(class_scope:msgpacket.PB_SRV_INFO_ALL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_SRV_INFO_ONE > array_srv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUECENTER_REGISTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER) */ {
 public:
  inline PB_MSG_INTER_QUECENTER_REGISTER() : PB_MSG_INTER_QUECENTER_REGISTER(nullptr) {}
  ~PB_MSG_INTER_QUECENTER_REGISTER() override;
  explicit constexpr PB_MSG_INTER_QUECENTER_REGISTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUECENTER_REGISTER(const PB_MSG_INTER_QUECENTER_REGISTER& from);
  PB_MSG_INTER_QUECENTER_REGISTER(PB_MSG_INTER_QUECENTER_REGISTER&& from) noexcept
    : PB_MSG_INTER_QUECENTER_REGISTER() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUECENTER_REGISTER& operator=(const PB_MSG_INTER_QUECENTER_REGISTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUECENTER_REGISTER& operator=(PB_MSG_INTER_QUECENTER_REGISTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUECENTER_REGISTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUECENTER_REGISTER* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUECENTER_REGISTER*>(
               &_PB_MSG_INTER_QUECENTER_REGISTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PB_MSG_INTER_QUECENTER_REGISTER& a, PB_MSG_INTER_QUECENTER_REGISTER& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUECENTER_REGISTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUECENTER_REGISTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUECENTER_REGISTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUECENTER_REGISTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUECENTER_REGISTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUECENTER_REGISTER& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUECENTER_REGISTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUECENTER_REGISTER";
  }
  protected:
  explicit PB_MSG_INTER_QUECENTER_REGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kLocalAllSrvFieldNumber = 4,
    kQueSrvIdFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 4;
  bool has_local_all_srv() const;
  private:
  bool _internal_has_local_all_srv() const;
  public:
  void clear_local_all_srv();
  const ::msgpacket::PB_SRV_INFO_ALL& local_all_srv() const;
  PROTOBUF_NODISCARD ::msgpacket::PB_SRV_INFO_ALL* release_local_all_srv();
  ::msgpacket::PB_SRV_INFO_ALL* mutable_local_all_srv();
  void set_allocated_local_all_srv(::msgpacket::PB_SRV_INFO_ALL* local_all_srv);
  private:
  const ::msgpacket::PB_SRV_INFO_ALL& _internal_local_all_srv() const;
  ::msgpacket::PB_SRV_INFO_ALL* _internal_mutable_local_all_srv();
  public:
  void unsafe_arena_set_allocated_local_all_srv(
      ::msgpacket::PB_SRV_INFO_ALL* local_all_srv);
  ::msgpacket::PB_SRV_INFO_ALL* unsafe_arena_release_local_all_srv();

  // int64 que_srv_id = 1;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::msgpacket::PB_SRV_INFO_ALL* local_all_srv_;
  int64_t que_srv_id_;
  int32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUESRV_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUESRV_INFO) */ {
 public:
  inline PB_MSG_INTER_QUESRV_INFO() : PB_MSG_INTER_QUESRV_INFO(nullptr) {}
  ~PB_MSG_INTER_QUESRV_INFO() override;
  explicit constexpr PB_MSG_INTER_QUESRV_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUESRV_INFO(const PB_MSG_INTER_QUESRV_INFO& from);
  PB_MSG_INTER_QUESRV_INFO(PB_MSG_INTER_QUESRV_INFO&& from) noexcept
    : PB_MSG_INTER_QUESRV_INFO() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUESRV_INFO& operator=(const PB_MSG_INTER_QUESRV_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUESRV_INFO& operator=(PB_MSG_INTER_QUESRV_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUESRV_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUESRV_INFO* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUESRV_INFO*>(
               &_PB_MSG_INTER_QUESRV_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PB_MSG_INTER_QUESRV_INFO& a, PB_MSG_INTER_QUESRV_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUESRV_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUESRV_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUESRV_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUESRV_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUESRV_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUESRV_INFO& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUESRV_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUESRV_INFO";
  }
  protected:
  explicit PB_MSG_INTER_QUESRV_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kQueSrvIdFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int64 que_srv_id = 1;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUESRV_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int64_t que_srv_id_;
  int32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUECENTER_REGISTER_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES) */ {
 public:
  inline PB_MSG_INTER_QUECENTER_REGISTER_RES() : PB_MSG_INTER_QUECENTER_REGISTER_RES(nullptr) {}
  ~PB_MSG_INTER_QUECENTER_REGISTER_RES() override;
  explicit constexpr PB_MSG_INTER_QUECENTER_REGISTER_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUECENTER_REGISTER_RES(const PB_MSG_INTER_QUECENTER_REGISTER_RES& from);
  PB_MSG_INTER_QUECENTER_REGISTER_RES(PB_MSG_INTER_QUECENTER_REGISTER_RES&& from) noexcept
    : PB_MSG_INTER_QUECENTER_REGISTER_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUECENTER_REGISTER_RES& operator=(const PB_MSG_INTER_QUECENTER_REGISTER_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUECENTER_REGISTER_RES& operator=(PB_MSG_INTER_QUECENTER_REGISTER_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUECENTER_REGISTER_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUECENTER_REGISTER_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUECENTER_REGISTER_RES*>(
               &_PB_MSG_INTER_QUECENTER_REGISTER_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PB_MSG_INTER_QUECENTER_REGISTER_RES& a, PB_MSG_INTER_QUECENTER_REGISTER_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUECENTER_REGISTER_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUECENTER_REGISTER_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUECENTER_REGISTER_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUECENTER_REGISTER_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUECENTER_REGISTER_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUECENTER_REGISTER_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUECENTER_REGISTER_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES";
  }
  protected:
  explicit PB_MSG_INTER_QUECENTER_REGISTER_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueSrvInfoFieldNumber = 1,
    kQueSrvIdFieldNumber = 2,
  };
  // repeated .msgpacket.PB_MSG_INTER_QUESRV_INFO que_srv_info = 1;
  int que_srv_info_size() const;
  private:
  int _internal_que_srv_info_size() const;
  public:
  void clear_que_srv_info();
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* mutable_que_srv_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_MSG_INTER_QUESRV_INFO >*
      mutable_que_srv_info();
  private:
  const ::msgpacket::PB_MSG_INTER_QUESRV_INFO& _internal_que_srv_info(int index) const;
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* _internal_add_que_srv_info();
  public:
  const ::msgpacket::PB_MSG_INTER_QUESRV_INFO& que_srv_info(int index) const;
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* add_que_srv_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_MSG_INTER_QUESRV_INFO >&
      que_srv_info() const;

  // int64 que_srv_id = 2;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_MSG_INTER_QUESRV_INFO > que_srv_info_;
  int64_t que_srv_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUECENTER_OFFLINE_NTF final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF) */ {
 public:
  inline PB_MSG_INTER_QUECENTER_OFFLINE_NTF() : PB_MSG_INTER_QUECENTER_OFFLINE_NTF(nullptr) {}
  ~PB_MSG_INTER_QUECENTER_OFFLINE_NTF() override;
  explicit constexpr PB_MSG_INTER_QUECENTER_OFFLINE_NTF(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUECENTER_OFFLINE_NTF(const PB_MSG_INTER_QUECENTER_OFFLINE_NTF& from);
  PB_MSG_INTER_QUECENTER_OFFLINE_NTF(PB_MSG_INTER_QUECENTER_OFFLINE_NTF&& from) noexcept
    : PB_MSG_INTER_QUECENTER_OFFLINE_NTF() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUECENTER_OFFLINE_NTF& operator=(const PB_MSG_INTER_QUECENTER_OFFLINE_NTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUECENTER_OFFLINE_NTF& operator=(PB_MSG_INTER_QUECENTER_OFFLINE_NTF&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUECENTER_OFFLINE_NTF& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUECENTER_OFFLINE_NTF* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUECENTER_OFFLINE_NTF*>(
               &_PB_MSG_INTER_QUECENTER_OFFLINE_NTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PB_MSG_INTER_QUECENTER_OFFLINE_NTF& a, PB_MSG_INTER_QUECENTER_OFFLINE_NTF& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUECENTER_OFFLINE_NTF* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUECENTER_OFFLINE_NTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUECENTER_OFFLINE_NTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUECENTER_OFFLINE_NTF>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUECENTER_OFFLINE_NTF& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUECENTER_OFFLINE_NTF& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUECENTER_OFFLINE_NTF* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF";
  }
  protected:
  explicit PB_MSG_INTER_QUECENTER_OFFLINE_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueSrvIdFieldNumber = 1,
  };
  // int64 que_srv_id = 1;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t que_srv_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUECENTER_ONLINE_NTF final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF) */ {
 public:
  inline PB_MSG_INTER_QUECENTER_ONLINE_NTF() : PB_MSG_INTER_QUECENTER_ONLINE_NTF(nullptr) {}
  ~PB_MSG_INTER_QUECENTER_ONLINE_NTF() override;
  explicit constexpr PB_MSG_INTER_QUECENTER_ONLINE_NTF(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUECENTER_ONLINE_NTF(const PB_MSG_INTER_QUECENTER_ONLINE_NTF& from);
  PB_MSG_INTER_QUECENTER_ONLINE_NTF(PB_MSG_INTER_QUECENTER_ONLINE_NTF&& from) noexcept
    : PB_MSG_INTER_QUECENTER_ONLINE_NTF() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUECENTER_ONLINE_NTF& operator=(const PB_MSG_INTER_QUECENTER_ONLINE_NTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUECENTER_ONLINE_NTF& operator=(PB_MSG_INTER_QUECENTER_ONLINE_NTF&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUECENTER_ONLINE_NTF& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUECENTER_ONLINE_NTF* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUECENTER_ONLINE_NTF*>(
               &_PB_MSG_INTER_QUECENTER_ONLINE_NTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PB_MSG_INTER_QUECENTER_ONLINE_NTF& a, PB_MSG_INTER_QUECENTER_ONLINE_NTF& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUECENTER_ONLINE_NTF* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUECENTER_ONLINE_NTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUECENTER_ONLINE_NTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUECENTER_ONLINE_NTF>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUECENTER_ONLINE_NTF& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUECENTER_ONLINE_NTF& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUECENTER_ONLINE_NTF* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF";
  }
  protected:
  explicit PB_MSG_INTER_QUECENTER_ONLINE_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueSrvInfoFieldNumber = 1,
  };
  // .msgpacket.PB_MSG_INTER_QUESRV_INFO que_srv_info = 1;
  bool has_que_srv_info() const;
  private:
  bool _internal_has_que_srv_info() const;
  public:
  void clear_que_srv_info();
  const ::msgpacket::PB_MSG_INTER_QUESRV_INFO& que_srv_info() const;
  PROTOBUF_NODISCARD ::msgpacket::PB_MSG_INTER_QUESRV_INFO* release_que_srv_info();
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* mutable_que_srv_info();
  void set_allocated_que_srv_info(::msgpacket::PB_MSG_INTER_QUESRV_INFO* que_srv_info);
  private:
  const ::msgpacket::PB_MSG_INTER_QUESRV_INFO& _internal_que_srv_info() const;
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* _internal_mutable_que_srv_info();
  public:
  void unsafe_arena_set_allocated_que_srv_info(
      ::msgpacket::PB_MSG_INTER_QUESRV_INFO* que_srv_info);
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* unsafe_arena_release_que_srv_info();

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* que_srv_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUESRV_CONNECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUESRV_CONNECT) */ {
 public:
  inline PB_MSG_INTER_QUESRV_CONNECT() : PB_MSG_INTER_QUESRV_CONNECT(nullptr) {}
  ~PB_MSG_INTER_QUESRV_CONNECT() override;
  explicit constexpr PB_MSG_INTER_QUESRV_CONNECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUESRV_CONNECT(const PB_MSG_INTER_QUESRV_CONNECT& from);
  PB_MSG_INTER_QUESRV_CONNECT(PB_MSG_INTER_QUESRV_CONNECT&& from) noexcept
    : PB_MSG_INTER_QUESRV_CONNECT() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUESRV_CONNECT& operator=(const PB_MSG_INTER_QUESRV_CONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUESRV_CONNECT& operator=(PB_MSG_INTER_QUESRV_CONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUESRV_CONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUESRV_CONNECT* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUESRV_CONNECT*>(
               &_PB_MSG_INTER_QUESRV_CONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PB_MSG_INTER_QUESRV_CONNECT& a, PB_MSG_INTER_QUESRV_CONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUESRV_CONNECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUESRV_CONNECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUESRV_CONNECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUESRV_CONNECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUESRV_CONNECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUESRV_CONNECT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUESRV_CONNECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUESRV_CONNECT";
  }
  protected:
  explicit PB_MSG_INTER_QUESRV_CONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAllSrvFieldNumber = 2,
    kQueSrvIdFieldNumber = 1,
  };
  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
  bool has_local_all_srv() const;
  private:
  bool _internal_has_local_all_srv() const;
  public:
  void clear_local_all_srv();
  const ::msgpacket::PB_SRV_INFO_ALL& local_all_srv() const;
  PROTOBUF_NODISCARD ::msgpacket::PB_SRV_INFO_ALL* release_local_all_srv();
  ::msgpacket::PB_SRV_INFO_ALL* mutable_local_all_srv();
  void set_allocated_local_all_srv(::msgpacket::PB_SRV_INFO_ALL* local_all_srv);
  private:
  const ::msgpacket::PB_SRV_INFO_ALL& _internal_local_all_srv() const;
  ::msgpacket::PB_SRV_INFO_ALL* _internal_mutable_local_all_srv();
  public:
  void unsafe_arena_set_allocated_local_all_srv(
      ::msgpacket::PB_SRV_INFO_ALL* local_all_srv);
  ::msgpacket::PB_SRV_INFO_ALL* unsafe_arena_release_local_all_srv();

  // int64 que_srv_id = 1;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUESRV_CONNECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::PB_SRV_INFO_ALL* local_all_srv_;
  int64_t que_srv_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUESRV_CONNECT_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES) */ {
 public:
  inline PB_MSG_INTER_QUESRV_CONNECT_RES() : PB_MSG_INTER_QUESRV_CONNECT_RES(nullptr) {}
  ~PB_MSG_INTER_QUESRV_CONNECT_RES() override;
  explicit constexpr PB_MSG_INTER_QUESRV_CONNECT_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUESRV_CONNECT_RES(const PB_MSG_INTER_QUESRV_CONNECT_RES& from);
  PB_MSG_INTER_QUESRV_CONNECT_RES(PB_MSG_INTER_QUESRV_CONNECT_RES&& from) noexcept
    : PB_MSG_INTER_QUESRV_CONNECT_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUESRV_CONNECT_RES& operator=(const PB_MSG_INTER_QUESRV_CONNECT_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUESRV_CONNECT_RES& operator=(PB_MSG_INTER_QUESRV_CONNECT_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUESRV_CONNECT_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUESRV_CONNECT_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUESRV_CONNECT_RES*>(
               &_PB_MSG_INTER_QUESRV_CONNECT_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PB_MSG_INTER_QUESRV_CONNECT_RES& a, PB_MSG_INTER_QUESRV_CONNECT_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUESRV_CONNECT_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUESRV_CONNECT_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUESRV_CONNECT_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUESRV_CONNECT_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUESRV_CONNECT_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUESRV_CONNECT_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUESRV_CONNECT_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES";
  }
  protected:
  explicit PB_MSG_INTER_QUESRV_CONNECT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAllSrvFieldNumber = 2,
    kQueSrvIdFieldNumber = 1,
  };
  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
  bool has_local_all_srv() const;
  private:
  bool _internal_has_local_all_srv() const;
  public:
  void clear_local_all_srv();
  const ::msgpacket::PB_SRV_INFO_ALL& local_all_srv() const;
  PROTOBUF_NODISCARD ::msgpacket::PB_SRV_INFO_ALL* release_local_all_srv();
  ::msgpacket::PB_SRV_INFO_ALL* mutable_local_all_srv();
  void set_allocated_local_all_srv(::msgpacket::PB_SRV_INFO_ALL* local_all_srv);
  private:
  const ::msgpacket::PB_SRV_INFO_ALL& _internal_local_all_srv() const;
  ::msgpacket::PB_SRV_INFO_ALL* _internal_mutable_local_all_srv();
  public:
  void unsafe_arena_set_allocated_local_all_srv(
      ::msgpacket::PB_SRV_INFO_ALL* local_all_srv);
  ::msgpacket::PB_SRV_INFO_ALL* unsafe_arena_release_local_all_srv();

  // int64 que_srv_id = 1;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::PB_SRV_INFO_ALL* local_all_srv_;
  int64_t que_srv_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUECENTER_HEARTBEAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT) */ {
 public:
  inline PB_MSG_INTER_QUECENTER_HEARTBEAT() : PB_MSG_INTER_QUECENTER_HEARTBEAT(nullptr) {}
  ~PB_MSG_INTER_QUECENTER_HEARTBEAT() override;
  explicit constexpr PB_MSG_INTER_QUECENTER_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUECENTER_HEARTBEAT(const PB_MSG_INTER_QUECENTER_HEARTBEAT& from);
  PB_MSG_INTER_QUECENTER_HEARTBEAT(PB_MSG_INTER_QUECENTER_HEARTBEAT&& from) noexcept
    : PB_MSG_INTER_QUECENTER_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUECENTER_HEARTBEAT& operator=(const PB_MSG_INTER_QUECENTER_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUECENTER_HEARTBEAT& operator=(PB_MSG_INTER_QUECENTER_HEARTBEAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUECENTER_HEARTBEAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUECENTER_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUECENTER_HEARTBEAT*>(
               &_PB_MSG_INTER_QUECENTER_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PB_MSG_INTER_QUECENTER_HEARTBEAT& a, PB_MSG_INTER_QUECENTER_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUECENTER_HEARTBEAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUECENTER_HEARTBEAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUECENTER_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUECENTER_HEARTBEAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUECENTER_HEARTBEAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUECENTER_HEARTBEAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUECENTER_HEARTBEAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT";
  }
  protected:
  explicit PB_MSG_INTER_QUECENTER_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueSrvIdFieldNumber = 1,
  };
  // int64 que_srv_id = 1;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t que_srv_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUECENTER_HEARTBEAT_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES) */ {
 public:
  inline PB_MSG_INTER_QUECENTER_HEARTBEAT_RES() : PB_MSG_INTER_QUECENTER_HEARTBEAT_RES(nullptr) {}
  ~PB_MSG_INTER_QUECENTER_HEARTBEAT_RES() override;
  explicit constexpr PB_MSG_INTER_QUECENTER_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUECENTER_HEARTBEAT_RES(const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& from);
  PB_MSG_INTER_QUECENTER_HEARTBEAT_RES(PB_MSG_INTER_QUECENTER_HEARTBEAT_RES&& from) noexcept
    : PB_MSG_INTER_QUECENTER_HEARTBEAT_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& operator=(const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& operator=(PB_MSG_INTER_QUECENTER_HEARTBEAT_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES*>(
               &_PB_MSG_INTER_QUECENTER_HEARTBEAT_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& a, PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUECENTER_HEARTBEAT_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUECENTER_HEARTBEAT_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUECENTER_HEARTBEAT_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUECENTER_HEARTBEAT_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUECENTER_HEARTBEAT_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES";
  }
  protected:
  explicit PB_MSG_INTER_QUECENTER_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueSrvIdFieldNumber = 1,
  };
  // int64 que_srv_id = 1;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t que_srv_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUESRV_HEARTBEAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT) */ {
 public:
  inline PB_MSG_INTER_QUESRV_HEARTBEAT() : PB_MSG_INTER_QUESRV_HEARTBEAT(nullptr) {}
  ~PB_MSG_INTER_QUESRV_HEARTBEAT() override;
  explicit constexpr PB_MSG_INTER_QUESRV_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUESRV_HEARTBEAT(const PB_MSG_INTER_QUESRV_HEARTBEAT& from);
  PB_MSG_INTER_QUESRV_HEARTBEAT(PB_MSG_INTER_QUESRV_HEARTBEAT&& from) noexcept
    : PB_MSG_INTER_QUESRV_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUESRV_HEARTBEAT& operator=(const PB_MSG_INTER_QUESRV_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUESRV_HEARTBEAT& operator=(PB_MSG_INTER_QUESRV_HEARTBEAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUESRV_HEARTBEAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUESRV_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUESRV_HEARTBEAT*>(
               &_PB_MSG_INTER_QUESRV_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PB_MSG_INTER_QUESRV_HEARTBEAT& a, PB_MSG_INTER_QUESRV_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUESRV_HEARTBEAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUESRV_HEARTBEAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUESRV_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUESRV_HEARTBEAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUESRV_HEARTBEAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUESRV_HEARTBEAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUESRV_HEARTBEAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT";
  }
  protected:
  explicit PB_MSG_INTER_QUESRV_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueSrvIdFieldNumber = 1,
  };
  // int64 que_srv_id = 1;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t que_srv_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUESRV_HEARTBEAT_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES) */ {
 public:
  inline PB_MSG_INTER_QUESRV_HEARTBEAT_RES() : PB_MSG_INTER_QUESRV_HEARTBEAT_RES(nullptr) {}
  ~PB_MSG_INTER_QUESRV_HEARTBEAT_RES() override;
  explicit constexpr PB_MSG_INTER_QUESRV_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUESRV_HEARTBEAT_RES(const PB_MSG_INTER_QUESRV_HEARTBEAT_RES& from);
  PB_MSG_INTER_QUESRV_HEARTBEAT_RES(PB_MSG_INTER_QUESRV_HEARTBEAT_RES&& from) noexcept
    : PB_MSG_INTER_QUESRV_HEARTBEAT_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUESRV_HEARTBEAT_RES& operator=(const PB_MSG_INTER_QUESRV_HEARTBEAT_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUESRV_HEARTBEAT_RES& operator=(PB_MSG_INTER_QUESRV_HEARTBEAT_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUESRV_HEARTBEAT_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUESRV_HEARTBEAT_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUESRV_HEARTBEAT_RES*>(
               &_PB_MSG_INTER_QUESRV_HEARTBEAT_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PB_MSG_INTER_QUESRV_HEARTBEAT_RES& a, PB_MSG_INTER_QUESRV_HEARTBEAT_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUESRV_HEARTBEAT_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUESRV_HEARTBEAT_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUESRV_HEARTBEAT_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUESRV_HEARTBEAT_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUESRV_HEARTBEAT_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUESRV_HEARTBEAT_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUESRV_HEARTBEAT_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES";
  }
  protected:
  explicit PB_MSG_INTER_QUESRV_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueSrvIdFieldNumber = 1,
  };
  // int64 que_srv_id = 1;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t que_srv_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER) */ {
 public:
  inline PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER() : PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER(nullptr) {}
  ~PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER() override;
  explicit constexpr PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& from);
  PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER&& from) noexcept
    : PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& operator=(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& operator=(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER*>(
               &_PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& a, PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER";
  }
  protected:
  explicit PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvUuidFieldNumber = 2,
    kSrvTypeFieldNumber = 1,
  };
  // int64 srv_uuid = 2;
  void clear_srv_uuid();
  int64_t srv_uuid() const;
  void set_srv_uuid(int64_t value);
  private:
  int64_t _internal_srv_uuid() const;
  void _internal_set_srv_uuid(int64_t value);
  public:

  // int32 srv_type = 1;
  void clear_srv_type();
  int32_t srv_type() const;
  void set_srv_type(int32_t value);
  private:
  int32_t _internal_srv_type() const;
  void _internal_set_srv_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t srv_uuid_;
  int32_t srv_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES) */ {
 public:
  inline PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES() : PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES(nullptr) {}
  ~PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES() override;
  explicit constexpr PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& from);
  PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES&& from) noexcept
    : PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& operator=(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& operator=(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES*>(
               &_PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& a, PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES";
  }
  protected:
  explicit PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueSrvIpFieldNumber = 4,
    kSrvUuidFieldNumber = 2,
    kQueSrvIdFieldNumber = 3,
    kResFieldNumber = 1,
    kQueSrvPortFieldNumber = 5,
  };
  // string que_srv_ip = 4;
  void clear_que_srv_ip();
  const std::string& que_srv_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_que_srv_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_que_srv_ip();
  PROTOBUF_NODISCARD std::string* release_que_srv_ip();
  void set_allocated_que_srv_ip(std::string* que_srv_ip);
  private:
  const std::string& _internal_que_srv_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_que_srv_ip(const std::string& value);
  std::string* _internal_mutable_que_srv_ip();
  public:

  // int64 srv_uuid = 2;
  void clear_srv_uuid();
  int64_t srv_uuid() const;
  void set_srv_uuid(int64_t value);
  private:
  int64_t _internal_srv_uuid() const;
  void _internal_set_srv_uuid(int64_t value);
  public:

  // int64 que_srv_id = 3;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // .msgpacket.PB_RESPONSE_CODE res = 1;
  void clear_res();
  ::msgpacket::PB_RESPONSE_CODE res() const;
  void set_res(::msgpacket::PB_RESPONSE_CODE value);
  private:
  ::msgpacket::PB_RESPONSE_CODE _internal_res() const;
  void _internal_set_res(::msgpacket::PB_RESPONSE_CODE value);
  public:

  // int32 que_srv_port = 5;
  void clear_que_srv_port();
  int32_t que_srv_port() const;
  void set_que_srv_port(int32_t value);
  private:
  int32_t _internal_que_srv_port() const;
  void _internal_set_que_srv_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr que_srv_ip_;
  int64_t srv_uuid_;
  int64_t que_srv_id_;
  int res_;
  int32_t que_srv_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_CLISRV_HEARTBEAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT) */ {
 public:
  inline PB_MSG_INTER_CLISRV_HEARTBEAT() : PB_MSG_INTER_CLISRV_HEARTBEAT(nullptr) {}
  ~PB_MSG_INTER_CLISRV_HEARTBEAT() override;
  explicit constexpr PB_MSG_INTER_CLISRV_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_CLISRV_HEARTBEAT(const PB_MSG_INTER_CLISRV_HEARTBEAT& from);
  PB_MSG_INTER_CLISRV_HEARTBEAT(PB_MSG_INTER_CLISRV_HEARTBEAT&& from) noexcept
    : PB_MSG_INTER_CLISRV_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_CLISRV_HEARTBEAT& operator=(const PB_MSG_INTER_CLISRV_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_CLISRV_HEARTBEAT& operator=(PB_MSG_INTER_CLISRV_HEARTBEAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_CLISRV_HEARTBEAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_CLISRV_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_CLISRV_HEARTBEAT*>(
               &_PB_MSG_INTER_CLISRV_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PB_MSG_INTER_CLISRV_HEARTBEAT& a, PB_MSG_INTER_CLISRV_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_CLISRV_HEARTBEAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_CLISRV_HEARTBEAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_CLISRV_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_CLISRV_HEARTBEAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_CLISRV_HEARTBEAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_CLISRV_HEARTBEAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_CLISRV_HEARTBEAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT";
  }
  protected:
  explicit PB_MSG_INTER_CLISRV_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvUuidFieldNumber = 1,
  };
  // int64 srv_uuid = 1;
  void clear_srv_uuid();
  int64_t srv_uuid() const;
  void set_srv_uuid(int64_t value);
  private:
  int64_t _internal_srv_uuid() const;
  void _internal_set_srv_uuid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t srv_uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_CLISRV_HEARTBEAT_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES) */ {
 public:
  inline PB_MSG_INTER_CLISRV_HEARTBEAT_RES() : PB_MSG_INTER_CLISRV_HEARTBEAT_RES(nullptr) {}
  ~PB_MSG_INTER_CLISRV_HEARTBEAT_RES() override;
  explicit constexpr PB_MSG_INTER_CLISRV_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_CLISRV_HEARTBEAT_RES(const PB_MSG_INTER_CLISRV_HEARTBEAT_RES& from);
  PB_MSG_INTER_CLISRV_HEARTBEAT_RES(PB_MSG_INTER_CLISRV_HEARTBEAT_RES&& from) noexcept
    : PB_MSG_INTER_CLISRV_HEARTBEAT_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_CLISRV_HEARTBEAT_RES& operator=(const PB_MSG_INTER_CLISRV_HEARTBEAT_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_CLISRV_HEARTBEAT_RES& operator=(PB_MSG_INTER_CLISRV_HEARTBEAT_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_CLISRV_HEARTBEAT_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_CLISRV_HEARTBEAT_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_CLISRV_HEARTBEAT_RES*>(
               &_PB_MSG_INTER_CLISRV_HEARTBEAT_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PB_MSG_INTER_CLISRV_HEARTBEAT_RES& a, PB_MSG_INTER_CLISRV_HEARTBEAT_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_CLISRV_HEARTBEAT_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_CLISRV_HEARTBEAT_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_CLISRV_HEARTBEAT_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_CLISRV_HEARTBEAT_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_CLISRV_HEARTBEAT_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_CLISRV_HEARTBEAT_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_CLISRV_HEARTBEAT_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES";
  }
  protected:
  explicit PB_MSG_INTER_CLISRV_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvUuidFieldNumber = 1,
  };
  // int64 srv_uuid = 1;
  void clear_srv_uuid();
  int64_t srv_uuid() const;
  void set_srv_uuid(int64_t value);
  private:
  int64_t _internal_srv_uuid() const;
  void _internal_set_srv_uuid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t srv_uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_MSG final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_MSG) */ {
 public:
  inline PB_MSG_INTER_MSG() : PB_MSG_INTER_MSG(nullptr) {}
  ~PB_MSG_INTER_MSG() override;
  explicit constexpr PB_MSG_INTER_MSG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_MSG(const PB_MSG_INTER_MSG& from);
  PB_MSG_INTER_MSG(PB_MSG_INTER_MSG&& from) noexcept
    : PB_MSG_INTER_MSG() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_MSG& operator=(const PB_MSG_INTER_MSG& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_MSG& operator=(PB_MSG_INTER_MSG&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_MSG& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_MSG* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_MSG*>(
               &_PB_MSG_INTER_MSG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PB_MSG_INTER_MSG& a, PB_MSG_INTER_MSG& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_MSG* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_MSG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_MSG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_MSG>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_MSG& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_MSG& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_MSG* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_MSG";
  }
  protected:
  explicit PB_MSG_INTER_MSG(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBinFieldNumber = 5,
    kSrvUuidFromFieldNumber = 1,
    kSrvUuidToFieldNumber = 2,
    kSrvTypeFieldNumber = 3,
    kMsgTypeFieldNumber = 4,
    kMsgIdFieldNumber = 6,
    kMsgSeqFieldNumber = 7,
    kTimestampFieldNumber = 8,
    kTimestampArriveFieldNumber = 9,
    kTimeoutWaitFieldNumber = 10,
  };
  // bytes msg_bin = 5;
  void clear_msg_bin();
  const std::string& msg_bin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_bin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_bin();
  PROTOBUF_NODISCARD std::string* release_msg_bin();
  void set_allocated_msg_bin(std::string* msg_bin);
  private:
  const std::string& _internal_msg_bin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_bin(const std::string& value);
  std::string* _internal_mutable_msg_bin();
  public:

  // int64 srv_uuid_from = 1;
  void clear_srv_uuid_from();
  int64_t srv_uuid_from() const;
  void set_srv_uuid_from(int64_t value);
  private:
  int64_t _internal_srv_uuid_from() const;
  void _internal_set_srv_uuid_from(int64_t value);
  public:

  // int64 srv_uuid_to = 2;
  void clear_srv_uuid_to();
  int64_t srv_uuid_to() const;
  void set_srv_uuid_to(int64_t value);
  private:
  int64_t _internal_srv_uuid_to() const;
  void _internal_set_srv_uuid_to(int64_t value);
  public:

  // int32 srv_type = 3;
  void clear_srv_type();
  int32_t srv_type() const;
  void set_srv_type(int32_t value);
  private:
  int32_t _internal_srv_type() const;
  void _internal_set_srv_type(int32_t value);
  public:

  // int32 msg_type = 4;
  void clear_msg_type();
  int32_t msg_type() const;
  void set_msg_type(int32_t value);
  private:
  int32_t _internal_msg_type() const;
  void _internal_set_msg_type(int32_t value);
  public:

  // int64 msg_id = 6;
  void clear_msg_id();
  int64_t msg_id() const;
  void set_msg_id(int64_t value);
  private:
  int64_t _internal_msg_id() const;
  void _internal_set_msg_id(int64_t value);
  public:

  // int64 msg_seq = 7;
  void clear_msg_seq();
  int64_t msg_seq() const;
  void set_msg_seq(int64_t value);
  private:
  int64_t _internal_msg_seq() const;
  void _internal_set_msg_seq(int64_t value);
  public:

  // int64 timestamp = 8;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 timestamp_arrive = 9;
  void clear_timestamp_arrive();
  int64_t timestamp_arrive() const;
  void set_timestamp_arrive(int64_t value);
  private:
  int64_t _internal_timestamp_arrive() const;
  void _internal_set_timestamp_arrive(int64_t value);
  public:

  // int64 timeout_wait = 10;
  void clear_timeout_wait();
  int64_t timeout_wait() const;
  void set_timeout_wait(int64_t value);
  private:
  int64_t _internal_timeout_wait() const;
  void _internal_set_timeout_wait(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_MSG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_bin_;
  int64_t srv_uuid_from_;
  int64_t srv_uuid_to_;
  int32_t srv_type_;
  int32_t msg_type_;
  int64_t msg_id_;
  int64_t msg_seq_;
  int64_t timestamp_;
  int64_t timestamp_arrive_;
  int64_t timeout_wait_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_MSG_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_MSG_RES) */ {
 public:
  inline PB_MSG_INTER_MSG_RES() : PB_MSG_INTER_MSG_RES(nullptr) {}
  ~PB_MSG_INTER_MSG_RES() override;
  explicit constexpr PB_MSG_INTER_MSG_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_MSG_RES(const PB_MSG_INTER_MSG_RES& from);
  PB_MSG_INTER_MSG_RES(PB_MSG_INTER_MSG_RES&& from) noexcept
    : PB_MSG_INTER_MSG_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_MSG_RES& operator=(const PB_MSG_INTER_MSG_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_MSG_RES& operator=(PB_MSG_INTER_MSG_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_MSG_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_MSG_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_MSG_RES*>(
               &_PB_MSG_INTER_MSG_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PB_MSG_INTER_MSG_RES& a, PB_MSG_INTER_MSG_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_MSG_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_MSG_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_MSG_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_MSG_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_MSG_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_MSG_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_MSG_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_MSG_RES";
  }
  protected:
  explicit PB_MSG_INTER_MSG_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBinFieldNumber = 5,
    kSrvUuidFromFieldNumber = 1,
    kSrvUuidToFieldNumber = 2,
    kSrvTypeFieldNumber = 3,
    kMsgTypeFieldNumber = 4,
    kMsgIdFieldNumber = 6,
    kMsgSeqFieldNumber = 7,
    kTimestampFieldNumber = 8,
    kTimestampArriveFieldNumber = 9,
    kTimeoutWaitFieldNumber = 10,
    kResFieldNumber = 11,
  };
  // bytes msg_bin = 5;
  void clear_msg_bin();
  const std::string& msg_bin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_bin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_bin();
  PROTOBUF_NODISCARD std::string* release_msg_bin();
  void set_allocated_msg_bin(std::string* msg_bin);
  private:
  const std::string& _internal_msg_bin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_bin(const std::string& value);
  std::string* _internal_mutable_msg_bin();
  public:

  // int64 srv_uuid_from = 1;
  void clear_srv_uuid_from();
  int64_t srv_uuid_from() const;
  void set_srv_uuid_from(int64_t value);
  private:
  int64_t _internal_srv_uuid_from() const;
  void _internal_set_srv_uuid_from(int64_t value);
  public:

  // int64 srv_uuid_to = 2;
  void clear_srv_uuid_to();
  int64_t srv_uuid_to() const;
  void set_srv_uuid_to(int64_t value);
  private:
  int64_t _internal_srv_uuid_to() const;
  void _internal_set_srv_uuid_to(int64_t value);
  public:

  // int32 srv_type = 3;
  void clear_srv_type();
  int32_t srv_type() const;
  void set_srv_type(int32_t value);
  private:
  int32_t _internal_srv_type() const;
  void _internal_set_srv_type(int32_t value);
  public:

  // int32 msg_type = 4;
  void clear_msg_type();
  int32_t msg_type() const;
  void set_msg_type(int32_t value);
  private:
  int32_t _internal_msg_type() const;
  void _internal_set_msg_type(int32_t value);
  public:

  // int64 msg_id = 6;
  void clear_msg_id();
  int64_t msg_id() const;
  void set_msg_id(int64_t value);
  private:
  int64_t _internal_msg_id() const;
  void _internal_set_msg_id(int64_t value);
  public:

  // int64 msg_seq = 7;
  void clear_msg_seq();
  int64_t msg_seq() const;
  void set_msg_seq(int64_t value);
  private:
  int64_t _internal_msg_seq() const;
  void _internal_set_msg_seq(int64_t value);
  public:

  // int64 timestamp = 8;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 timestamp_arrive = 9;
  void clear_timestamp_arrive();
  int64_t timestamp_arrive() const;
  void set_timestamp_arrive(int64_t value);
  private:
  int64_t _internal_timestamp_arrive() const;
  void _internal_set_timestamp_arrive(int64_t value);
  public:

  // int64 timeout_wait = 10;
  void clear_timeout_wait();
  int64_t timeout_wait() const;
  void set_timeout_wait(int64_t value);
  private:
  int64_t _internal_timeout_wait() const;
  void _internal_set_timeout_wait(int64_t value);
  public:

  // .msgpacket.PB_RESPONSE_CODE res = 11;
  void clear_res();
  ::msgpacket::PB_RESPONSE_CODE res() const;
  void set_res(::msgpacket::PB_RESPONSE_CODE value);
  private:
  ::msgpacket::PB_RESPONSE_CODE _internal_res() const;
  void _internal_set_res(::msgpacket::PB_RESPONSE_CODE value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_MSG_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_bin_;
  int64_t srv_uuid_from_;
  int64_t srv_uuid_to_;
  int32_t srv_type_;
  int32_t msg_type_;
  int64_t msg_id_;
  int64_t msg_seq_;
  int64_t timestamp_;
  int64_t timestamp_arrive_;
  int64_t timeout_wait_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_CLISRV_REG_TO_QUE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE) */ {
 public:
  inline PB_MSG_INTER_CLISRV_REG_TO_QUE() : PB_MSG_INTER_CLISRV_REG_TO_QUE(nullptr) {}
  ~PB_MSG_INTER_CLISRV_REG_TO_QUE() override;
  explicit constexpr PB_MSG_INTER_CLISRV_REG_TO_QUE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_CLISRV_REG_TO_QUE(const PB_MSG_INTER_CLISRV_REG_TO_QUE& from);
  PB_MSG_INTER_CLISRV_REG_TO_QUE(PB_MSG_INTER_CLISRV_REG_TO_QUE&& from) noexcept
    : PB_MSG_INTER_CLISRV_REG_TO_QUE() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_CLISRV_REG_TO_QUE& operator=(const PB_MSG_INTER_CLISRV_REG_TO_QUE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_CLISRV_REG_TO_QUE& operator=(PB_MSG_INTER_CLISRV_REG_TO_QUE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_CLISRV_REG_TO_QUE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_CLISRV_REG_TO_QUE* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_CLISRV_REG_TO_QUE*>(
               &_PB_MSG_INTER_CLISRV_REG_TO_QUE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PB_MSG_INTER_CLISRV_REG_TO_QUE& a, PB_MSG_INTER_CLISRV_REG_TO_QUE& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_CLISRV_REG_TO_QUE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_CLISRV_REG_TO_QUE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_CLISRV_REG_TO_QUE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_CLISRV_REG_TO_QUE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_CLISRV_REG_TO_QUE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_CLISRV_REG_TO_QUE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_CLISRV_REG_TO_QUE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE";
  }
  protected:
  explicit PB_MSG_INTER_CLISRV_REG_TO_QUE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvUuidFieldNumber = 1,
    kSrvTypeFieldNumber = 2,
  };
  // int64 srv_uuid = 1;
  void clear_srv_uuid();
  int64_t srv_uuid() const;
  void set_srv_uuid(int64_t value);
  private:
  int64_t _internal_srv_uuid() const;
  void _internal_set_srv_uuid(int64_t value);
  public:

  // int32 srv_type = 2;
  void clear_srv_type();
  int32_t srv_type() const;
  void set_srv_type(int32_t value);
  private:
  int32_t _internal_srv_type() const;
  void _internal_set_srv_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t srv_uuid_;
  int32_t srv_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_CLISRV_REG_TO_QUE_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES) */ {
 public:
  inline PB_MSG_INTER_CLISRV_REG_TO_QUE_RES() : PB_MSG_INTER_CLISRV_REG_TO_QUE_RES(nullptr) {}
  ~PB_MSG_INTER_CLISRV_REG_TO_QUE_RES() override;
  explicit constexpr PB_MSG_INTER_CLISRV_REG_TO_QUE_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_CLISRV_REG_TO_QUE_RES(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& from);
  PB_MSG_INTER_CLISRV_REG_TO_QUE_RES(PB_MSG_INTER_CLISRV_REG_TO_QUE_RES&& from) noexcept
    : PB_MSG_INTER_CLISRV_REG_TO_QUE_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& operator=(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& operator=(PB_MSG_INTER_CLISRV_REG_TO_QUE_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES*>(
               &_PB_MSG_INTER_CLISRV_REG_TO_QUE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& a, PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_CLISRV_REG_TO_QUE_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES";
  }
  protected:
  explicit PB_MSG_INTER_CLISRV_REG_TO_QUE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllSrvFieldNumber = 3,
    kLocalAllSrvFieldNumber = 4,
    kSrvUuidFieldNumber = 1,
    kSrvTypeFieldNumber = 2,
  };
  // .msgpacket.PB_SRV_INFO_ALL all_srv = 3;
  bool has_all_srv() const;
  private:
  bool _internal_has_all_srv() const;
  public:
  void clear_all_srv();
  const ::msgpacket::PB_SRV_INFO_ALL& all_srv() const;
  PROTOBUF_NODISCARD ::msgpacket::PB_SRV_INFO_ALL* release_all_srv();
  ::msgpacket::PB_SRV_INFO_ALL* mutable_all_srv();
  void set_allocated_all_srv(::msgpacket::PB_SRV_INFO_ALL* all_srv);
  private:
  const ::msgpacket::PB_SRV_INFO_ALL& _internal_all_srv() const;
  ::msgpacket::PB_SRV_INFO_ALL* _internal_mutable_all_srv();
  public:
  void unsafe_arena_set_allocated_all_srv(
      ::msgpacket::PB_SRV_INFO_ALL* all_srv);
  ::msgpacket::PB_SRV_INFO_ALL* unsafe_arena_release_all_srv();

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 4;
  bool has_local_all_srv() const;
  private:
  bool _internal_has_local_all_srv() const;
  public:
  void clear_local_all_srv();
  const ::msgpacket::PB_SRV_INFO_ALL& local_all_srv() const;
  PROTOBUF_NODISCARD ::msgpacket::PB_SRV_INFO_ALL* release_local_all_srv();
  ::msgpacket::PB_SRV_INFO_ALL* mutable_local_all_srv();
  void set_allocated_local_all_srv(::msgpacket::PB_SRV_INFO_ALL* local_all_srv);
  private:
  const ::msgpacket::PB_SRV_INFO_ALL& _internal_local_all_srv() const;
  ::msgpacket::PB_SRV_INFO_ALL* _internal_mutable_local_all_srv();
  public:
  void unsafe_arena_set_allocated_local_all_srv(
      ::msgpacket::PB_SRV_INFO_ALL* local_all_srv);
  ::msgpacket::PB_SRV_INFO_ALL* unsafe_arena_release_local_all_srv();

  // int64 srv_uuid = 1;
  void clear_srv_uuid();
  int64_t srv_uuid() const;
  void set_srv_uuid(int64_t value);
  private:
  int64_t _internal_srv_uuid() const;
  void _internal_set_srv_uuid(int64_t value);
  public:

  // int32 srv_type = 2;
  void clear_srv_type();
  int32_t srv_type() const;
  void set_srv_type(int32_t value);
  private:
  int32_t _internal_srv_type() const;
  void _internal_set_srv_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::PB_SRV_INFO_ALL* all_srv_;
  ::msgpacket::PB_SRV_INFO_ALL* local_all_srv_;
  int64_t srv_uuid_;
  int32_t srv_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUESRV_REPORT_BROADCAST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST) */ {
 public:
  inline PB_MSG_INTER_QUESRV_REPORT_BROADCAST() : PB_MSG_INTER_QUESRV_REPORT_BROADCAST(nullptr) {}
  ~PB_MSG_INTER_QUESRV_REPORT_BROADCAST() override;
  explicit constexpr PB_MSG_INTER_QUESRV_REPORT_BROADCAST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUESRV_REPORT_BROADCAST(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST& from);
  PB_MSG_INTER_QUESRV_REPORT_BROADCAST(PB_MSG_INTER_QUESRV_REPORT_BROADCAST&& from) noexcept
    : PB_MSG_INTER_QUESRV_REPORT_BROADCAST() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUESRV_REPORT_BROADCAST& operator=(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUESRV_REPORT_BROADCAST& operator=(PB_MSG_INTER_QUESRV_REPORT_BROADCAST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUESRV_REPORT_BROADCAST& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUESRV_REPORT_BROADCAST* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUESRV_REPORT_BROADCAST*>(
               &_PB_MSG_INTER_QUESRV_REPORT_BROADCAST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PB_MSG_INTER_QUESRV_REPORT_BROADCAST& a, PB_MSG_INTER_QUESRV_REPORT_BROADCAST& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUESRV_REPORT_BROADCAST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUESRV_REPORT_BROADCAST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUESRV_REPORT_BROADCAST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUESRV_REPORT_BROADCAST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUESRV_REPORT_BROADCAST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST";
  }
  protected:
  explicit PB_MSG_INTER_QUESRV_REPORT_BROADCAST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAllSrvFieldNumber = 2,
    kAllSrvFieldNumber = 3,
    kQueSrvIdFieldNumber = 1,
  };
  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
  bool has_local_all_srv() const;
  private:
  bool _internal_has_local_all_srv() const;
  public:
  void clear_local_all_srv();
  const ::msgpacket::PB_SRV_INFO_ALL& local_all_srv() const;
  PROTOBUF_NODISCARD ::msgpacket::PB_SRV_INFO_ALL* release_local_all_srv();
  ::msgpacket::PB_SRV_INFO_ALL* mutable_local_all_srv();
  void set_allocated_local_all_srv(::msgpacket::PB_SRV_INFO_ALL* local_all_srv);
  private:
  const ::msgpacket::PB_SRV_INFO_ALL& _internal_local_all_srv() const;
  ::msgpacket::PB_SRV_INFO_ALL* _internal_mutable_local_all_srv();
  public:
  void unsafe_arena_set_allocated_local_all_srv(
      ::msgpacket::PB_SRV_INFO_ALL* local_all_srv);
  ::msgpacket::PB_SRV_INFO_ALL* unsafe_arena_release_local_all_srv();

  // .msgpacket.PB_SRV_INFO_ALL all_srv = 3;
  bool has_all_srv() const;
  private:
  bool _internal_has_all_srv() const;
  public:
  void clear_all_srv();
  const ::msgpacket::PB_SRV_INFO_ALL& all_srv() const;
  PROTOBUF_NODISCARD ::msgpacket::PB_SRV_INFO_ALL* release_all_srv();
  ::msgpacket::PB_SRV_INFO_ALL* mutable_all_srv();
  void set_allocated_all_srv(::msgpacket::PB_SRV_INFO_ALL* all_srv);
  private:
  const ::msgpacket::PB_SRV_INFO_ALL& _internal_all_srv() const;
  ::msgpacket::PB_SRV_INFO_ALL* _internal_mutable_all_srv();
  public:
  void unsafe_arena_set_allocated_all_srv(
      ::msgpacket::PB_SRV_INFO_ALL* all_srv);
  ::msgpacket::PB_SRV_INFO_ALL* unsafe_arena_release_all_srv();

  // int64 que_srv_id = 1;
  void clear_que_srv_id();
  int64_t que_srv_id() const;
  void set_que_srv_id(int64_t value);
  private:
  int64_t _internal_que_srv_id() const;
  void _internal_set_que_srv_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::PB_SRV_INFO_ALL* local_all_srv_;
  ::msgpacket::PB_SRV_INFO_ALL* all_srv_;
  int64_t que_srv_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUESRV_NTF_online_offline_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf) */ {
 public:
  inline PB_MSG_INTER_QUESRV_NTF_online_offline_ntf() : PB_MSG_INTER_QUESRV_NTF_online_offline_ntf(nullptr) {}
  ~PB_MSG_INTER_QUESRV_NTF_online_offline_ntf() override;
  explicit constexpr PB_MSG_INTER_QUESRV_NTF_online_offline_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUESRV_NTF_online_offline_ntf(const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& from);
  PB_MSG_INTER_QUESRV_NTF_online_offline_ntf(PB_MSG_INTER_QUESRV_NTF_online_offline_ntf&& from) noexcept
    : PB_MSG_INTER_QUESRV_NTF_online_offline_ntf() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& operator=(const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& operator=(PB_MSG_INTER_QUESRV_NTF_online_offline_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf*>(
               &_PB_MSG_INTER_QUESRV_NTF_online_offline_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& a, PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUESRV_NTF_online_offline_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf";
  }
  protected:
  explicit PB_MSG_INTER_QUESRV_NTF_online_offline_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvUuidFieldNumber = 1,
    kSrvTypeFieldNumber = 2,
    kIsOnLineFieldNumber = 3,
  };
  // int64 srv_uuid = 1;
  void clear_srv_uuid();
  int64_t srv_uuid() const;
  void set_srv_uuid(int64_t value);
  private:
  int64_t _internal_srv_uuid() const;
  void _internal_set_srv_uuid(int64_t value);
  public:

  // int32 srv_type = 2;
  void clear_srv_type();
  int32_t srv_type() const;
  void set_srv_type(int32_t value);
  private:
  int32_t _internal_srv_type() const;
  void _internal_set_srv_type(int32_t value);
  public:

  // bool is_on_line = 3;
  void clear_is_on_line();
  bool is_on_line() const;
  void set_is_on_line(bool value);
  private:
  bool _internal_is_on_line() const;
  void _internal_set_is_on_line(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t srv_uuid_;
  int32_t srv_type_;
  bool is_on_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUESRV_NTF final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUESRV_NTF) */ {
 public:
  inline PB_MSG_INTER_QUESRV_NTF() : PB_MSG_INTER_QUESRV_NTF(nullptr) {}
  ~PB_MSG_INTER_QUESRV_NTF() override;
  explicit constexpr PB_MSG_INTER_QUESRV_NTF(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUESRV_NTF(const PB_MSG_INTER_QUESRV_NTF& from);
  PB_MSG_INTER_QUESRV_NTF(PB_MSG_INTER_QUESRV_NTF&& from) noexcept
    : PB_MSG_INTER_QUESRV_NTF() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUESRV_NTF& operator=(const PB_MSG_INTER_QUESRV_NTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUESRV_NTF& operator=(PB_MSG_INTER_QUESRV_NTF&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUESRV_NTF& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUESRV_NTF* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUESRV_NTF*>(
               &_PB_MSG_INTER_QUESRV_NTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PB_MSG_INTER_QUESRV_NTF& a, PB_MSG_INTER_QUESRV_NTF& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUESRV_NTF* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUESRV_NTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUESRV_NTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUESRV_NTF>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUESRV_NTF& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUESRV_NTF& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUESRV_NTF* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUESRV_NTF";
  }
  protected:
  explicit PB_MSG_INTER_QUESRV_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PB_MSG_INTER_QUESRV_NTF_online_offline_ntf online_offline_ntf;

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineOfflineFieldNumber = 1,
  };
  // optional .msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf online_offline = 1;
  bool has_online_offline() const;
  private:
  bool _internal_has_online_offline() const;
  public:
  void clear_online_offline();
  const ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& online_offline() const;
  PROTOBUF_NODISCARD ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* release_online_offline();
  ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* mutable_online_offline();
  void set_allocated_online_offline(::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* online_offline);
  private:
  const ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& _internal_online_offline() const;
  ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* _internal_mutable_online_offline();
  public:
  void unsafe_arena_set_allocated_online_offline(
      ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* online_offline);
  ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* unsafe_arena_release_online_offline();

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUESRV_NTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* online_offline_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUESRV_GET_SRVTYPE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE) */ {
 public:
  inline PB_MSG_INTER_QUESRV_GET_SRVTYPE() : PB_MSG_INTER_QUESRV_GET_SRVTYPE(nullptr) {}
  ~PB_MSG_INTER_QUESRV_GET_SRVTYPE() override;
  explicit constexpr PB_MSG_INTER_QUESRV_GET_SRVTYPE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUESRV_GET_SRVTYPE(const PB_MSG_INTER_QUESRV_GET_SRVTYPE& from);
  PB_MSG_INTER_QUESRV_GET_SRVTYPE(PB_MSG_INTER_QUESRV_GET_SRVTYPE&& from) noexcept
    : PB_MSG_INTER_QUESRV_GET_SRVTYPE() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUESRV_GET_SRVTYPE& operator=(const PB_MSG_INTER_QUESRV_GET_SRVTYPE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUESRV_GET_SRVTYPE& operator=(PB_MSG_INTER_QUESRV_GET_SRVTYPE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUESRV_GET_SRVTYPE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUESRV_GET_SRVTYPE* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUESRV_GET_SRVTYPE*>(
               &_PB_MSG_INTER_QUESRV_GET_SRVTYPE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PB_MSG_INTER_QUESRV_GET_SRVTYPE& a, PB_MSG_INTER_QUESRV_GET_SRVTYPE& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUESRV_GET_SRVTYPE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUESRV_GET_SRVTYPE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUESRV_GET_SRVTYPE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUESRV_GET_SRVTYPE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUESRV_GET_SRVTYPE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUESRV_GET_SRVTYPE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUESRV_GET_SRVTYPE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE";
  }
  protected:
  explicit PB_MSG_INTER_QUESRV_GET_SRVTYPE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvTypeFieldNumber = 1,
  };
  // int32 srv_type = 1;
  void clear_srv_type();
  int32_t srv_type() const;
  void set_srv_type(int32_t value);
  private:
  int32_t _internal_srv_type() const;
  void _internal_set_srv_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t srv_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES) */ {
 public:
  inline PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES() : PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES(nullptr) {}
  ~PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES() override;
  explicit constexpr PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES(const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& from);
  PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES(PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES&& from) noexcept
    : PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& operator=(const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& operator=(PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES*>(
               &_PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& a, PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES";
  }
  protected:
  explicit PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrarySrvFieldNumber = 2,
    kSrvTypeFieldNumber = 1,
  };
  // repeated .msgpacket.PB_SRV_INFO_ONE arrary_srv = 2;
  int arrary_srv_size() const;
  private:
  int _internal_arrary_srv_size() const;
  public:
  void clear_arrary_srv();
  ::msgpacket::PB_SRV_INFO_ONE* mutable_arrary_srv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_SRV_INFO_ONE >*
      mutable_arrary_srv();
  private:
  const ::msgpacket::PB_SRV_INFO_ONE& _internal_arrary_srv(int index) const;
  ::msgpacket::PB_SRV_INFO_ONE* _internal_add_arrary_srv();
  public:
  const ::msgpacket::PB_SRV_INFO_ONE& arrary_srv(int index) const;
  ::msgpacket::PB_SRV_INFO_ONE* add_arrary_srv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_SRV_INFO_ONE >&
      arrary_srv() const;

  // int32 srv_type = 1;
  void clear_srv_type();
  int32_t srv_type() const;
  void set_srv_type(int32_t value);
  private:
  int32_t _internal_srv_type() const;
  void _internal_set_srv_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_SRV_INFO_ONE > arrary_srv_;
  int32_t srv_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_CENTERSRV_GAMESRV_GETINFO final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO) */ {
 public:
  inline PB_MSG_CENTERSRV_GAMESRV_GETINFO() : PB_MSG_CENTERSRV_GAMESRV_GETINFO(nullptr) {}
  explicit constexpr PB_MSG_CENTERSRV_GAMESRV_GETINFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_CENTERSRV_GAMESRV_GETINFO(const PB_MSG_CENTERSRV_GAMESRV_GETINFO& from);
  PB_MSG_CENTERSRV_GAMESRV_GETINFO(PB_MSG_CENTERSRV_GAMESRV_GETINFO&& from) noexcept
    : PB_MSG_CENTERSRV_GAMESRV_GETINFO() {
    *this = ::std::move(from);
  }

  inline PB_MSG_CENTERSRV_GAMESRV_GETINFO& operator=(const PB_MSG_CENTERSRV_GAMESRV_GETINFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_CENTERSRV_GAMESRV_GETINFO& operator=(PB_MSG_CENTERSRV_GAMESRV_GETINFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_CENTERSRV_GAMESRV_GETINFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_CENTERSRV_GAMESRV_GETINFO* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_CENTERSRV_GAMESRV_GETINFO*>(
               &_PB_MSG_CENTERSRV_GAMESRV_GETINFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PB_MSG_CENTERSRV_GAMESRV_GETINFO& a, PB_MSG_CENTERSRV_GAMESRV_GETINFO& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_CENTERSRV_GAMESRV_GETINFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_CENTERSRV_GAMESRV_GETINFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_CENTERSRV_GAMESRV_GETINFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_CENTERSRV_GAMESRV_GETINFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PB_MSG_CENTERSRV_GAMESRV_GETINFO& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PB_MSG_CENTERSRV_GAMESRV_GETINFO& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO";
  }
  protected:
  explicit PB_MSG_CENTERSRV_GAMESRV_GETINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES) */ {
 public:
  inline PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES() : PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES(nullptr) {}
  ~PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES() override;
  explicit constexpr PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES(const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& from);
  PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES(PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES&& from) noexcept
    : PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& operator=(const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& operator=(PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES*>(
               &_PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& a, PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES";
  }
  protected:
  explicit PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutIpFieldNumber = 1,
    kOutPortFieldNumber = 2,
  };
  // string out_ip = 1;
  void clear_out_ip();
  const std::string& out_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_out_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_out_ip();
  PROTOBUF_NODISCARD std::string* release_out_ip();
  void set_allocated_out_ip(std::string* out_ip);
  private:
  const std::string& _internal_out_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_out_ip(const std::string& value);
  std::string* _internal_mutable_out_ip();
  public:

  // int32 out_port = 2;
  void clear_out_port();
  int32_t out_port() const;
  void set_out_port(int32_t value);
  private:
  int32_t _internal_out_port() const;
  void _internal_set_out_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_ip_;
  int32_t out_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_LOGON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_LOGON) */ {
 public:
  inline PB_MSG_LOGON() : PB_MSG_LOGON(nullptr) {}
  ~PB_MSG_LOGON() override;
  explicit constexpr PB_MSG_LOGON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_LOGON(const PB_MSG_LOGON& from);
  PB_MSG_LOGON(PB_MSG_LOGON&& from) noexcept
    : PB_MSG_LOGON() {
    *this = ::std::move(from);
  }

  inline PB_MSG_LOGON& operator=(const PB_MSG_LOGON& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_LOGON& operator=(PB_MSG_LOGON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_LOGON& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_LOGON* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_LOGON*>(
               &_PB_MSG_LOGON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PB_MSG_LOGON& a, PB_MSG_LOGON& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_LOGON* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_LOGON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_LOGON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_LOGON>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_LOGON& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_LOGON& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_LOGON* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_LOGON";
  }
  protected:
  explicit PB_MSG_LOGON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // int64 client_id = 1;
  void clear_client_id();
  int64_t client_id() const;
  void set_client_id(int64_t value);
  private:
  int64_t _internal_client_id() const;
  void _internal_set_client_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_LOGON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_LOGON_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_LOGON_RES) */ {
 public:
  inline PB_MSG_LOGON_RES() : PB_MSG_LOGON_RES(nullptr) {}
  ~PB_MSG_LOGON_RES() override;
  explicit constexpr PB_MSG_LOGON_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_LOGON_RES(const PB_MSG_LOGON_RES& from);
  PB_MSG_LOGON_RES(PB_MSG_LOGON_RES&& from) noexcept
    : PB_MSG_LOGON_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_LOGON_RES& operator=(const PB_MSG_LOGON_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_LOGON_RES& operator=(PB_MSG_LOGON_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_LOGON_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_LOGON_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_LOGON_RES*>(
               &_PB_MSG_LOGON_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PB_MSG_LOGON_RES& a, PB_MSG_LOGON_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_LOGON_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_LOGON_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_LOGON_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_LOGON_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_LOGON_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_LOGON_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_LOGON_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_LOGON_RES";
  }
  protected:
  explicit PB_MSG_LOGON_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kClientIdFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int64 client_id = 1;
  void clear_client_id();
  int64_t client_id() const;
  void set_client_id(int64_t value);
  private:
  int64_t _internal_client_id() const;
  void _internal_set_client_id(int64_t value);
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_LOGON_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int64_t client_id_;
  int32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_LOGONSRV_CENTERSRV_LOGON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON) */ {
 public:
  inline PB_MSG_LOGONSRV_CENTERSRV_LOGON() : PB_MSG_LOGONSRV_CENTERSRV_LOGON(nullptr) {}
  ~PB_MSG_LOGONSRV_CENTERSRV_LOGON() override;
  explicit constexpr PB_MSG_LOGONSRV_CENTERSRV_LOGON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_LOGONSRV_CENTERSRV_LOGON(const PB_MSG_LOGONSRV_CENTERSRV_LOGON& from);
  PB_MSG_LOGONSRV_CENTERSRV_LOGON(PB_MSG_LOGONSRV_CENTERSRV_LOGON&& from) noexcept
    : PB_MSG_LOGONSRV_CENTERSRV_LOGON() {
    *this = ::std::move(from);
  }

  inline PB_MSG_LOGONSRV_CENTERSRV_LOGON& operator=(const PB_MSG_LOGONSRV_CENTERSRV_LOGON& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_LOGONSRV_CENTERSRV_LOGON& operator=(PB_MSG_LOGONSRV_CENTERSRV_LOGON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_LOGONSRV_CENTERSRV_LOGON& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_LOGONSRV_CENTERSRV_LOGON* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_LOGONSRV_CENTERSRV_LOGON*>(
               &_PB_MSG_LOGONSRV_CENTERSRV_LOGON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PB_MSG_LOGONSRV_CENTERSRV_LOGON& a, PB_MSG_LOGONSRV_CENTERSRV_LOGON& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_LOGONSRV_CENTERSRV_LOGON* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_LOGONSRV_CENTERSRV_LOGON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_LOGONSRV_CENTERSRV_LOGON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_LOGONSRV_CENTERSRV_LOGON>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_LOGONSRV_CENTERSRV_LOGON& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_LOGONSRV_CENTERSRV_LOGON& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_LOGONSRV_CENTERSRV_LOGON* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON";
  }
  protected:
  explicit PB_MSG_LOGONSRV_CENTERSRV_LOGON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // int64 client_id = 1;
  void clear_client_id();
  int64_t client_id() const;
  void set_client_id(int64_t value);
  private:
  int64_t _internal_client_id() const;
  void _internal_set_client_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES) */ {
 public:
  inline PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES() : PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES(nullptr) {}
  ~PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES() override;
  explicit constexpr PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES(const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& from);
  PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES(PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES&& from) noexcept
    : PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& operator=(const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& operator=(PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES*>(
               &_PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& a, PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES";
  }
  protected:
  explicit PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kClientIdFieldNumber = 1,
    kGameSrvUuidFieldNumber = 2,
    kPortFieldNumber = 4,
  };
  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int64 client_id = 1;
  void clear_client_id();
  int64_t client_id() const;
  void set_client_id(int64_t value);
  private:
  int64_t _internal_client_id() const;
  void _internal_set_client_id(int64_t value);
  public:

  // int64 game_srv_uuid = 2;
  void clear_game_srv_uuid();
  int64_t game_srv_uuid() const;
  void set_game_srv_uuid(int64_t value);
  private:
  int64_t _internal_game_srv_uuid() const;
  void _internal_set_game_srv_uuid(int64_t value);
  public:

  // int32 port = 4;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int64_t client_id_;
  int64_t game_srv_uuid_;
  int32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_DBSERVER_READ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_DBSERVER_READ) */ {
 public:
  inline PB_MSG_DBSERVER_READ() : PB_MSG_DBSERVER_READ(nullptr) {}
  ~PB_MSG_DBSERVER_READ() override;
  explicit constexpr PB_MSG_DBSERVER_READ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_DBSERVER_READ(const PB_MSG_DBSERVER_READ& from);
  PB_MSG_DBSERVER_READ(PB_MSG_DBSERVER_READ&& from) noexcept
    : PB_MSG_DBSERVER_READ() {
    *this = ::std::move(from);
  }

  inline PB_MSG_DBSERVER_READ& operator=(const PB_MSG_DBSERVER_READ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_DBSERVER_READ& operator=(PB_MSG_DBSERVER_READ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_DBSERVER_READ& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_DBSERVER_READ* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_DBSERVER_READ*>(
               &_PB_MSG_DBSERVER_READ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PB_MSG_DBSERVER_READ& a, PB_MSG_DBSERVER_READ& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_DBSERVER_READ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_DBSERVER_READ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_DBSERVER_READ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_DBSERVER_READ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_DBSERVER_READ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_DBSERVER_READ& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_DBSERVER_READ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_DBSERVER_READ";
  }
  protected:
  explicit PB_MSG_DBSERVER_READ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseAppNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
    kKeyFieldNumber = 3,
  };
  // string database_app_name = 1;
  void clear_database_app_name();
  const std::string& database_app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_app_name();
  PROTOBUF_NODISCARD std::string* release_database_app_name();
  void set_allocated_database_app_name(std::string* database_app_name);
  private:
  const std::string& _internal_database_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_app_name(const std::string& value);
  std::string* _internal_mutable_database_app_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_DBSERVER_READ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_DBSERVER_READ_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_DBSERVER_READ_RES) */ {
 public:
  inline PB_MSG_DBSERVER_READ_RES() : PB_MSG_DBSERVER_READ_RES(nullptr) {}
  ~PB_MSG_DBSERVER_READ_RES() override;
  explicit constexpr PB_MSG_DBSERVER_READ_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_DBSERVER_READ_RES(const PB_MSG_DBSERVER_READ_RES& from);
  PB_MSG_DBSERVER_READ_RES(PB_MSG_DBSERVER_READ_RES&& from) noexcept
    : PB_MSG_DBSERVER_READ_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_DBSERVER_READ_RES& operator=(const PB_MSG_DBSERVER_READ_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_DBSERVER_READ_RES& operator=(PB_MSG_DBSERVER_READ_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_DBSERVER_READ_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_DBSERVER_READ_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_DBSERVER_READ_RES*>(
               &_PB_MSG_DBSERVER_READ_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PB_MSG_DBSERVER_READ_RES& a, PB_MSG_DBSERVER_READ_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_DBSERVER_READ_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_DBSERVER_READ_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_DBSERVER_READ_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_DBSERVER_READ_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_DBSERVER_READ_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_DBSERVER_READ_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_DBSERVER_READ_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_DBSERVER_READ_RES";
  }
  protected:
  explicit PB_MSG_DBSERVER_READ_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 3,
    kDatabaseAppNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
  };
  // repeated bytes record = 3;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  const std::string& record(int index) const;
  std::string* mutable_record(int index);
  void set_record(int index, const std::string& value);
  void set_record(int index, std::string&& value);
  void set_record(int index, const char* value);
  void set_record(int index, const void* value, size_t size);
  std::string* add_record();
  void add_record(const std::string& value);
  void add_record(std::string&& value);
  void add_record(const char* value);
  void add_record(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& record() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_record();
  private:
  const std::string& _internal_record(int index) const;
  std::string* _internal_add_record();
  public:

  // string database_app_name = 1;
  void clear_database_app_name();
  const std::string& database_app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_app_name();
  PROTOBUF_NODISCARD std::string* release_database_app_name();
  void set_allocated_database_app_name(std::string* database_app_name);
  private:
  const std::string& _internal_database_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_app_name(const std::string& value);
  std::string* _internal_mutable_database_app_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_DBSERVER_READ_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> record_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_DBSERVER_WRITE_WRITE_RECORD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD) */ {
 public:
  inline PB_MSG_DBSERVER_WRITE_WRITE_RECORD() : PB_MSG_DBSERVER_WRITE_WRITE_RECORD(nullptr) {}
  ~PB_MSG_DBSERVER_WRITE_WRITE_RECORD() override;
  explicit constexpr PB_MSG_DBSERVER_WRITE_WRITE_RECORD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_DBSERVER_WRITE_WRITE_RECORD(const PB_MSG_DBSERVER_WRITE_WRITE_RECORD& from);
  PB_MSG_DBSERVER_WRITE_WRITE_RECORD(PB_MSG_DBSERVER_WRITE_WRITE_RECORD&& from) noexcept
    : PB_MSG_DBSERVER_WRITE_WRITE_RECORD() {
    *this = ::std::move(from);
  }

  inline PB_MSG_DBSERVER_WRITE_WRITE_RECORD& operator=(const PB_MSG_DBSERVER_WRITE_WRITE_RECORD& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_DBSERVER_WRITE_WRITE_RECORD& operator=(PB_MSG_DBSERVER_WRITE_WRITE_RECORD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_DBSERVER_WRITE_WRITE_RECORD& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_DBSERVER_WRITE_WRITE_RECORD* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_DBSERVER_WRITE_WRITE_RECORD*>(
               &_PB_MSG_DBSERVER_WRITE_WRITE_RECORD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PB_MSG_DBSERVER_WRITE_WRITE_RECORD& a, PB_MSG_DBSERVER_WRITE_WRITE_RECORD& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_DBSERVER_WRITE_WRITE_RECORD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_DBSERVER_WRITE_WRITE_RECORD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_DBSERVER_WRITE_WRITE_RECORD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_DBSERVER_WRITE_WRITE_RECORD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_DBSERVER_WRITE_WRITE_RECORD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_DBSERVER_WRITE_WRITE_RECORD& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_DBSERVER_WRITE_WRITE_RECORD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD";
  }
  protected:
  explicit PB_MSG_DBSERVER_WRITE_WRITE_RECORD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kRecordFieldNumber = 4,
  };
  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes record = 4;
  void clear_record();
  const std::string& record() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record();
  PROTOBUF_NODISCARD std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_DBSERVER_WRITE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_DBSERVER_WRITE) */ {
 public:
  inline PB_MSG_DBSERVER_WRITE() : PB_MSG_DBSERVER_WRITE(nullptr) {}
  ~PB_MSG_DBSERVER_WRITE() override;
  explicit constexpr PB_MSG_DBSERVER_WRITE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_DBSERVER_WRITE(const PB_MSG_DBSERVER_WRITE& from);
  PB_MSG_DBSERVER_WRITE(PB_MSG_DBSERVER_WRITE&& from) noexcept
    : PB_MSG_DBSERVER_WRITE() {
    *this = ::std::move(from);
  }

  inline PB_MSG_DBSERVER_WRITE& operator=(const PB_MSG_DBSERVER_WRITE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_DBSERVER_WRITE& operator=(PB_MSG_DBSERVER_WRITE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_DBSERVER_WRITE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_DBSERVER_WRITE* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_DBSERVER_WRITE*>(
               &_PB_MSG_DBSERVER_WRITE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PB_MSG_DBSERVER_WRITE& a, PB_MSG_DBSERVER_WRITE& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_DBSERVER_WRITE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_DBSERVER_WRITE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_DBSERVER_WRITE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_DBSERVER_WRITE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_DBSERVER_WRITE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_DBSERVER_WRITE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_DBSERVER_WRITE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_DBSERVER_WRITE";
  }
  protected:
  explicit PB_MSG_DBSERVER_WRITE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PB_MSG_DBSERVER_WRITE_WRITE_RECORD WRITE_RECORD;

  // accessors -------------------------------------------------------

  enum : int {
    kWrRcdFieldNumber = 3,
    kDatabaseAppNameFieldNumber = 1,
    kTableNameFieldNumber = 2,
  };
  // repeated .msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD wr_rcd = 3;
  int wr_rcd_size() const;
  private:
  int _internal_wr_rcd_size() const;
  public:
  void clear_wr_rcd();
  ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD* mutable_wr_rcd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD >*
      mutable_wr_rcd();
  private:
  const ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD& _internal_wr_rcd(int index) const;
  ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD* _internal_add_wr_rcd();
  public:
  const ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD& wr_rcd(int index) const;
  ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD* add_wr_rcd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD >&
      wr_rcd() const;

  // string database_app_name = 1;
  void clear_database_app_name();
  const std::string& database_app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_database_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_database_app_name();
  PROTOBUF_NODISCARD std::string* release_database_app_name();
  void set_allocated_database_app_name(std::string* database_app_name);
  private:
  const std::string& _internal_database_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_database_app_name(const std::string& value);
  std::string* _internal_mutable_database_app_name();
  public:

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_DBSERVER_WRITE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD > wr_rcd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr database_app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// -------------------------------------------------------------------

class PB_MSG_DBSERVER_WRITE_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PB_MSG_DBSERVER_WRITE_RES) */ {
 public:
  inline PB_MSG_DBSERVER_WRITE_RES() : PB_MSG_DBSERVER_WRITE_RES(nullptr) {}
  ~PB_MSG_DBSERVER_WRITE_RES() override;
  explicit constexpr PB_MSG_DBSERVER_WRITE_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PB_MSG_DBSERVER_WRITE_RES(const PB_MSG_DBSERVER_WRITE_RES& from);
  PB_MSG_DBSERVER_WRITE_RES(PB_MSG_DBSERVER_WRITE_RES&& from) noexcept
    : PB_MSG_DBSERVER_WRITE_RES() {
    *this = ::std::move(from);
  }

  inline PB_MSG_DBSERVER_WRITE_RES& operator=(const PB_MSG_DBSERVER_WRITE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PB_MSG_DBSERVER_WRITE_RES& operator=(PB_MSG_DBSERVER_WRITE_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PB_MSG_DBSERVER_WRITE_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const PB_MSG_DBSERVER_WRITE_RES* internal_default_instance() {
    return reinterpret_cast<const PB_MSG_DBSERVER_WRITE_RES*>(
               &_PB_MSG_DBSERVER_WRITE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PB_MSG_DBSERVER_WRITE_RES& a, PB_MSG_DBSERVER_WRITE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PB_MSG_DBSERVER_WRITE_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PB_MSG_DBSERVER_WRITE_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PB_MSG_DBSERVER_WRITE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PB_MSG_DBSERVER_WRITE_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PB_MSG_DBSERVER_WRITE_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PB_MSG_DBSERVER_WRITE_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PB_MSG_DBSERVER_WRITE_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PB_MSG_DBSERVER_WRITE_RES";
  }
  protected:
  explicit PB_MSG_DBSERVER_WRITE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // .msgpacket.PB_RESPONSE_CODE res = 1;
  void clear_res();
  ::msgpacket::PB_RESPONSE_CODE res() const;
  void set_res(::msgpacket::PB_RESPONSE_CODE value);
  private:
  ::msgpacket::PB_RESPONSE_CODE _internal_res() const;
  void _internal_set_res(::msgpacket::PB_RESPONSE_CODE value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PB_MSG_DBSERVER_WRITE_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msginter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PB_SRV_INFO_ONE

// int64 srv_uuid = 1;
inline void PB_SRV_INFO_ONE::clear_srv_uuid() {
  srv_uuid_ = int64_t{0};
}
inline int64_t PB_SRV_INFO_ONE::_internal_srv_uuid() const {
  return srv_uuid_;
}
inline int64_t PB_SRV_INFO_ONE::srv_uuid() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_SRV_INFO_ONE.srv_uuid)
  return _internal_srv_uuid();
}
inline void PB_SRV_INFO_ONE::_internal_set_srv_uuid(int64_t value) {
  
  srv_uuid_ = value;
}
inline void PB_SRV_INFO_ONE::set_srv_uuid(int64_t value) {
  _internal_set_srv_uuid(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_SRV_INFO_ONE.srv_uuid)
}

// int32 srv_type = 2;
inline void PB_SRV_INFO_ONE::clear_srv_type() {
  srv_type_ = 0;
}
inline int32_t PB_SRV_INFO_ONE::_internal_srv_type() const {
  return srv_type_;
}
inline int32_t PB_SRV_INFO_ONE::srv_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_SRV_INFO_ONE.srv_type)
  return _internal_srv_type();
}
inline void PB_SRV_INFO_ONE::_internal_set_srv_type(int32_t value) {
  
  srv_type_ = value;
}
inline void PB_SRV_INFO_ONE::set_srv_type(int32_t value) {
  _internal_set_srv_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_SRV_INFO_ONE.srv_type)
}

// -------------------------------------------------------------------

// PB_SRV_INFO_ALL

// repeated .msgpacket.PB_SRV_INFO_ONE array_srv = 1;
inline int PB_SRV_INFO_ALL::_internal_array_srv_size() const {
  return array_srv_.size();
}
inline int PB_SRV_INFO_ALL::array_srv_size() const {
  return _internal_array_srv_size();
}
inline void PB_SRV_INFO_ALL::clear_array_srv() {
  array_srv_.Clear();
}
inline ::msgpacket::PB_SRV_INFO_ONE* PB_SRV_INFO_ALL::mutable_array_srv(int index) {
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_SRV_INFO_ALL.array_srv)
  return array_srv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_SRV_INFO_ONE >*
PB_SRV_INFO_ALL::mutable_array_srv() {
  // @@protoc_insertion_point(field_mutable_list:msgpacket.PB_SRV_INFO_ALL.array_srv)
  return &array_srv_;
}
inline const ::msgpacket::PB_SRV_INFO_ONE& PB_SRV_INFO_ALL::_internal_array_srv(int index) const {
  return array_srv_.Get(index);
}
inline const ::msgpacket::PB_SRV_INFO_ONE& PB_SRV_INFO_ALL::array_srv(int index) const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_SRV_INFO_ALL.array_srv)
  return _internal_array_srv(index);
}
inline ::msgpacket::PB_SRV_INFO_ONE* PB_SRV_INFO_ALL::_internal_add_array_srv() {
  return array_srv_.Add();
}
inline ::msgpacket::PB_SRV_INFO_ONE* PB_SRV_INFO_ALL::add_array_srv() {
  ::msgpacket::PB_SRV_INFO_ONE* _add = _internal_add_array_srv();
  // @@protoc_insertion_point(field_add:msgpacket.PB_SRV_INFO_ALL.array_srv)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_SRV_INFO_ONE >&
PB_SRV_INFO_ALL::array_srv() const {
  // @@protoc_insertion_point(field_list:msgpacket.PB_SRV_INFO_ALL.array_srv)
  return array_srv_;
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUECENTER_REGISTER

// int64 que_srv_id = 1;
inline void PB_MSG_INTER_QUECENTER_REGISTER::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUECENTER_REGISTER::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUECENTER_REGISTER::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUECENTER_REGISTER::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUECENTER_REGISTER::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.que_srv_id)
}

// string ip = 2;
inline void PB_MSG_INTER_QUECENTER_REGISTER::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& PB_MSG_INTER_QUECENTER_REGISTER::ip() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_INTER_QUECENTER_REGISTER::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.ip)
}
inline std::string* PB_MSG_INTER_QUECENTER_REGISTER::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.ip)
  return _s;
}
inline const std::string& PB_MSG_INTER_QUECENTER_REGISTER::_internal_ip() const {
  return ip_.Get();
}
inline void PB_MSG_INTER_QUECENTER_REGISTER::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_INTER_QUECENTER_REGISTER::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_INTER_QUECENTER_REGISTER::release_ip() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_INTER_QUECENTER_REGISTER::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.ip)
}

// int32 port = 3;
inline void PB_MSG_INTER_QUECENTER_REGISTER::clear_port() {
  port_ = 0;
}
inline int32_t PB_MSG_INTER_QUECENTER_REGISTER::_internal_port() const {
  return port_;
}
inline int32_t PB_MSG_INTER_QUECENTER_REGISTER::port() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.port)
  return _internal_port();
}
inline void PB_MSG_INTER_QUECENTER_REGISTER::_internal_set_port(int32_t value) {
  
  port_ = value;
}
inline void PB_MSG_INTER_QUECENTER_REGISTER::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.port)
}

// .msgpacket.PB_SRV_INFO_ALL local_all_srv = 4;
inline bool PB_MSG_INTER_QUECENTER_REGISTER::_internal_has_local_all_srv() const {
  return this != internal_default_instance() && local_all_srv_ != nullptr;
}
inline bool PB_MSG_INTER_QUECENTER_REGISTER::has_local_all_srv() const {
  return _internal_has_local_all_srv();
}
inline void PB_MSG_INTER_QUECENTER_REGISTER::clear_local_all_srv() {
  if (GetArenaForAllocation() == nullptr && local_all_srv_ != nullptr) {
    delete local_all_srv_;
  }
  local_all_srv_ = nullptr;
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_QUECENTER_REGISTER::_internal_local_all_srv() const {
  const ::msgpacket::PB_SRV_INFO_ALL* p = local_all_srv_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PB_SRV_INFO_ALL&>(
      ::msgpacket::_PB_SRV_INFO_ALL_default_instance_);
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_QUECENTER_REGISTER::local_all_srv() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.local_all_srv)
  return _internal_local_all_srv();
}
inline void PB_MSG_INTER_QUECENTER_REGISTER::unsafe_arena_set_allocated_local_all_srv(
    ::msgpacket::PB_SRV_INFO_ALL* local_all_srv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_all_srv_);
  }
  local_all_srv_ = local_all_srv;
  if (local_all_srv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.local_all_srv)
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUECENTER_REGISTER::release_local_all_srv() {
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = local_all_srv_;
  local_all_srv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUECENTER_REGISTER::unsafe_arena_release_local_all_srv() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.local_all_srv)
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = local_all_srv_;
  local_all_srv_ = nullptr;
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUECENTER_REGISTER::_internal_mutable_local_all_srv() {
  
  if (local_all_srv_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PB_SRV_INFO_ALL>(GetArenaForAllocation());
    local_all_srv_ = p;
  }
  return local_all_srv_;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUECENTER_REGISTER::mutable_local_all_srv() {
  ::msgpacket::PB_SRV_INFO_ALL* _msg = _internal_mutable_local_all_srv();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.local_all_srv)
  return _msg;
}
inline void PB_MSG_INTER_QUECENTER_REGISTER::set_allocated_local_all_srv(::msgpacket::PB_SRV_INFO_ALL* local_all_srv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_all_srv_;
  }
  if (local_all_srv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PB_SRV_INFO_ALL>::GetOwningArena(local_all_srv);
    if (message_arena != submessage_arena) {
      local_all_srv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_all_srv, submessage_arena);
    }
    
  } else {
    
  }
  local_all_srv_ = local_all_srv;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.local_all_srv)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUESRV_INFO

// int64 que_srv_id = 1;
inline void PB_MSG_INTER_QUESRV_INFO::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUESRV_INFO::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUESRV_INFO::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_INFO.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUESRV_INFO::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUESRV_INFO::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_INFO.que_srv_id)
}

// string ip = 2;
inline void PB_MSG_INTER_QUESRV_INFO::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& PB_MSG_INTER_QUESRV_INFO::ip() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_INFO.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_INTER_QUESRV_INFO::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_INFO.ip)
}
inline std::string* PB_MSG_INTER_QUESRV_INFO::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUESRV_INFO.ip)
  return _s;
}
inline const std::string& PB_MSG_INTER_QUESRV_INFO::_internal_ip() const {
  return ip_.Get();
}
inline void PB_MSG_INTER_QUESRV_INFO::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_INTER_QUESRV_INFO::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_INTER_QUESRV_INFO::release_ip() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_QUESRV_INFO.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_INTER_QUESRV_INFO::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_INFO.ip)
}

// int32 port = 3;
inline void PB_MSG_INTER_QUESRV_INFO::clear_port() {
  port_ = 0;
}
inline int32_t PB_MSG_INTER_QUESRV_INFO::_internal_port() const {
  return port_;
}
inline int32_t PB_MSG_INTER_QUESRV_INFO::port() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_INFO.port)
  return _internal_port();
}
inline void PB_MSG_INTER_QUESRV_INFO::_internal_set_port(int32_t value) {
  
  port_ = value;
}
inline void PB_MSG_INTER_QUESRV_INFO::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_INFO.port)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUECENTER_REGISTER_RES

// repeated .msgpacket.PB_MSG_INTER_QUESRV_INFO que_srv_info = 1;
inline int PB_MSG_INTER_QUECENTER_REGISTER_RES::_internal_que_srv_info_size() const {
  return que_srv_info_.size();
}
inline int PB_MSG_INTER_QUECENTER_REGISTER_RES::que_srv_info_size() const {
  return _internal_que_srv_info_size();
}
inline void PB_MSG_INTER_QUECENTER_REGISTER_RES::clear_que_srv_info() {
  que_srv_info_.Clear();
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_INFO* PB_MSG_INTER_QUECENTER_REGISTER_RES::mutable_que_srv_info(int index) {
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES.que_srv_info)
  return que_srv_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_MSG_INTER_QUESRV_INFO >*
PB_MSG_INTER_QUECENTER_REGISTER_RES::mutable_que_srv_info() {
  // @@protoc_insertion_point(field_mutable_list:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES.que_srv_info)
  return &que_srv_info_;
}
inline const ::msgpacket::PB_MSG_INTER_QUESRV_INFO& PB_MSG_INTER_QUECENTER_REGISTER_RES::_internal_que_srv_info(int index) const {
  return que_srv_info_.Get(index);
}
inline const ::msgpacket::PB_MSG_INTER_QUESRV_INFO& PB_MSG_INTER_QUECENTER_REGISTER_RES::que_srv_info(int index) const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES.que_srv_info)
  return _internal_que_srv_info(index);
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_INFO* PB_MSG_INTER_QUECENTER_REGISTER_RES::_internal_add_que_srv_info() {
  return que_srv_info_.Add();
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_INFO* PB_MSG_INTER_QUECENTER_REGISTER_RES::add_que_srv_info() {
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* _add = _internal_add_que_srv_info();
  // @@protoc_insertion_point(field_add:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES.que_srv_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_MSG_INTER_QUESRV_INFO >&
PB_MSG_INTER_QUECENTER_REGISTER_RES::que_srv_info() const {
  // @@protoc_insertion_point(field_list:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES.que_srv_info)
  return que_srv_info_;
}

// int64 que_srv_id = 2;
inline void PB_MSG_INTER_QUECENTER_REGISTER_RES::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUECENTER_REGISTER_RES::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUECENTER_REGISTER_RES::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUECENTER_REGISTER_RES::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUECENTER_REGISTER_RES::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES.que_srv_id)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUECENTER_OFFLINE_NTF

// int64 que_srv_id = 1;
inline void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUECENTER_OFFLINE_NTF::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUECENTER_OFFLINE_NTF::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF.que_srv_id)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUECENTER_ONLINE_NTF

// .msgpacket.PB_MSG_INTER_QUESRV_INFO que_srv_info = 1;
inline bool PB_MSG_INTER_QUECENTER_ONLINE_NTF::_internal_has_que_srv_info() const {
  return this != internal_default_instance() && que_srv_info_ != nullptr;
}
inline bool PB_MSG_INTER_QUECENTER_ONLINE_NTF::has_que_srv_info() const {
  return _internal_has_que_srv_info();
}
inline void PB_MSG_INTER_QUECENTER_ONLINE_NTF::clear_que_srv_info() {
  if (GetArenaForAllocation() == nullptr && que_srv_info_ != nullptr) {
    delete que_srv_info_;
  }
  que_srv_info_ = nullptr;
}
inline const ::msgpacket::PB_MSG_INTER_QUESRV_INFO& PB_MSG_INTER_QUECENTER_ONLINE_NTF::_internal_que_srv_info() const {
  const ::msgpacket::PB_MSG_INTER_QUESRV_INFO* p = que_srv_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PB_MSG_INTER_QUESRV_INFO&>(
      ::msgpacket::_PB_MSG_INTER_QUESRV_INFO_default_instance_);
}
inline const ::msgpacket::PB_MSG_INTER_QUESRV_INFO& PB_MSG_INTER_QUECENTER_ONLINE_NTF::que_srv_info() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF.que_srv_info)
  return _internal_que_srv_info();
}
inline void PB_MSG_INTER_QUECENTER_ONLINE_NTF::unsafe_arena_set_allocated_que_srv_info(
    ::msgpacket::PB_MSG_INTER_QUESRV_INFO* que_srv_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(que_srv_info_);
  }
  que_srv_info_ = que_srv_info;
  if (que_srv_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF.que_srv_info)
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_INFO* PB_MSG_INTER_QUECENTER_ONLINE_NTF::release_que_srv_info() {
  
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* temp = que_srv_info_;
  que_srv_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_INFO* PB_MSG_INTER_QUECENTER_ONLINE_NTF::unsafe_arena_release_que_srv_info() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF.que_srv_info)
  
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* temp = que_srv_info_;
  que_srv_info_ = nullptr;
  return temp;
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_INFO* PB_MSG_INTER_QUECENTER_ONLINE_NTF::_internal_mutable_que_srv_info() {
  
  if (que_srv_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_INFO>(GetArenaForAllocation());
    que_srv_info_ = p;
  }
  return que_srv_info_;
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_INFO* PB_MSG_INTER_QUECENTER_ONLINE_NTF::mutable_que_srv_info() {
  ::msgpacket::PB_MSG_INTER_QUESRV_INFO* _msg = _internal_mutable_que_srv_info();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF.que_srv_info)
  return _msg;
}
inline void PB_MSG_INTER_QUECENTER_ONLINE_NTF::set_allocated_que_srv_info(::msgpacket::PB_MSG_INTER_QUESRV_INFO* que_srv_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete que_srv_info_;
  }
  if (que_srv_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PB_MSG_INTER_QUESRV_INFO>::GetOwningArena(que_srv_info);
    if (message_arena != submessage_arena) {
      que_srv_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, que_srv_info, submessage_arena);
    }
    
  } else {
    
  }
  que_srv_info_ = que_srv_info;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF.que_srv_info)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUESRV_CONNECT

// int64 que_srv_id = 1;
inline void PB_MSG_INTER_QUESRV_CONNECT::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUESRV_CONNECT::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUESRV_CONNECT::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_CONNECT.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUESRV_CONNECT::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUESRV_CONNECT::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_CONNECT.que_srv_id)
}

// .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
inline bool PB_MSG_INTER_QUESRV_CONNECT::_internal_has_local_all_srv() const {
  return this != internal_default_instance() && local_all_srv_ != nullptr;
}
inline bool PB_MSG_INTER_QUESRV_CONNECT::has_local_all_srv() const {
  return _internal_has_local_all_srv();
}
inline void PB_MSG_INTER_QUESRV_CONNECT::clear_local_all_srv() {
  if (GetArenaForAllocation() == nullptr && local_all_srv_ != nullptr) {
    delete local_all_srv_;
  }
  local_all_srv_ = nullptr;
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_QUESRV_CONNECT::_internal_local_all_srv() const {
  const ::msgpacket::PB_SRV_INFO_ALL* p = local_all_srv_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PB_SRV_INFO_ALL&>(
      ::msgpacket::_PB_SRV_INFO_ALL_default_instance_);
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_QUESRV_CONNECT::local_all_srv() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_CONNECT.local_all_srv)
  return _internal_local_all_srv();
}
inline void PB_MSG_INTER_QUESRV_CONNECT::unsafe_arena_set_allocated_local_all_srv(
    ::msgpacket::PB_SRV_INFO_ALL* local_all_srv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_all_srv_);
  }
  local_all_srv_ = local_all_srv;
  if (local_all_srv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_CONNECT.local_all_srv)
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_CONNECT::release_local_all_srv() {
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = local_all_srv_;
  local_all_srv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_CONNECT::unsafe_arena_release_local_all_srv() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_QUESRV_CONNECT.local_all_srv)
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = local_all_srv_;
  local_all_srv_ = nullptr;
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_CONNECT::_internal_mutable_local_all_srv() {
  
  if (local_all_srv_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PB_SRV_INFO_ALL>(GetArenaForAllocation());
    local_all_srv_ = p;
  }
  return local_all_srv_;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_CONNECT::mutable_local_all_srv() {
  ::msgpacket::PB_SRV_INFO_ALL* _msg = _internal_mutable_local_all_srv();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUESRV_CONNECT.local_all_srv)
  return _msg;
}
inline void PB_MSG_INTER_QUESRV_CONNECT::set_allocated_local_all_srv(::msgpacket::PB_SRV_INFO_ALL* local_all_srv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_all_srv_;
  }
  if (local_all_srv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PB_SRV_INFO_ALL>::GetOwningArena(local_all_srv);
    if (message_arena != submessage_arena) {
      local_all_srv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_all_srv, submessage_arena);
    }
    
  } else {
    
  }
  local_all_srv_ = local_all_srv;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_CONNECT.local_all_srv)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUESRV_CONNECT_RES

// int64 que_srv_id = 1;
inline void PB_MSG_INTER_QUESRV_CONNECT_RES::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUESRV_CONNECT_RES::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUESRV_CONNECT_RES::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUESRV_CONNECT_RES::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUESRV_CONNECT_RES::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES.que_srv_id)
}

// .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
inline bool PB_MSG_INTER_QUESRV_CONNECT_RES::_internal_has_local_all_srv() const {
  return this != internal_default_instance() && local_all_srv_ != nullptr;
}
inline bool PB_MSG_INTER_QUESRV_CONNECT_RES::has_local_all_srv() const {
  return _internal_has_local_all_srv();
}
inline void PB_MSG_INTER_QUESRV_CONNECT_RES::clear_local_all_srv() {
  if (GetArenaForAllocation() == nullptr && local_all_srv_ != nullptr) {
    delete local_all_srv_;
  }
  local_all_srv_ = nullptr;
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_QUESRV_CONNECT_RES::_internal_local_all_srv() const {
  const ::msgpacket::PB_SRV_INFO_ALL* p = local_all_srv_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PB_SRV_INFO_ALL&>(
      ::msgpacket::_PB_SRV_INFO_ALL_default_instance_);
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_QUESRV_CONNECT_RES::local_all_srv() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES.local_all_srv)
  return _internal_local_all_srv();
}
inline void PB_MSG_INTER_QUESRV_CONNECT_RES::unsafe_arena_set_allocated_local_all_srv(
    ::msgpacket::PB_SRV_INFO_ALL* local_all_srv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_all_srv_);
  }
  local_all_srv_ = local_all_srv;
  if (local_all_srv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES.local_all_srv)
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_CONNECT_RES::release_local_all_srv() {
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = local_all_srv_;
  local_all_srv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_CONNECT_RES::unsafe_arena_release_local_all_srv() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES.local_all_srv)
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = local_all_srv_;
  local_all_srv_ = nullptr;
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_CONNECT_RES::_internal_mutable_local_all_srv() {
  
  if (local_all_srv_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PB_SRV_INFO_ALL>(GetArenaForAllocation());
    local_all_srv_ = p;
  }
  return local_all_srv_;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_CONNECT_RES::mutable_local_all_srv() {
  ::msgpacket::PB_SRV_INFO_ALL* _msg = _internal_mutable_local_all_srv();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES.local_all_srv)
  return _msg;
}
inline void PB_MSG_INTER_QUESRV_CONNECT_RES::set_allocated_local_all_srv(::msgpacket::PB_SRV_INFO_ALL* local_all_srv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_all_srv_;
  }
  if (local_all_srv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PB_SRV_INFO_ALL>::GetOwningArena(local_all_srv);
    if (message_arena != submessage_arena) {
      local_all_srv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_all_srv, submessage_arena);
    }
    
  } else {
    
  }
  local_all_srv_ = local_all_srv;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES.local_all_srv)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUECENTER_HEARTBEAT

// int64 que_srv_id = 1;
inline void PB_MSG_INTER_QUECENTER_HEARTBEAT::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUECENTER_HEARTBEAT::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUECENTER_HEARTBEAT::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUECENTER_HEARTBEAT::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUECENTER_HEARTBEAT::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT.que_srv_id)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUECENTER_HEARTBEAT_RES

// int64 que_srv_id = 1;
inline void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES.que_srv_id)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUESRV_HEARTBEAT

// int64 que_srv_id = 1;
inline void PB_MSG_INTER_QUESRV_HEARTBEAT::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUESRV_HEARTBEAT::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUESRV_HEARTBEAT::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUESRV_HEARTBEAT::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUESRV_HEARTBEAT::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT.que_srv_id)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUESRV_HEARTBEAT_RES

// int64 que_srv_id = 1;
inline void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUESRV_HEARTBEAT_RES::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUESRV_HEARTBEAT_RES::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES.que_srv_id)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER

// int32 srv_type = 1;
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::clear_srv_type() {
  srv_type_ = 0;
}
inline int32_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::_internal_srv_type() const {
  return srv_type_;
}
inline int32_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::srv_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER.srv_type)
  return _internal_srv_type();
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::_internal_set_srv_type(int32_t value) {
  
  srv_type_ = value;
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::set_srv_type(int32_t value) {
  _internal_set_srv_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER.srv_type)
}

// int64 srv_uuid = 2;
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::clear_srv_uuid() {
  srv_uuid_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::_internal_srv_uuid() const {
  return srv_uuid_;
}
inline int64_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::srv_uuid() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER.srv_uuid)
  return _internal_srv_uuid();
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::_internal_set_srv_uuid(int64_t value) {
  
  srv_uuid_ = value;
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::set_srv_uuid(int64_t value) {
  _internal_set_srv_uuid(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER.srv_uuid)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES

// .msgpacket.PB_RESPONSE_CODE res = 1;
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::clear_res() {
  res_ = 0;
}
inline ::msgpacket::PB_RESPONSE_CODE PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_res() const {
  return static_cast< ::msgpacket::PB_RESPONSE_CODE >(res_);
}
inline ::msgpacket::PB_RESPONSE_CODE PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::res() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.res)
  return _internal_res();
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_set_res(::msgpacket::PB_RESPONSE_CODE value) {
  
  res_ = value;
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::set_res(::msgpacket::PB_RESPONSE_CODE value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.res)
}

// int64 srv_uuid = 2;
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::clear_srv_uuid() {
  srv_uuid_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_srv_uuid() const {
  return srv_uuid_;
}
inline int64_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::srv_uuid() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.srv_uuid)
  return _internal_srv_uuid();
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_set_srv_uuid(int64_t value) {
  
  srv_uuid_ = value;
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::set_srv_uuid(int64_t value) {
  _internal_set_srv_uuid(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.srv_uuid)
}

// int64 que_srv_id = 3;
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_id)
}

// string que_srv_ip = 4;
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::clear_que_srv_ip() {
  que_srv_ip_.ClearToEmpty();
}
inline const std::string& PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::que_srv_ip() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_ip)
  return _internal_que_srv_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::set_que_srv_ip(ArgT0&& arg0, ArgT... args) {
 
 que_srv_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_ip)
}
inline std::string* PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::mutable_que_srv_ip() {
  std::string* _s = _internal_mutable_que_srv_ip();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_ip)
  return _s;
}
inline const std::string& PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_que_srv_ip() const {
  return que_srv_ip_.Get();
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_set_que_srv_ip(const std::string& value) {
  
  que_srv_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_mutable_que_srv_ip() {
  
  return que_srv_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::release_que_srv_ip() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_ip)
  return que_srv_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::set_allocated_que_srv_ip(std::string* que_srv_ip) {
  if (que_srv_ip != nullptr) {
    
  } else {
    
  }
  que_srv_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), que_srv_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (que_srv_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    que_srv_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_ip)
}

// int32 que_srv_port = 5;
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::clear_que_srv_port() {
  que_srv_port_ = 0;
}
inline int32_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_que_srv_port() const {
  return que_srv_port_;
}
inline int32_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::que_srv_port() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_port)
  return _internal_que_srv_port();
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_internal_set_que_srv_port(int32_t value) {
  
  que_srv_port_ = value;
}
inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::set_que_srv_port(int32_t value) {
  _internal_set_que_srv_port(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_port)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_CLISRV_HEARTBEAT

// int64 srv_uuid = 1;
inline void PB_MSG_INTER_CLISRV_HEARTBEAT::clear_srv_uuid() {
  srv_uuid_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_CLISRV_HEARTBEAT::_internal_srv_uuid() const {
  return srv_uuid_;
}
inline int64_t PB_MSG_INTER_CLISRV_HEARTBEAT::srv_uuid() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT.srv_uuid)
  return _internal_srv_uuid();
}
inline void PB_MSG_INTER_CLISRV_HEARTBEAT::_internal_set_srv_uuid(int64_t value) {
  
  srv_uuid_ = value;
}
inline void PB_MSG_INTER_CLISRV_HEARTBEAT::set_srv_uuid(int64_t value) {
  _internal_set_srv_uuid(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT.srv_uuid)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_CLISRV_HEARTBEAT_RES

// int64 srv_uuid = 1;
inline void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::clear_srv_uuid() {
  srv_uuid_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_CLISRV_HEARTBEAT_RES::_internal_srv_uuid() const {
  return srv_uuid_;
}
inline int64_t PB_MSG_INTER_CLISRV_HEARTBEAT_RES::srv_uuid() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES.srv_uuid)
  return _internal_srv_uuid();
}
inline void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::_internal_set_srv_uuid(int64_t value) {
  
  srv_uuid_ = value;
}
inline void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::set_srv_uuid(int64_t value) {
  _internal_set_srv_uuid(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES.srv_uuid)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_MSG

// int64 srv_uuid_from = 1;
inline void PB_MSG_INTER_MSG::clear_srv_uuid_from() {
  srv_uuid_from_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG::_internal_srv_uuid_from() const {
  return srv_uuid_from_;
}
inline int64_t PB_MSG_INTER_MSG::srv_uuid_from() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG.srv_uuid_from)
  return _internal_srv_uuid_from();
}
inline void PB_MSG_INTER_MSG::_internal_set_srv_uuid_from(int64_t value) {
  
  srv_uuid_from_ = value;
}
inline void PB_MSG_INTER_MSG::set_srv_uuid_from(int64_t value) {
  _internal_set_srv_uuid_from(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG.srv_uuid_from)
}

// int64 srv_uuid_to = 2;
inline void PB_MSG_INTER_MSG::clear_srv_uuid_to() {
  srv_uuid_to_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG::_internal_srv_uuid_to() const {
  return srv_uuid_to_;
}
inline int64_t PB_MSG_INTER_MSG::srv_uuid_to() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG.srv_uuid_to)
  return _internal_srv_uuid_to();
}
inline void PB_MSG_INTER_MSG::_internal_set_srv_uuid_to(int64_t value) {
  
  srv_uuid_to_ = value;
}
inline void PB_MSG_INTER_MSG::set_srv_uuid_to(int64_t value) {
  _internal_set_srv_uuid_to(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG.srv_uuid_to)
}

// int32 srv_type = 3;
inline void PB_MSG_INTER_MSG::clear_srv_type() {
  srv_type_ = 0;
}
inline int32_t PB_MSG_INTER_MSG::_internal_srv_type() const {
  return srv_type_;
}
inline int32_t PB_MSG_INTER_MSG::srv_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG.srv_type)
  return _internal_srv_type();
}
inline void PB_MSG_INTER_MSG::_internal_set_srv_type(int32_t value) {
  
  srv_type_ = value;
}
inline void PB_MSG_INTER_MSG::set_srv_type(int32_t value) {
  _internal_set_srv_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG.srv_type)
}

// int32 msg_type = 4;
inline void PB_MSG_INTER_MSG::clear_msg_type() {
  msg_type_ = 0;
}
inline int32_t PB_MSG_INTER_MSG::_internal_msg_type() const {
  return msg_type_;
}
inline int32_t PB_MSG_INTER_MSG::msg_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG.msg_type)
  return _internal_msg_type();
}
inline void PB_MSG_INTER_MSG::_internal_set_msg_type(int32_t value) {
  
  msg_type_ = value;
}
inline void PB_MSG_INTER_MSG::set_msg_type(int32_t value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG.msg_type)
}

// bytes msg_bin = 5;
inline void PB_MSG_INTER_MSG::clear_msg_bin() {
  msg_bin_.ClearToEmpty();
}
inline const std::string& PB_MSG_INTER_MSG::msg_bin() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG.msg_bin)
  return _internal_msg_bin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_INTER_MSG::set_msg_bin(ArgT0&& arg0, ArgT... args) {
 
 msg_bin_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG.msg_bin)
}
inline std::string* PB_MSG_INTER_MSG::mutable_msg_bin() {
  std::string* _s = _internal_mutable_msg_bin();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_MSG.msg_bin)
  return _s;
}
inline const std::string& PB_MSG_INTER_MSG::_internal_msg_bin() const {
  return msg_bin_.Get();
}
inline void PB_MSG_INTER_MSG::_internal_set_msg_bin(const std::string& value) {
  
  msg_bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_INTER_MSG::_internal_mutable_msg_bin() {
  
  return msg_bin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_INTER_MSG::release_msg_bin() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_MSG.msg_bin)
  return msg_bin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_INTER_MSG::set_allocated_msg_bin(std::string* msg_bin) {
  if (msg_bin != nullptr) {
    
  } else {
    
  }
  msg_bin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_bin,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_bin_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_MSG.msg_bin)
}

// int64 msg_id = 6;
inline void PB_MSG_INTER_MSG::clear_msg_id() {
  msg_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG::_internal_msg_id() const {
  return msg_id_;
}
inline int64_t PB_MSG_INTER_MSG::msg_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG.msg_id)
  return _internal_msg_id();
}
inline void PB_MSG_INTER_MSG::_internal_set_msg_id(int64_t value) {
  
  msg_id_ = value;
}
inline void PB_MSG_INTER_MSG::set_msg_id(int64_t value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG.msg_id)
}

// int64 msg_seq = 7;
inline void PB_MSG_INTER_MSG::clear_msg_seq() {
  msg_seq_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG::_internal_msg_seq() const {
  return msg_seq_;
}
inline int64_t PB_MSG_INTER_MSG::msg_seq() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG.msg_seq)
  return _internal_msg_seq();
}
inline void PB_MSG_INTER_MSG::_internal_set_msg_seq(int64_t value) {
  
  msg_seq_ = value;
}
inline void PB_MSG_INTER_MSG::set_msg_seq(int64_t value) {
  _internal_set_msg_seq(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG.msg_seq)
}

// int64 timestamp = 8;
inline void PB_MSG_INTER_MSG::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t PB_MSG_INTER_MSG::timestamp() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG.timestamp)
  return _internal_timestamp();
}
inline void PB_MSG_INTER_MSG::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void PB_MSG_INTER_MSG::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG.timestamp)
}

// int64 timestamp_arrive = 9;
inline void PB_MSG_INTER_MSG::clear_timestamp_arrive() {
  timestamp_arrive_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG::_internal_timestamp_arrive() const {
  return timestamp_arrive_;
}
inline int64_t PB_MSG_INTER_MSG::timestamp_arrive() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG.timestamp_arrive)
  return _internal_timestamp_arrive();
}
inline void PB_MSG_INTER_MSG::_internal_set_timestamp_arrive(int64_t value) {
  
  timestamp_arrive_ = value;
}
inline void PB_MSG_INTER_MSG::set_timestamp_arrive(int64_t value) {
  _internal_set_timestamp_arrive(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG.timestamp_arrive)
}

// int64 timeout_wait = 10;
inline void PB_MSG_INTER_MSG::clear_timeout_wait() {
  timeout_wait_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG::_internal_timeout_wait() const {
  return timeout_wait_;
}
inline int64_t PB_MSG_INTER_MSG::timeout_wait() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG.timeout_wait)
  return _internal_timeout_wait();
}
inline void PB_MSG_INTER_MSG::_internal_set_timeout_wait(int64_t value) {
  
  timeout_wait_ = value;
}
inline void PB_MSG_INTER_MSG::set_timeout_wait(int64_t value) {
  _internal_set_timeout_wait(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG.timeout_wait)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_MSG_RES

// int64 srv_uuid_from = 1;
inline void PB_MSG_INTER_MSG_RES::clear_srv_uuid_from() {
  srv_uuid_from_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG_RES::_internal_srv_uuid_from() const {
  return srv_uuid_from_;
}
inline int64_t PB_MSG_INTER_MSG_RES::srv_uuid_from() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.srv_uuid_from)
  return _internal_srv_uuid_from();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_srv_uuid_from(int64_t value) {
  
  srv_uuid_from_ = value;
}
inline void PB_MSG_INTER_MSG_RES::set_srv_uuid_from(int64_t value) {
  _internal_set_srv_uuid_from(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.srv_uuid_from)
}

// int64 srv_uuid_to = 2;
inline void PB_MSG_INTER_MSG_RES::clear_srv_uuid_to() {
  srv_uuid_to_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG_RES::_internal_srv_uuid_to() const {
  return srv_uuid_to_;
}
inline int64_t PB_MSG_INTER_MSG_RES::srv_uuid_to() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.srv_uuid_to)
  return _internal_srv_uuid_to();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_srv_uuid_to(int64_t value) {
  
  srv_uuid_to_ = value;
}
inline void PB_MSG_INTER_MSG_RES::set_srv_uuid_to(int64_t value) {
  _internal_set_srv_uuid_to(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.srv_uuid_to)
}

// int32 srv_type = 3;
inline void PB_MSG_INTER_MSG_RES::clear_srv_type() {
  srv_type_ = 0;
}
inline int32_t PB_MSG_INTER_MSG_RES::_internal_srv_type() const {
  return srv_type_;
}
inline int32_t PB_MSG_INTER_MSG_RES::srv_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.srv_type)
  return _internal_srv_type();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_srv_type(int32_t value) {
  
  srv_type_ = value;
}
inline void PB_MSG_INTER_MSG_RES::set_srv_type(int32_t value) {
  _internal_set_srv_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.srv_type)
}

// int32 msg_type = 4;
inline void PB_MSG_INTER_MSG_RES::clear_msg_type() {
  msg_type_ = 0;
}
inline int32_t PB_MSG_INTER_MSG_RES::_internal_msg_type() const {
  return msg_type_;
}
inline int32_t PB_MSG_INTER_MSG_RES::msg_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.msg_type)
  return _internal_msg_type();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_msg_type(int32_t value) {
  
  msg_type_ = value;
}
inline void PB_MSG_INTER_MSG_RES::set_msg_type(int32_t value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.msg_type)
}

// bytes msg_bin = 5;
inline void PB_MSG_INTER_MSG_RES::clear_msg_bin() {
  msg_bin_.ClearToEmpty();
}
inline const std::string& PB_MSG_INTER_MSG_RES::msg_bin() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.msg_bin)
  return _internal_msg_bin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_INTER_MSG_RES::set_msg_bin(ArgT0&& arg0, ArgT... args) {
 
 msg_bin_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.msg_bin)
}
inline std::string* PB_MSG_INTER_MSG_RES::mutable_msg_bin() {
  std::string* _s = _internal_mutable_msg_bin();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_MSG_RES.msg_bin)
  return _s;
}
inline const std::string& PB_MSG_INTER_MSG_RES::_internal_msg_bin() const {
  return msg_bin_.Get();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_msg_bin(const std::string& value) {
  
  msg_bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_INTER_MSG_RES::_internal_mutable_msg_bin() {
  
  return msg_bin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_INTER_MSG_RES::release_msg_bin() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_MSG_RES.msg_bin)
  return msg_bin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_INTER_MSG_RES::set_allocated_msg_bin(std::string* msg_bin) {
  if (msg_bin != nullptr) {
    
  } else {
    
  }
  msg_bin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_bin,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_bin_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_MSG_RES.msg_bin)
}

// int64 msg_id = 6;
inline void PB_MSG_INTER_MSG_RES::clear_msg_id() {
  msg_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG_RES::_internal_msg_id() const {
  return msg_id_;
}
inline int64_t PB_MSG_INTER_MSG_RES::msg_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.msg_id)
  return _internal_msg_id();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_msg_id(int64_t value) {
  
  msg_id_ = value;
}
inline void PB_MSG_INTER_MSG_RES::set_msg_id(int64_t value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.msg_id)
}

// int64 msg_seq = 7;
inline void PB_MSG_INTER_MSG_RES::clear_msg_seq() {
  msg_seq_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG_RES::_internal_msg_seq() const {
  return msg_seq_;
}
inline int64_t PB_MSG_INTER_MSG_RES::msg_seq() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.msg_seq)
  return _internal_msg_seq();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_msg_seq(int64_t value) {
  
  msg_seq_ = value;
}
inline void PB_MSG_INTER_MSG_RES::set_msg_seq(int64_t value) {
  _internal_set_msg_seq(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.msg_seq)
}

// int64 timestamp = 8;
inline void PB_MSG_INTER_MSG_RES::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG_RES::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t PB_MSG_INTER_MSG_RES::timestamp() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.timestamp)
  return _internal_timestamp();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void PB_MSG_INTER_MSG_RES::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.timestamp)
}

// int64 timestamp_arrive = 9;
inline void PB_MSG_INTER_MSG_RES::clear_timestamp_arrive() {
  timestamp_arrive_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG_RES::_internal_timestamp_arrive() const {
  return timestamp_arrive_;
}
inline int64_t PB_MSG_INTER_MSG_RES::timestamp_arrive() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.timestamp_arrive)
  return _internal_timestamp_arrive();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_timestamp_arrive(int64_t value) {
  
  timestamp_arrive_ = value;
}
inline void PB_MSG_INTER_MSG_RES::set_timestamp_arrive(int64_t value) {
  _internal_set_timestamp_arrive(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.timestamp_arrive)
}

// int64 timeout_wait = 10;
inline void PB_MSG_INTER_MSG_RES::clear_timeout_wait() {
  timeout_wait_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_MSG_RES::_internal_timeout_wait() const {
  return timeout_wait_;
}
inline int64_t PB_MSG_INTER_MSG_RES::timeout_wait() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.timeout_wait)
  return _internal_timeout_wait();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_timeout_wait(int64_t value) {
  
  timeout_wait_ = value;
}
inline void PB_MSG_INTER_MSG_RES::set_timeout_wait(int64_t value) {
  _internal_set_timeout_wait(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.timeout_wait)
}

// .msgpacket.PB_RESPONSE_CODE res = 11;
inline void PB_MSG_INTER_MSG_RES::clear_res() {
  res_ = 0;
}
inline ::msgpacket::PB_RESPONSE_CODE PB_MSG_INTER_MSG_RES::_internal_res() const {
  return static_cast< ::msgpacket::PB_RESPONSE_CODE >(res_);
}
inline ::msgpacket::PB_RESPONSE_CODE PB_MSG_INTER_MSG_RES::res() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_MSG_RES.res)
  return _internal_res();
}
inline void PB_MSG_INTER_MSG_RES::_internal_set_res(::msgpacket::PB_RESPONSE_CODE value) {
  
  res_ = value;
}
inline void PB_MSG_INTER_MSG_RES::set_res(::msgpacket::PB_RESPONSE_CODE value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_MSG_RES.res)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_CLISRV_REG_TO_QUE

// int64 srv_uuid = 1;
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE::clear_srv_uuid() {
  srv_uuid_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_CLISRV_REG_TO_QUE::_internal_srv_uuid() const {
  return srv_uuid_;
}
inline int64_t PB_MSG_INTER_CLISRV_REG_TO_QUE::srv_uuid() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE.srv_uuid)
  return _internal_srv_uuid();
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE::_internal_set_srv_uuid(int64_t value) {
  
  srv_uuid_ = value;
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE::set_srv_uuid(int64_t value) {
  _internal_set_srv_uuid(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE.srv_uuid)
}

// int32 srv_type = 2;
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE::clear_srv_type() {
  srv_type_ = 0;
}
inline int32_t PB_MSG_INTER_CLISRV_REG_TO_QUE::_internal_srv_type() const {
  return srv_type_;
}
inline int32_t PB_MSG_INTER_CLISRV_REG_TO_QUE::srv_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE.srv_type)
  return _internal_srv_type();
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE::_internal_set_srv_type(int32_t value) {
  
  srv_type_ = value;
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE::set_srv_type(int32_t value) {
  _internal_set_srv_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE.srv_type)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_CLISRV_REG_TO_QUE_RES

// int64 srv_uuid = 1;
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::clear_srv_uuid() {
  srv_uuid_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_internal_srv_uuid() const {
  return srv_uuid_;
}
inline int64_t PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::srv_uuid() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.srv_uuid)
  return _internal_srv_uuid();
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_internal_set_srv_uuid(int64_t value) {
  
  srv_uuid_ = value;
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::set_srv_uuid(int64_t value) {
  _internal_set_srv_uuid(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.srv_uuid)
}

// int32 srv_type = 2;
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::clear_srv_type() {
  srv_type_ = 0;
}
inline int32_t PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_internal_srv_type() const {
  return srv_type_;
}
inline int32_t PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::srv_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.srv_type)
  return _internal_srv_type();
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_internal_set_srv_type(int32_t value) {
  
  srv_type_ = value;
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::set_srv_type(int32_t value) {
  _internal_set_srv_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.srv_type)
}

// .msgpacket.PB_SRV_INFO_ALL all_srv = 3;
inline bool PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_internal_has_all_srv() const {
  return this != internal_default_instance() && all_srv_ != nullptr;
}
inline bool PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::has_all_srv() const {
  return _internal_has_all_srv();
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::clear_all_srv() {
  if (GetArenaForAllocation() == nullptr && all_srv_ != nullptr) {
    delete all_srv_;
  }
  all_srv_ = nullptr;
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_internal_all_srv() const {
  const ::msgpacket::PB_SRV_INFO_ALL* p = all_srv_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PB_SRV_INFO_ALL&>(
      ::msgpacket::_PB_SRV_INFO_ALL_default_instance_);
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::all_srv() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.all_srv)
  return _internal_all_srv();
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::unsafe_arena_set_allocated_all_srv(
    ::msgpacket::PB_SRV_INFO_ALL* all_srv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all_srv_);
  }
  all_srv_ = all_srv;
  if (all_srv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.all_srv)
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::release_all_srv() {
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = all_srv_;
  all_srv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::unsafe_arena_release_all_srv() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.all_srv)
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = all_srv_;
  all_srv_ = nullptr;
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_internal_mutable_all_srv() {
  
  if (all_srv_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PB_SRV_INFO_ALL>(GetArenaForAllocation());
    all_srv_ = p;
  }
  return all_srv_;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::mutable_all_srv() {
  ::msgpacket::PB_SRV_INFO_ALL* _msg = _internal_mutable_all_srv();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.all_srv)
  return _msg;
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::set_allocated_all_srv(::msgpacket::PB_SRV_INFO_ALL* all_srv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete all_srv_;
  }
  if (all_srv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PB_SRV_INFO_ALL>::GetOwningArena(all_srv);
    if (message_arena != submessage_arena) {
      all_srv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_srv, submessage_arena);
    }
    
  } else {
    
  }
  all_srv_ = all_srv;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.all_srv)
}

// .msgpacket.PB_SRV_INFO_ALL local_all_srv = 4;
inline bool PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_internal_has_local_all_srv() const {
  return this != internal_default_instance() && local_all_srv_ != nullptr;
}
inline bool PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::has_local_all_srv() const {
  return _internal_has_local_all_srv();
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::clear_local_all_srv() {
  if (GetArenaForAllocation() == nullptr && local_all_srv_ != nullptr) {
    delete local_all_srv_;
  }
  local_all_srv_ = nullptr;
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_internal_local_all_srv() const {
  const ::msgpacket::PB_SRV_INFO_ALL* p = local_all_srv_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PB_SRV_INFO_ALL&>(
      ::msgpacket::_PB_SRV_INFO_ALL_default_instance_);
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::local_all_srv() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.local_all_srv)
  return _internal_local_all_srv();
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::unsafe_arena_set_allocated_local_all_srv(
    ::msgpacket::PB_SRV_INFO_ALL* local_all_srv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_all_srv_);
  }
  local_all_srv_ = local_all_srv;
  if (local_all_srv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.local_all_srv)
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::release_local_all_srv() {
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = local_all_srv_;
  local_all_srv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::unsafe_arena_release_local_all_srv() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.local_all_srv)
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = local_all_srv_;
  local_all_srv_ = nullptr;
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_internal_mutable_local_all_srv() {
  
  if (local_all_srv_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PB_SRV_INFO_ALL>(GetArenaForAllocation());
    local_all_srv_ = p;
  }
  return local_all_srv_;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::mutable_local_all_srv() {
  ::msgpacket::PB_SRV_INFO_ALL* _msg = _internal_mutable_local_all_srv();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.local_all_srv)
  return _msg;
}
inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::set_allocated_local_all_srv(::msgpacket::PB_SRV_INFO_ALL* local_all_srv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_all_srv_;
  }
  if (local_all_srv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PB_SRV_INFO_ALL>::GetOwningArena(local_all_srv);
    if (message_arena != submessage_arena) {
      local_all_srv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_all_srv, submessage_arena);
    }
    
  } else {
    
  }
  local_all_srv_ = local_all_srv;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES.local_all_srv)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUESRV_REPORT_BROADCAST

// int64 que_srv_id = 1;
inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::clear_que_srv_id() {
  que_srv_id_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_internal_que_srv_id() const {
  return que_srv_id_;
}
inline int64_t PB_MSG_INTER_QUESRV_REPORT_BROADCAST::que_srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.que_srv_id)
  return _internal_que_srv_id();
}
inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_internal_set_que_srv_id(int64_t value) {
  
  que_srv_id_ = value;
}
inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::set_que_srv_id(int64_t value) {
  _internal_set_que_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.que_srv_id)
}

// .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
inline bool PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_internal_has_local_all_srv() const {
  return this != internal_default_instance() && local_all_srv_ != nullptr;
}
inline bool PB_MSG_INTER_QUESRV_REPORT_BROADCAST::has_local_all_srv() const {
  return _internal_has_local_all_srv();
}
inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::clear_local_all_srv() {
  if (GetArenaForAllocation() == nullptr && local_all_srv_ != nullptr) {
    delete local_all_srv_;
  }
  local_all_srv_ = nullptr;
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_internal_local_all_srv() const {
  const ::msgpacket::PB_SRV_INFO_ALL* p = local_all_srv_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PB_SRV_INFO_ALL&>(
      ::msgpacket::_PB_SRV_INFO_ALL_default_instance_);
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_QUESRV_REPORT_BROADCAST::local_all_srv() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.local_all_srv)
  return _internal_local_all_srv();
}
inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::unsafe_arena_set_allocated_local_all_srv(
    ::msgpacket::PB_SRV_INFO_ALL* local_all_srv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_all_srv_);
  }
  local_all_srv_ = local_all_srv;
  if (local_all_srv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.local_all_srv)
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_REPORT_BROADCAST::release_local_all_srv() {
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = local_all_srv_;
  local_all_srv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_REPORT_BROADCAST::unsafe_arena_release_local_all_srv() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.local_all_srv)
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = local_all_srv_;
  local_all_srv_ = nullptr;
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_internal_mutable_local_all_srv() {
  
  if (local_all_srv_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PB_SRV_INFO_ALL>(GetArenaForAllocation());
    local_all_srv_ = p;
  }
  return local_all_srv_;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_REPORT_BROADCAST::mutable_local_all_srv() {
  ::msgpacket::PB_SRV_INFO_ALL* _msg = _internal_mutable_local_all_srv();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.local_all_srv)
  return _msg;
}
inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::set_allocated_local_all_srv(::msgpacket::PB_SRV_INFO_ALL* local_all_srv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_all_srv_;
  }
  if (local_all_srv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PB_SRV_INFO_ALL>::GetOwningArena(local_all_srv);
    if (message_arena != submessage_arena) {
      local_all_srv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_all_srv, submessage_arena);
    }
    
  } else {
    
  }
  local_all_srv_ = local_all_srv;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.local_all_srv)
}

// .msgpacket.PB_SRV_INFO_ALL all_srv = 3;
inline bool PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_internal_has_all_srv() const {
  return this != internal_default_instance() && all_srv_ != nullptr;
}
inline bool PB_MSG_INTER_QUESRV_REPORT_BROADCAST::has_all_srv() const {
  return _internal_has_all_srv();
}
inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::clear_all_srv() {
  if (GetArenaForAllocation() == nullptr && all_srv_ != nullptr) {
    delete all_srv_;
  }
  all_srv_ = nullptr;
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_internal_all_srv() const {
  const ::msgpacket::PB_SRV_INFO_ALL* p = all_srv_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PB_SRV_INFO_ALL&>(
      ::msgpacket::_PB_SRV_INFO_ALL_default_instance_);
}
inline const ::msgpacket::PB_SRV_INFO_ALL& PB_MSG_INTER_QUESRV_REPORT_BROADCAST::all_srv() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.all_srv)
  return _internal_all_srv();
}
inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::unsafe_arena_set_allocated_all_srv(
    ::msgpacket::PB_SRV_INFO_ALL* all_srv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all_srv_);
  }
  all_srv_ = all_srv;
  if (all_srv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.all_srv)
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_REPORT_BROADCAST::release_all_srv() {
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = all_srv_;
  all_srv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_REPORT_BROADCAST::unsafe_arena_release_all_srv() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.all_srv)
  
  ::msgpacket::PB_SRV_INFO_ALL* temp = all_srv_;
  all_srv_ = nullptr;
  return temp;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_internal_mutable_all_srv() {
  
  if (all_srv_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PB_SRV_INFO_ALL>(GetArenaForAllocation());
    all_srv_ = p;
  }
  return all_srv_;
}
inline ::msgpacket::PB_SRV_INFO_ALL* PB_MSG_INTER_QUESRV_REPORT_BROADCAST::mutable_all_srv() {
  ::msgpacket::PB_SRV_INFO_ALL* _msg = _internal_mutable_all_srv();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.all_srv)
  return _msg;
}
inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::set_allocated_all_srv(::msgpacket::PB_SRV_INFO_ALL* all_srv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete all_srv_;
  }
  if (all_srv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PB_SRV_INFO_ALL>::GetOwningArena(all_srv);
    if (message_arena != submessage_arena) {
      all_srv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_srv, submessage_arena);
    }
    
  } else {
    
  }
  all_srv_ = all_srv;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST.all_srv)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUESRV_NTF_online_offline_ntf

// int64 srv_uuid = 1;
inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::clear_srv_uuid() {
  srv_uuid_ = int64_t{0};
}
inline int64_t PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::_internal_srv_uuid() const {
  return srv_uuid_;
}
inline int64_t PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::srv_uuid() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf.srv_uuid)
  return _internal_srv_uuid();
}
inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::_internal_set_srv_uuid(int64_t value) {
  
  srv_uuid_ = value;
}
inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::set_srv_uuid(int64_t value) {
  _internal_set_srv_uuid(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf.srv_uuid)
}

// int32 srv_type = 2;
inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::clear_srv_type() {
  srv_type_ = 0;
}
inline int32_t PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::_internal_srv_type() const {
  return srv_type_;
}
inline int32_t PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::srv_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf.srv_type)
  return _internal_srv_type();
}
inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::_internal_set_srv_type(int32_t value) {
  
  srv_type_ = value;
}
inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::set_srv_type(int32_t value) {
  _internal_set_srv_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf.srv_type)
}

// bool is_on_line = 3;
inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::clear_is_on_line() {
  is_on_line_ = false;
}
inline bool PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::_internal_is_on_line() const {
  return is_on_line_;
}
inline bool PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::is_on_line() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf.is_on_line)
  return _internal_is_on_line();
}
inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::_internal_set_is_on_line(bool value) {
  
  is_on_line_ = value;
}
inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::set_is_on_line(bool value) {
  _internal_set_is_on_line(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf.is_on_line)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUESRV_NTF

// optional .msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf online_offline = 1;
inline bool PB_MSG_INTER_QUESRV_NTF::_internal_has_online_offline() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || online_offline_ != nullptr);
  return value;
}
inline bool PB_MSG_INTER_QUESRV_NTF::has_online_offline() const {
  return _internal_has_online_offline();
}
inline void PB_MSG_INTER_QUESRV_NTF::clear_online_offline() {
  if (online_offline_ != nullptr) online_offline_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& PB_MSG_INTER_QUESRV_NTF::_internal_online_offline() const {
  const ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* p = online_offline_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf&>(
      ::msgpacket::_PB_MSG_INTER_QUESRV_NTF_online_offline_ntf_default_instance_);
}
inline const ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& PB_MSG_INTER_QUESRV_NTF::online_offline() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline)
  return _internal_online_offline();
}
inline void PB_MSG_INTER_QUESRV_NTF::unsafe_arena_set_allocated_online_offline(
    ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* online_offline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(online_offline_);
  }
  online_offline_ = online_offline;
  if (online_offline) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline)
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* PB_MSG_INTER_QUESRV_NTF::release_online_offline() {
  _has_bits_[0] &= ~0x00000001u;
  ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* temp = online_offline_;
  online_offline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* PB_MSG_INTER_QUESRV_NTF::unsafe_arena_release_online_offline() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline)
  _has_bits_[0] &= ~0x00000001u;
  ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* temp = online_offline_;
  online_offline_ = nullptr;
  return temp;
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* PB_MSG_INTER_QUESRV_NTF::_internal_mutable_online_offline() {
  _has_bits_[0] |= 0x00000001u;
  if (online_offline_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf>(GetArenaForAllocation());
    online_offline_ = p;
  }
  return online_offline_;
}
inline ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* PB_MSG_INTER_QUESRV_NTF::mutable_online_offline() {
  ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* _msg = _internal_mutable_online_offline();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline)
  return _msg;
}
inline void PB_MSG_INTER_QUESRV_NTF::set_allocated_online_offline(::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* online_offline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete online_offline_;
  }
  if (online_offline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf>::GetOwningArena(online_offline);
    if (message_arena != submessage_arena) {
      online_offline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, online_offline, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  online_offline_ = online_offline;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUESRV_GET_SRVTYPE

// int32 srv_type = 1;
inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE::clear_srv_type() {
  srv_type_ = 0;
}
inline int32_t PB_MSG_INTER_QUESRV_GET_SRVTYPE::_internal_srv_type() const {
  return srv_type_;
}
inline int32_t PB_MSG_INTER_QUESRV_GET_SRVTYPE::srv_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE.srv_type)
  return _internal_srv_type();
}
inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE::_internal_set_srv_type(int32_t value) {
  
  srv_type_ = value;
}
inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE::set_srv_type(int32_t value) {
  _internal_set_srv_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE.srv_type)
}

// -------------------------------------------------------------------

// PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES

// int32 srv_type = 1;
inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::clear_srv_type() {
  srv_type_ = 0;
}
inline int32_t PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::_internal_srv_type() const {
  return srv_type_;
}
inline int32_t PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::srv_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES.srv_type)
  return _internal_srv_type();
}
inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::_internal_set_srv_type(int32_t value) {
  
  srv_type_ = value;
}
inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::set_srv_type(int32_t value) {
  _internal_set_srv_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES.srv_type)
}

// repeated .msgpacket.PB_SRV_INFO_ONE arrary_srv = 2;
inline int PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::_internal_arrary_srv_size() const {
  return arrary_srv_.size();
}
inline int PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::arrary_srv_size() const {
  return _internal_arrary_srv_size();
}
inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::clear_arrary_srv() {
  arrary_srv_.Clear();
}
inline ::msgpacket::PB_SRV_INFO_ONE* PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::mutable_arrary_srv(int index) {
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES.arrary_srv)
  return arrary_srv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_SRV_INFO_ONE >*
PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::mutable_arrary_srv() {
  // @@protoc_insertion_point(field_mutable_list:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES.arrary_srv)
  return &arrary_srv_;
}
inline const ::msgpacket::PB_SRV_INFO_ONE& PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::_internal_arrary_srv(int index) const {
  return arrary_srv_.Get(index);
}
inline const ::msgpacket::PB_SRV_INFO_ONE& PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::arrary_srv(int index) const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES.arrary_srv)
  return _internal_arrary_srv(index);
}
inline ::msgpacket::PB_SRV_INFO_ONE* PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::_internal_add_arrary_srv() {
  return arrary_srv_.Add();
}
inline ::msgpacket::PB_SRV_INFO_ONE* PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::add_arrary_srv() {
  ::msgpacket::PB_SRV_INFO_ONE* _add = _internal_add_arrary_srv();
  // @@protoc_insertion_point(field_add:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES.arrary_srv)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_SRV_INFO_ONE >&
PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::arrary_srv() const {
  // @@protoc_insertion_point(field_list:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES.arrary_srv)
  return arrary_srv_;
}

// -------------------------------------------------------------------

// PB_MSG_CENTERSRV_GAMESRV_GETINFO

// -------------------------------------------------------------------

// PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES

// string out_ip = 1;
inline void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::clear_out_ip() {
  out_ip_.ClearToEmpty();
}
inline const std::string& PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::out_ip() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES.out_ip)
  return _internal_out_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::set_out_ip(ArgT0&& arg0, ArgT... args) {
 
 out_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES.out_ip)
}
inline std::string* PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::mutable_out_ip() {
  std::string* _s = _internal_mutable_out_ip();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES.out_ip)
  return _s;
}
inline const std::string& PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::_internal_out_ip() const {
  return out_ip_.Get();
}
inline void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::_internal_set_out_ip(const std::string& value) {
  
  out_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::_internal_mutable_out_ip() {
  
  return out_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::release_out_ip() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES.out_ip)
  return out_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::set_allocated_out_ip(std::string* out_ip) {
  if (out_ip != nullptr) {
    
  } else {
    
  }
  out_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (out_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    out_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES.out_ip)
}

// int32 out_port = 2;
inline void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::clear_out_port() {
  out_port_ = 0;
}
inline int32_t PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::_internal_out_port() const {
  return out_port_;
}
inline int32_t PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::out_port() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES.out_port)
  return _internal_out_port();
}
inline void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::_internal_set_out_port(int32_t value) {
  
  out_port_ = value;
}
inline void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::set_out_port(int32_t value) {
  _internal_set_out_port(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES.out_port)
}

// -------------------------------------------------------------------

// PB_MSG_LOGON

// int64 client_id = 1;
inline void PB_MSG_LOGON::clear_client_id() {
  client_id_ = int64_t{0};
}
inline int64_t PB_MSG_LOGON::_internal_client_id() const {
  return client_id_;
}
inline int64_t PB_MSG_LOGON::client_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_LOGON.client_id)
  return _internal_client_id();
}
inline void PB_MSG_LOGON::_internal_set_client_id(int64_t value) {
  
  client_id_ = value;
}
inline void PB_MSG_LOGON::set_client_id(int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_LOGON.client_id)
}

// -------------------------------------------------------------------

// PB_MSG_LOGON_RES

// int64 client_id = 1;
inline void PB_MSG_LOGON_RES::clear_client_id() {
  client_id_ = int64_t{0};
}
inline int64_t PB_MSG_LOGON_RES::_internal_client_id() const {
  return client_id_;
}
inline int64_t PB_MSG_LOGON_RES::client_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_LOGON_RES.client_id)
  return _internal_client_id();
}
inline void PB_MSG_LOGON_RES::_internal_set_client_id(int64_t value) {
  
  client_id_ = value;
}
inline void PB_MSG_LOGON_RES::set_client_id(int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_LOGON_RES.client_id)
}

// string ip = 2;
inline void PB_MSG_LOGON_RES::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& PB_MSG_LOGON_RES::ip() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_LOGON_RES.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_LOGON_RES::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_LOGON_RES.ip)
}
inline std::string* PB_MSG_LOGON_RES::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_LOGON_RES.ip)
  return _s;
}
inline const std::string& PB_MSG_LOGON_RES::_internal_ip() const {
  return ip_.Get();
}
inline void PB_MSG_LOGON_RES::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_LOGON_RES::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_LOGON_RES::release_ip() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_LOGON_RES.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_LOGON_RES::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_LOGON_RES.ip)
}

// int32 port = 3;
inline void PB_MSG_LOGON_RES::clear_port() {
  port_ = 0;
}
inline int32_t PB_MSG_LOGON_RES::_internal_port() const {
  return port_;
}
inline int32_t PB_MSG_LOGON_RES::port() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_LOGON_RES.port)
  return _internal_port();
}
inline void PB_MSG_LOGON_RES::_internal_set_port(int32_t value) {
  
  port_ = value;
}
inline void PB_MSG_LOGON_RES::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_LOGON_RES.port)
}

// -------------------------------------------------------------------

// PB_MSG_LOGONSRV_CENTERSRV_LOGON

// int64 client_id = 1;
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON::clear_client_id() {
  client_id_ = int64_t{0};
}
inline int64_t PB_MSG_LOGONSRV_CENTERSRV_LOGON::_internal_client_id() const {
  return client_id_;
}
inline int64_t PB_MSG_LOGONSRV_CENTERSRV_LOGON::client_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON.client_id)
  return _internal_client_id();
}
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON::_internal_set_client_id(int64_t value) {
  
  client_id_ = value;
}
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON::set_client_id(int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON.client_id)
}

// -------------------------------------------------------------------

// PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES

// int64 client_id = 1;
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::clear_client_id() {
  client_id_ = int64_t{0};
}
inline int64_t PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_internal_client_id() const {
  return client_id_;
}
inline int64_t PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::client_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.client_id)
  return _internal_client_id();
}
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_internal_set_client_id(int64_t value) {
  
  client_id_ = value;
}
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::set_client_id(int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.client_id)
}

// int64 game_srv_uuid = 2;
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::clear_game_srv_uuid() {
  game_srv_uuid_ = int64_t{0};
}
inline int64_t PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_internal_game_srv_uuid() const {
  return game_srv_uuid_;
}
inline int64_t PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::game_srv_uuid() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.game_srv_uuid)
  return _internal_game_srv_uuid();
}
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_internal_set_game_srv_uuid(int64_t value) {
  
  game_srv_uuid_ = value;
}
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::set_game_srv_uuid(int64_t value) {
  _internal_set_game_srv_uuid(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.game_srv_uuid)
}

// string ip = 3;
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::ip() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.ip)
}
inline std::string* PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.ip)
  return _s;
}
inline const std::string& PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_internal_ip() const {
  return ip_.Get();
}
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::release_ip() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.ip)
}

// int32 port = 4;
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::clear_port() {
  port_ = 0;
}
inline int32_t PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_internal_port() const {
  return port_;
}
inline int32_t PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::port() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.port)
  return _internal_port();
}
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_internal_set_port(int32_t value) {
  
  port_ = value;
}
inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.port)
}

// -------------------------------------------------------------------

// PB_MSG_DBSERVER_READ

// string database_app_name = 1;
inline void PB_MSG_DBSERVER_READ::clear_database_app_name() {
  database_app_name_.ClearToEmpty();
}
inline const std::string& PB_MSG_DBSERVER_READ::database_app_name() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_READ.database_app_name)
  return _internal_database_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_DBSERVER_READ::set_database_app_name(ArgT0&& arg0, ArgT... args) {
 
 database_app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_READ.database_app_name)
}
inline std::string* PB_MSG_DBSERVER_READ::mutable_database_app_name() {
  std::string* _s = _internal_mutable_database_app_name();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_READ.database_app_name)
  return _s;
}
inline const std::string& PB_MSG_DBSERVER_READ::_internal_database_app_name() const {
  return database_app_name_.Get();
}
inline void PB_MSG_DBSERVER_READ::_internal_set_database_app_name(const std::string& value) {
  
  database_app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_READ::_internal_mutable_database_app_name() {
  
  return database_app_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_READ::release_database_app_name() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_DBSERVER_READ.database_app_name)
  return database_app_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_DBSERVER_READ::set_allocated_database_app_name(std::string* database_app_name) {
  if (database_app_name != nullptr) {
    
  } else {
    
  }
  database_app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_app_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (database_app_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    database_app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_DBSERVER_READ.database_app_name)
}

// string table_name = 2;
inline void PB_MSG_DBSERVER_READ::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& PB_MSG_DBSERVER_READ::table_name() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_READ.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_DBSERVER_READ::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_READ.table_name)
}
inline std::string* PB_MSG_DBSERVER_READ::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_READ.table_name)
  return _s;
}
inline const std::string& PB_MSG_DBSERVER_READ::_internal_table_name() const {
  return table_name_.Get();
}
inline void PB_MSG_DBSERVER_READ::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_READ::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_READ::release_table_name() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_DBSERVER_READ.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_DBSERVER_READ::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_DBSERVER_READ.table_name)
}

// bytes key = 3;
inline void PB_MSG_DBSERVER_READ::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& PB_MSG_DBSERVER_READ::key() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_READ.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_DBSERVER_READ::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_READ.key)
}
inline std::string* PB_MSG_DBSERVER_READ::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_READ.key)
  return _s;
}
inline const std::string& PB_MSG_DBSERVER_READ::_internal_key() const {
  return key_.Get();
}
inline void PB_MSG_DBSERVER_READ::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_READ::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_READ::release_key() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_DBSERVER_READ.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_DBSERVER_READ::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_DBSERVER_READ.key)
}

// -------------------------------------------------------------------

// PB_MSG_DBSERVER_READ_RES

// string database_app_name = 1;
inline void PB_MSG_DBSERVER_READ_RES::clear_database_app_name() {
  database_app_name_.ClearToEmpty();
}
inline const std::string& PB_MSG_DBSERVER_READ_RES::database_app_name() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_READ_RES.database_app_name)
  return _internal_database_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_DBSERVER_READ_RES::set_database_app_name(ArgT0&& arg0, ArgT... args) {
 
 database_app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_READ_RES.database_app_name)
}
inline std::string* PB_MSG_DBSERVER_READ_RES::mutable_database_app_name() {
  std::string* _s = _internal_mutable_database_app_name();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_READ_RES.database_app_name)
  return _s;
}
inline const std::string& PB_MSG_DBSERVER_READ_RES::_internal_database_app_name() const {
  return database_app_name_.Get();
}
inline void PB_MSG_DBSERVER_READ_RES::_internal_set_database_app_name(const std::string& value) {
  
  database_app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_READ_RES::_internal_mutable_database_app_name() {
  
  return database_app_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_READ_RES::release_database_app_name() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_DBSERVER_READ_RES.database_app_name)
  return database_app_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_DBSERVER_READ_RES::set_allocated_database_app_name(std::string* database_app_name) {
  if (database_app_name != nullptr) {
    
  } else {
    
  }
  database_app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_app_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (database_app_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    database_app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_DBSERVER_READ_RES.database_app_name)
}

// string table_name = 2;
inline void PB_MSG_DBSERVER_READ_RES::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& PB_MSG_DBSERVER_READ_RES::table_name() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_READ_RES.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_DBSERVER_READ_RES::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_READ_RES.table_name)
}
inline std::string* PB_MSG_DBSERVER_READ_RES::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_READ_RES.table_name)
  return _s;
}
inline const std::string& PB_MSG_DBSERVER_READ_RES::_internal_table_name() const {
  return table_name_.Get();
}
inline void PB_MSG_DBSERVER_READ_RES::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_READ_RES::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_READ_RES::release_table_name() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_DBSERVER_READ_RES.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_DBSERVER_READ_RES::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_DBSERVER_READ_RES.table_name)
}

// repeated bytes record = 3;
inline int PB_MSG_DBSERVER_READ_RES::_internal_record_size() const {
  return record_.size();
}
inline int PB_MSG_DBSERVER_READ_RES::record_size() const {
  return _internal_record_size();
}
inline void PB_MSG_DBSERVER_READ_RES::clear_record() {
  record_.Clear();
}
inline std::string* PB_MSG_DBSERVER_READ_RES::add_record() {
  std::string* _s = _internal_add_record();
  // @@protoc_insertion_point(field_add_mutable:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
  return _s;
}
inline const std::string& PB_MSG_DBSERVER_READ_RES::_internal_record(int index) const {
  return record_.Get(index);
}
inline const std::string& PB_MSG_DBSERVER_READ_RES::record(int index) const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
  return _internal_record(index);
}
inline std::string* PB_MSG_DBSERVER_READ_RES::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
  return record_.Mutable(index);
}
inline void PB_MSG_DBSERVER_READ_RES::set_record(int index, const std::string& value) {
  record_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
}
inline void PB_MSG_DBSERVER_READ_RES::set_record(int index, std::string&& value) {
  record_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
}
inline void PB_MSG_DBSERVER_READ_RES::set_record(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  record_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
}
inline void PB_MSG_DBSERVER_READ_RES::set_record(int index, const void* value, size_t size) {
  record_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
}
inline std::string* PB_MSG_DBSERVER_READ_RES::_internal_add_record() {
  return record_.Add();
}
inline void PB_MSG_DBSERVER_READ_RES::add_record(const std::string& value) {
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
}
inline void PB_MSG_DBSERVER_READ_RES::add_record(std::string&& value) {
  record_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
}
inline void PB_MSG_DBSERVER_READ_RES::add_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
}
inline void PB_MSG_DBSERVER_READ_RES::add_record(const void* value, size_t size) {
  record_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PB_MSG_DBSERVER_READ_RES::record() const {
  // @@protoc_insertion_point(field_list:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
  return record_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PB_MSG_DBSERVER_READ_RES::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:msgpacket.PB_MSG_DBSERVER_READ_RES.record)
  return &record_;
}

// -------------------------------------------------------------------

// PB_MSG_DBSERVER_WRITE_WRITE_RECORD

// bytes key = 3;
inline void PB_MSG_DBSERVER_WRITE_WRITE_RECORD::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& PB_MSG_DBSERVER_WRITE_WRITE_RECORD::key() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_DBSERVER_WRITE_WRITE_RECORD::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD.key)
}
inline std::string* PB_MSG_DBSERVER_WRITE_WRITE_RECORD::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD.key)
  return _s;
}
inline const std::string& PB_MSG_DBSERVER_WRITE_WRITE_RECORD::_internal_key() const {
  return key_.Get();
}
inline void PB_MSG_DBSERVER_WRITE_WRITE_RECORD::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_WRITE_WRITE_RECORD::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_WRITE_WRITE_RECORD::release_key() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_DBSERVER_WRITE_WRITE_RECORD::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD.key)
}

// bytes record = 4;
inline void PB_MSG_DBSERVER_WRITE_WRITE_RECORD::clear_record() {
  record_.ClearToEmpty();
}
inline const std::string& PB_MSG_DBSERVER_WRITE_WRITE_RECORD::record() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD.record)
  return _internal_record();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_DBSERVER_WRITE_WRITE_RECORD::set_record(ArgT0&& arg0, ArgT... args) {
 
 record_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD.record)
}
inline std::string* PB_MSG_DBSERVER_WRITE_WRITE_RECORD::mutable_record() {
  std::string* _s = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD.record)
  return _s;
}
inline const std::string& PB_MSG_DBSERVER_WRITE_WRITE_RECORD::_internal_record() const {
  return record_.Get();
}
inline void PB_MSG_DBSERVER_WRITE_WRITE_RECORD::_internal_set_record(const std::string& value) {
  
  record_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_WRITE_WRITE_RECORD::_internal_mutable_record() {
  
  return record_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_WRITE_WRITE_RECORD::release_record() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD.record)
  return record_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_DBSERVER_WRITE_WRITE_RECORD::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (record_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD.record)
}

// -------------------------------------------------------------------

// PB_MSG_DBSERVER_WRITE

// string database_app_name = 1;
inline void PB_MSG_DBSERVER_WRITE::clear_database_app_name() {
  database_app_name_.ClearToEmpty();
}
inline const std::string& PB_MSG_DBSERVER_WRITE::database_app_name() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_WRITE.database_app_name)
  return _internal_database_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_DBSERVER_WRITE::set_database_app_name(ArgT0&& arg0, ArgT... args) {
 
 database_app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_WRITE.database_app_name)
}
inline std::string* PB_MSG_DBSERVER_WRITE::mutable_database_app_name() {
  std::string* _s = _internal_mutable_database_app_name();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_WRITE.database_app_name)
  return _s;
}
inline const std::string& PB_MSG_DBSERVER_WRITE::_internal_database_app_name() const {
  return database_app_name_.Get();
}
inline void PB_MSG_DBSERVER_WRITE::_internal_set_database_app_name(const std::string& value) {
  
  database_app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_WRITE::_internal_mutable_database_app_name() {
  
  return database_app_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_WRITE::release_database_app_name() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_DBSERVER_WRITE.database_app_name)
  return database_app_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_DBSERVER_WRITE::set_allocated_database_app_name(std::string* database_app_name) {
  if (database_app_name != nullptr) {
    
  } else {
    
  }
  database_app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), database_app_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (database_app_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    database_app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_DBSERVER_WRITE.database_app_name)
}

// string table_name = 2;
inline void PB_MSG_DBSERVER_WRITE::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& PB_MSG_DBSERVER_WRITE::table_name() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_WRITE.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PB_MSG_DBSERVER_WRITE::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_WRITE.table_name)
}
inline std::string* PB_MSG_DBSERVER_WRITE::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_WRITE.table_name)
  return _s;
}
inline const std::string& PB_MSG_DBSERVER_WRITE::_internal_table_name() const {
  return table_name_.Get();
}
inline void PB_MSG_DBSERVER_WRITE::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_WRITE::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PB_MSG_DBSERVER_WRITE::release_table_name() {
  // @@protoc_insertion_point(field_release:msgpacket.PB_MSG_DBSERVER_WRITE.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PB_MSG_DBSERVER_WRITE::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.PB_MSG_DBSERVER_WRITE.table_name)
}

// repeated .msgpacket.PB_MSG_DBSERVER_WRITE.WRITE_RECORD wr_rcd = 3;
inline int PB_MSG_DBSERVER_WRITE::_internal_wr_rcd_size() const {
  return wr_rcd_.size();
}
inline int PB_MSG_DBSERVER_WRITE::wr_rcd_size() const {
  return _internal_wr_rcd_size();
}
inline void PB_MSG_DBSERVER_WRITE::clear_wr_rcd() {
  wr_rcd_.Clear();
}
inline ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD* PB_MSG_DBSERVER_WRITE::mutable_wr_rcd(int index) {
  // @@protoc_insertion_point(field_mutable:msgpacket.PB_MSG_DBSERVER_WRITE.wr_rcd)
  return wr_rcd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD >*
PB_MSG_DBSERVER_WRITE::mutable_wr_rcd() {
  // @@protoc_insertion_point(field_mutable_list:msgpacket.PB_MSG_DBSERVER_WRITE.wr_rcd)
  return &wr_rcd_;
}
inline const ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD& PB_MSG_DBSERVER_WRITE::_internal_wr_rcd(int index) const {
  return wr_rcd_.Get(index);
}
inline const ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD& PB_MSG_DBSERVER_WRITE::wr_rcd(int index) const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_WRITE.wr_rcd)
  return _internal_wr_rcd(index);
}
inline ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD* PB_MSG_DBSERVER_WRITE::_internal_add_wr_rcd() {
  return wr_rcd_.Add();
}
inline ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD* PB_MSG_DBSERVER_WRITE::add_wr_rcd() {
  ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD* _add = _internal_add_wr_rcd();
  // @@protoc_insertion_point(field_add:msgpacket.PB_MSG_DBSERVER_WRITE.wr_rcd)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PB_MSG_DBSERVER_WRITE_WRITE_RECORD >&
PB_MSG_DBSERVER_WRITE::wr_rcd() const {
  // @@protoc_insertion_point(field_list:msgpacket.PB_MSG_DBSERVER_WRITE.wr_rcd)
  return wr_rcd_;
}

// -------------------------------------------------------------------

// PB_MSG_DBSERVER_WRITE_RES

// .msgpacket.PB_RESPONSE_CODE res = 1;
inline void PB_MSG_DBSERVER_WRITE_RES::clear_res() {
  res_ = 0;
}
inline ::msgpacket::PB_RESPONSE_CODE PB_MSG_DBSERVER_WRITE_RES::_internal_res() const {
  return static_cast< ::msgpacket::PB_RESPONSE_CODE >(res_);
}
inline ::msgpacket::PB_RESPONSE_CODE PB_MSG_DBSERVER_WRITE_RES::res() const {
  // @@protoc_insertion_point(field_get:msgpacket.PB_MSG_DBSERVER_WRITE_RES.res)
  return _internal_res();
}
inline void PB_MSG_DBSERVER_WRITE_RES::_internal_set_res(::msgpacket::PB_RESPONSE_CODE value) {
  
  res_ = value;
}
inline void PB_MSG_DBSERVER_WRITE_RES::set_res(::msgpacket::PB_RESPONSE_CODE value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:msgpacket.PB_MSG_DBSERVER_WRITE_RES.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgpacket

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msginter_2eproto
