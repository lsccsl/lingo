// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msginter.proto

#include "msginter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace msgpacket {
constexpr PB_SRV_INFO_ONE::PB_SRV_INFO_ONE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_uuid_(int64_t{0})
  , srv_type_(0){}
struct PB_SRV_INFO_ONEDefaultTypeInternal {
  constexpr PB_SRV_INFO_ONEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_SRV_INFO_ONEDefaultTypeInternal() {}
  union {
    PB_SRV_INFO_ONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_SRV_INFO_ONEDefaultTypeInternal _PB_SRV_INFO_ONE_default_instance_;
constexpr PB_SRV_INFO_ALL::PB_SRV_INFO_ALL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_srv_(){}
struct PB_SRV_INFO_ALLDefaultTypeInternal {
  constexpr PB_SRV_INFO_ALLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_SRV_INFO_ALLDefaultTypeInternal() {}
  union {
    PB_SRV_INFO_ALL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_SRV_INFO_ALLDefaultTypeInternal _PB_SRV_INFO_ALL_default_instance_;
constexpr PB_MSG_INTER_QUECENTER_REGISTER::PB_MSG_INTER_QUECENTER_REGISTER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , local_all_srv_(nullptr)
  , que_srv_id_(int64_t{0})
  , port_(0){}
struct PB_MSG_INTER_QUECENTER_REGISTERDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUECENTER_REGISTERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUECENTER_REGISTERDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUECENTER_REGISTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUECENTER_REGISTERDefaultTypeInternal _PB_MSG_INTER_QUECENTER_REGISTER_default_instance_;
constexpr PB_MSG_INTER_QUESRV_INFO::PB_MSG_INTER_QUESRV_INFO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , que_srv_id_(int64_t{0})
  , port_(0){}
struct PB_MSG_INTER_QUESRV_INFODefaultTypeInternal {
  constexpr PB_MSG_INTER_QUESRV_INFODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUESRV_INFODefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUESRV_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUESRV_INFODefaultTypeInternal _PB_MSG_INTER_QUESRV_INFO_default_instance_;
constexpr PB_MSG_INTER_QUECENTER_REGISTER_RES::PB_MSG_INTER_QUECENTER_REGISTER_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : que_srv_info_()
  , que_srv_id_(int64_t{0}){}
struct PB_MSG_INTER_QUECENTER_REGISTER_RESDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUECENTER_REGISTER_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUECENTER_REGISTER_RESDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUECENTER_REGISTER_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUECENTER_REGISTER_RESDefaultTypeInternal _PB_MSG_INTER_QUECENTER_REGISTER_RES_default_instance_;
constexpr PB_MSG_INTER_QUECENTER_OFFLINE_NTF::PB_MSG_INTER_QUECENTER_OFFLINE_NTF(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : que_srv_id_(int64_t{0}){}
struct PB_MSG_INTER_QUECENTER_OFFLINE_NTFDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUECENTER_OFFLINE_NTFDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUECENTER_OFFLINE_NTFDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUECENTER_OFFLINE_NTF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUECENTER_OFFLINE_NTFDefaultTypeInternal _PB_MSG_INTER_QUECENTER_OFFLINE_NTF_default_instance_;
constexpr PB_MSG_INTER_QUECENTER_ONLINE_NTF::PB_MSG_INTER_QUECENTER_ONLINE_NTF(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : que_srv_info_(nullptr){}
struct PB_MSG_INTER_QUECENTER_ONLINE_NTFDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUECENTER_ONLINE_NTFDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUECENTER_ONLINE_NTFDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUECENTER_ONLINE_NTF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUECENTER_ONLINE_NTFDefaultTypeInternal _PB_MSG_INTER_QUECENTER_ONLINE_NTF_default_instance_;
constexpr PB_MSG_INTER_QUESRV_CONNECT::PB_MSG_INTER_QUESRV_CONNECT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_all_srv_(nullptr)
  , que_srv_id_(int64_t{0}){}
struct PB_MSG_INTER_QUESRV_CONNECTDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUESRV_CONNECTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUESRV_CONNECTDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUESRV_CONNECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUESRV_CONNECTDefaultTypeInternal _PB_MSG_INTER_QUESRV_CONNECT_default_instance_;
constexpr PB_MSG_INTER_QUESRV_CONNECT_RES::PB_MSG_INTER_QUESRV_CONNECT_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_all_srv_(nullptr)
  , que_srv_id_(int64_t{0}){}
struct PB_MSG_INTER_QUESRV_CONNECT_RESDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUESRV_CONNECT_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUESRV_CONNECT_RESDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUESRV_CONNECT_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUESRV_CONNECT_RESDefaultTypeInternal _PB_MSG_INTER_QUESRV_CONNECT_RES_default_instance_;
constexpr PB_MSG_INTER_QUECENTER_HEARTBEAT::PB_MSG_INTER_QUECENTER_HEARTBEAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : que_srv_id_(int64_t{0}){}
struct PB_MSG_INTER_QUECENTER_HEARTBEATDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUECENTER_HEARTBEATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUECENTER_HEARTBEATDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUECENTER_HEARTBEAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUECENTER_HEARTBEATDefaultTypeInternal _PB_MSG_INTER_QUECENTER_HEARTBEAT_default_instance_;
constexpr PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : que_srv_id_(int64_t{0}){}
struct PB_MSG_INTER_QUECENTER_HEARTBEAT_RESDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUECENTER_HEARTBEAT_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUECENTER_HEARTBEAT_RESDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUECENTER_HEARTBEAT_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUECENTER_HEARTBEAT_RESDefaultTypeInternal _PB_MSG_INTER_QUECENTER_HEARTBEAT_RES_default_instance_;
constexpr PB_MSG_INTER_QUESRV_HEARTBEAT::PB_MSG_INTER_QUESRV_HEARTBEAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : que_srv_id_(int64_t{0}){}
struct PB_MSG_INTER_QUESRV_HEARTBEATDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUESRV_HEARTBEATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUESRV_HEARTBEATDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUESRV_HEARTBEAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUESRV_HEARTBEATDefaultTypeInternal _PB_MSG_INTER_QUESRV_HEARTBEAT_default_instance_;
constexpr PB_MSG_INTER_QUESRV_HEARTBEAT_RES::PB_MSG_INTER_QUESRV_HEARTBEAT_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : que_srv_id_(int64_t{0}){}
struct PB_MSG_INTER_QUESRV_HEARTBEAT_RESDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUESRV_HEARTBEAT_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUESRV_HEARTBEAT_RESDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUESRV_HEARTBEAT_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUESRV_HEARTBEAT_RESDefaultTypeInternal _PB_MSG_INTER_QUESRV_HEARTBEAT_RES_default_instance_;
constexpr PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_uuid_(int64_t{0})
  , srv_type_(0){}
struct PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTERDefaultTypeInternal {
  constexpr PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTERDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTERDefaultTypeInternal _PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_default_instance_;
constexpr PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : que_srv_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , srv_uuid_(int64_t{0})
  , que_srv_id_(int64_t{0})
  , res_(0)

  , que_srv_port_(0){}
struct PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RESDefaultTypeInternal {
  constexpr PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RESDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RESDefaultTypeInternal _PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES_default_instance_;
constexpr PB_MSG_INTER_CLISRV_HEARTBEAT::PB_MSG_INTER_CLISRV_HEARTBEAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_uuid_(int64_t{0}){}
struct PB_MSG_INTER_CLISRV_HEARTBEATDefaultTypeInternal {
  constexpr PB_MSG_INTER_CLISRV_HEARTBEATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_CLISRV_HEARTBEATDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_CLISRV_HEARTBEAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_CLISRV_HEARTBEATDefaultTypeInternal _PB_MSG_INTER_CLISRV_HEARTBEAT_default_instance_;
constexpr PB_MSG_INTER_CLISRV_HEARTBEAT_RES::PB_MSG_INTER_CLISRV_HEARTBEAT_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_uuid_(int64_t{0}){}
struct PB_MSG_INTER_CLISRV_HEARTBEAT_RESDefaultTypeInternal {
  constexpr PB_MSG_INTER_CLISRV_HEARTBEAT_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_CLISRV_HEARTBEAT_RESDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_CLISRV_HEARTBEAT_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_CLISRV_HEARTBEAT_RESDefaultTypeInternal _PB_MSG_INTER_CLISRV_HEARTBEAT_RES_default_instance_;
constexpr PB_MSG_INTER_MSG::PB_MSG_INTER_MSG(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_bin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , srv_uuid_from_(int64_t{0})
  , srv_uuid_to_(int64_t{0})
  , srv_type_(0)
  , msg_type_(0)
  , msg_id_(int64_t{0})
  , msg_seq_(int64_t{0})
  , timestamp_(int64_t{0})
  , timestamp_arrive_(int64_t{0})
  , timeout_wait_(int64_t{0}){}
struct PB_MSG_INTER_MSGDefaultTypeInternal {
  constexpr PB_MSG_INTER_MSGDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_MSGDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_MSG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_MSGDefaultTypeInternal _PB_MSG_INTER_MSG_default_instance_;
constexpr PB_MSG_INTER_MSG_RES::PB_MSG_INTER_MSG_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_bin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , srv_uuid_from_(int64_t{0})
  , srv_uuid_to_(int64_t{0})
  , srv_type_(0)
  , msg_type_(0)
  , msg_id_(int64_t{0})
  , msg_seq_(int64_t{0})
  , timestamp_(int64_t{0})
  , timestamp_arrive_(int64_t{0})
  , timeout_wait_(int64_t{0})
  , res_(0)
{}
struct PB_MSG_INTER_MSG_RESDefaultTypeInternal {
  constexpr PB_MSG_INTER_MSG_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_MSG_RESDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_MSG_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_MSG_RESDefaultTypeInternal _PB_MSG_INTER_MSG_RES_default_instance_;
constexpr PB_MSG_INTER_CLISRV_REG_TO_QUE::PB_MSG_INTER_CLISRV_REG_TO_QUE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_uuid_(int64_t{0})
  , srv_type_(0){}
struct PB_MSG_INTER_CLISRV_REG_TO_QUEDefaultTypeInternal {
  constexpr PB_MSG_INTER_CLISRV_REG_TO_QUEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_CLISRV_REG_TO_QUEDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_CLISRV_REG_TO_QUE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_CLISRV_REG_TO_QUEDefaultTypeInternal _PB_MSG_INTER_CLISRV_REG_TO_QUE_default_instance_;
constexpr PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : all_srv_(nullptr)
  , local_all_srv_(nullptr)
  , srv_uuid_(int64_t{0})
  , srv_type_(0){}
struct PB_MSG_INTER_CLISRV_REG_TO_QUE_RESDefaultTypeInternal {
  constexpr PB_MSG_INTER_CLISRV_REG_TO_QUE_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_CLISRV_REG_TO_QUE_RESDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_CLISRV_REG_TO_QUE_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_CLISRV_REG_TO_QUE_RESDefaultTypeInternal _PB_MSG_INTER_CLISRV_REG_TO_QUE_RES_default_instance_;
constexpr PB_MSG_INTER_QUESRV_REPORT_BROADCAST::PB_MSG_INTER_QUESRV_REPORT_BROADCAST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_all_srv_(nullptr)
  , all_srv_(nullptr)
  , que_srv_id_(int64_t{0}){}
struct PB_MSG_INTER_QUESRV_REPORT_BROADCASTDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUESRV_REPORT_BROADCASTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUESRV_REPORT_BROADCASTDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUESRV_REPORT_BROADCAST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUESRV_REPORT_BROADCASTDefaultTypeInternal _PB_MSG_INTER_QUESRV_REPORT_BROADCAST_default_instance_;
constexpr PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_uuid_(int64_t{0})
  , srv_type_(0)
  , is_on_line_(false){}
struct PB_MSG_INTER_QUESRV_NTF_online_offline_ntfDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUESRV_NTF_online_offline_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUESRV_NTF_online_offline_ntfDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUESRV_NTF_online_offline_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUESRV_NTF_online_offline_ntfDefaultTypeInternal _PB_MSG_INTER_QUESRV_NTF_online_offline_ntf_default_instance_;
constexpr PB_MSG_INTER_QUESRV_NTF::PB_MSG_INTER_QUESRV_NTF(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : online_offline_(nullptr){}
struct PB_MSG_INTER_QUESRV_NTFDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUESRV_NTFDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUESRV_NTFDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUESRV_NTF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUESRV_NTFDefaultTypeInternal _PB_MSG_INTER_QUESRV_NTF_default_instance_;
constexpr PB_MSG_INTER_QUESRV_GET_SRVTYPE::PB_MSG_INTER_QUESRV_GET_SRVTYPE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_type_(0){}
struct PB_MSG_INTER_QUESRV_GET_SRVTYPEDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUESRV_GET_SRVTYPEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUESRV_GET_SRVTYPEDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUESRV_GET_SRVTYPE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUESRV_GET_SRVTYPEDefaultTypeInternal _PB_MSG_INTER_QUESRV_GET_SRVTYPE_default_instance_;
constexpr PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arrary_srv_()
  , srv_type_(0){}
struct PB_MSG_INTER_QUESRV_GET_SRVTYPE_RESDefaultTypeInternal {
  constexpr PB_MSG_INTER_QUESRV_GET_SRVTYPE_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_INTER_QUESRV_GET_SRVTYPE_RESDefaultTypeInternal() {}
  union {
    PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_INTER_QUESRV_GET_SRVTYPE_RESDefaultTypeInternal _PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES_default_instance_;
constexpr PB_MSG_CENTERSRV_GAMESRV_GETINFO::PB_MSG_CENTERSRV_GAMESRV_GETINFO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PB_MSG_CENTERSRV_GAMESRV_GETINFODefaultTypeInternal {
  constexpr PB_MSG_CENTERSRV_GAMESRV_GETINFODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_CENTERSRV_GAMESRV_GETINFODefaultTypeInternal() {}
  union {
    PB_MSG_CENTERSRV_GAMESRV_GETINFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_CENTERSRV_GAMESRV_GETINFODefaultTypeInternal _PB_MSG_CENTERSRV_GAMESRV_GETINFO_default_instance_;
constexpr PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : out_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , out_port_(0){}
struct PB_MSG_CENTERSRV_GAMESRV_GETINFO_RESDefaultTypeInternal {
  constexpr PB_MSG_CENTERSRV_GAMESRV_GETINFO_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_CENTERSRV_GAMESRV_GETINFO_RESDefaultTypeInternal() {}
  union {
    PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_CENTERSRV_GAMESRV_GETINFO_RESDefaultTypeInternal _PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES_default_instance_;
constexpr PB_MSG_LOGON::PB_MSG_LOGON(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(int64_t{0}){}
struct PB_MSG_LOGONDefaultTypeInternal {
  constexpr PB_MSG_LOGONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_LOGONDefaultTypeInternal() {}
  union {
    PB_MSG_LOGON _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_LOGONDefaultTypeInternal _PB_MSG_LOGON_default_instance_;
constexpr PB_MSG_LOGON_RES::PB_MSG_LOGON_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_id_(int64_t{0})
  , port_(0){}
struct PB_MSG_LOGON_RESDefaultTypeInternal {
  constexpr PB_MSG_LOGON_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_LOGON_RESDefaultTypeInternal() {}
  union {
    PB_MSG_LOGON_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_LOGON_RESDefaultTypeInternal _PB_MSG_LOGON_RES_default_instance_;
constexpr PB_MSG_LOGONSRV_CENTERSRV_LOGON::PB_MSG_LOGONSRV_CENTERSRV_LOGON(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(int64_t{0}){}
struct PB_MSG_LOGONSRV_CENTERSRV_LOGONDefaultTypeInternal {
  constexpr PB_MSG_LOGONSRV_CENTERSRV_LOGONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_LOGONSRV_CENTERSRV_LOGONDefaultTypeInternal() {}
  union {
    PB_MSG_LOGONSRV_CENTERSRV_LOGON _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_LOGONSRV_CENTERSRV_LOGONDefaultTypeInternal _PB_MSG_LOGONSRV_CENTERSRV_LOGON_default_instance_;
constexpr PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_id_(int64_t{0})
  , game_srv_uuid_(int64_t{0})
  , port_(0){}
struct PB_MSG_LOGONSRV_CENTERSRV_LOGON_RESDefaultTypeInternal {
  constexpr PB_MSG_LOGONSRV_CENTERSRV_LOGON_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PB_MSG_LOGONSRV_CENTERSRV_LOGON_RESDefaultTypeInternal() {}
  union {
    PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PB_MSG_LOGONSRV_CENTERSRV_LOGON_RESDefaultTypeInternal _PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES_default_instance_;
}  // namespace msgpacket
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msginter_2eproto[32];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msginter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msginter_2eproto = nullptr;

const uint32_t TableStruct_msginter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_SRV_INFO_ONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_SRV_INFO_ONE, srv_uuid_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_SRV_INFO_ONE, srv_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_SRV_INFO_ALL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_SRV_INFO_ALL, array_srv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER, que_srv_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER, ip_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER, port_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER, local_all_srv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_INFO, que_srv_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_INFO, ip_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_INFO, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER_RES, que_srv_info_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER_RES, que_srv_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_OFFLINE_NTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_OFFLINE_NTF, que_srv_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_ONLINE_NTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_ONLINE_NTF, que_srv_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_CONNECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_CONNECT, que_srv_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_CONNECT, local_all_srv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_CONNECT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_CONNECT_RES, que_srv_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_CONNECT_RES, local_all_srv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT, que_srv_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES, que_srv_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT, que_srv_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT_RES, que_srv_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER, srv_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER, srv_uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES, res_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES, srv_uuid_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES, que_srv_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES, que_srv_ip_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES, que_srv_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT, srv_uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT_RES, srv_uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, srv_uuid_from_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, srv_uuid_to_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, srv_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, msg_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, msg_bin_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, msg_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, msg_seq_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, timestamp_arrive_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG, timeout_wait_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, srv_uuid_from_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, srv_uuid_to_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, srv_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, msg_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, msg_bin_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, msg_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, msg_seq_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, timestamp_arrive_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, timeout_wait_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_MSG_RES, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE, srv_uuid_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE, srv_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES, srv_uuid_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES, srv_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES, all_srv_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES, local_all_srv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_REPORT_BROADCAST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_REPORT_BROADCAST, que_srv_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_REPORT_BROADCAST, local_all_srv_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_REPORT_BROADCAST, all_srv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf, srv_uuid_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf, srv_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf, is_on_line_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_NTF, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_NTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_NTF, online_offline_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE, srv_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES, srv_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES, arrary_srv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES, out_ip_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES, out_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGON, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGON, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGON_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGON_RES, client_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGON_RES, ip_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGON_RES, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES, client_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES, game_srv_uuid_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES, ip_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES, port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msgpacket::PB_SRV_INFO_ONE)},
  { 8, -1, -1, sizeof(::msgpacket::PB_SRV_INFO_ALL)},
  { 15, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER)},
  { 25, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUESRV_INFO)},
  { 34, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER_RES)},
  { 42, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUECENTER_OFFLINE_NTF)},
  { 49, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUECENTER_ONLINE_NTF)},
  { 56, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUESRV_CONNECT)},
  { 64, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUESRV_CONNECT_RES)},
  { 72, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT)},
  { 79, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)},
  { 86, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT)},
  { 93, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT_RES)},
  { 100, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)},
  { 108, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)},
  { 119, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT)},
  { 126, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT_RES)},
  { 133, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_MSG)},
  { 149, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_MSG_RES)},
  { 166, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE)},
  { 174, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)},
  { 184, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUESRV_REPORT_BROADCAST)},
  { 193, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf)},
  { 202, 209, -1, sizeof(::msgpacket::PB_MSG_INTER_QUESRV_NTF)},
  { 210, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE)},
  { 217, -1, -1, sizeof(::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)},
  { 225, -1, -1, sizeof(::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO)},
  { 231, -1, -1, sizeof(::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)},
  { 239, -1, -1, sizeof(::msgpacket::PB_MSG_LOGON)},
  { 246, -1, -1, sizeof(::msgpacket::PB_MSG_LOGON_RES)},
  { 255, -1, -1, sizeof(::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON)},
  { 262, -1, -1, sizeof(::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_SRV_INFO_ONE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_SRV_INFO_ALL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUECENTER_REGISTER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUESRV_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUECENTER_REGISTER_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUECENTER_OFFLINE_NTF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUECENTER_ONLINE_NTF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUESRV_CONNECT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUESRV_CONNECT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUECENTER_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUECENTER_HEARTBEAT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUESRV_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUESRV_HEARTBEAT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_CLISRV_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_CLISRV_HEARTBEAT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_MSG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_MSG_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_CLISRV_REG_TO_QUE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_CLISRV_REG_TO_QUE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUESRV_REPORT_BROADCAST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUESRV_NTF_online_offline_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUESRV_NTF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUESRV_GET_SRVTYPE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_CENTERSRV_GAMESRV_GETINFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_LOGON_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_LOGON_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_LOGONSRV_CENTERSRV_LOGON_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES_default_instance_),
};

const char descriptor_table_protodef_msginter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016msginter.proto\022\tmsgpacket\032\014msgdef.prot"
  "o\"5\n\017PB_SRV_INFO_ONE\022\020\n\010srv_uuid\030\001 \001(\003\022\020"
  "\n\010srv_type\030\002 \001(\005\"@\n\017PB_SRV_INFO_ALL\022-\n\ta"
  "rray_srv\030\001 \003(\0132\032.msgpacket.PB_SRV_INFO_O"
  "NE\"\202\001\n\037PB_MSG_INTER_QUECENTER_REGISTER\022\022"
  "\n\nque_srv_id\030\001 \001(\003\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003"
  " \001(\005\0221\n\rlocal_all_srv\030\004 \001(\0132\032.msgpacket."
  "PB_SRV_INFO_ALL\"H\n\030PB_MSG_INTER_QUESRV_I"
  "NFO\022\022\n\nque_srv_id\030\001 \001(\003\022\n\n\002ip\030\002 \001(\t\022\014\n\004p"
  "ort\030\003 \001(\005\"t\n#PB_MSG_INTER_QUECENTER_REGI"
  "STER_RES\0229\n\014que_srv_info\030\001 \003(\0132#.msgpack"
  "et.PB_MSG_INTER_QUESRV_INFO\022\022\n\nque_srv_i"
  "d\030\002 \001(\003\"8\n\"PB_MSG_INTER_QUECENTER_OFFLIN"
  "E_NTF\022\022\n\nque_srv_id\030\001 \001(\003\"^\n!PB_MSG_INTE"
  "R_QUECENTER_ONLINE_NTF\0229\n\014que_srv_info\030\001"
  " \001(\0132#.msgpacket.PB_MSG_INTER_QUESRV_INF"
  "O\"d\n\033PB_MSG_INTER_QUESRV_CONNECT\022\022\n\nque_"
  "srv_id\030\001 \001(\003\0221\n\rlocal_all_srv\030\002 \001(\0132\032.ms"
  "gpacket.PB_SRV_INFO_ALL\"h\n\037PB_MSG_INTER_"
  "QUESRV_CONNECT_RES\022\022\n\nque_srv_id\030\001 \001(\003\0221"
  "\n\rlocal_all_srv\030\002 \001(\0132\032.msgpacket.PB_SRV"
  "_INFO_ALL\"6\n PB_MSG_INTER_QUECENTER_HEAR"
  "TBEAT\022\022\n\nque_srv_id\030\001 \001(\003\":\n$PB_MSG_INTE"
  "R_QUECENTER_HEARTBEAT_RES\022\022\n\nque_srv_id\030"
  "\001 \001(\003\"3\n\035PB_MSG_INTER_QUESRV_HEARTBEAT\022\022"
  "\n\nque_srv_id\030\001 \001(\003\"7\n!PB_MSG_INTER_QUESR"
  "V_HEARTBEAT_RES\022\022\n\nque_srv_id\030\001 \001(\003\"K\n%P"
  "B_MSG_INTER_CLISRV_REG_MSGQUE_CENTER\022\020\n\010"
  "srv_type\030\001 \001(\005\022\020\n\010srv_uuid\030\002 \001(\003\"\245\001\n)PB_"
  "MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES\022("
  "\n\003res\030\001 \001(\0162\033.msgpacket.PB_RESPONSE_CODE"
  "\022\020\n\010srv_uuid\030\002 \001(\003\022\022\n\nque_srv_id\030\003 \001(\003\022\022"
  "\n\nque_srv_ip\030\004 \001(\t\022\024\n\014que_srv_port\030\005 \001(\005"
  "\"1\n\035PB_MSG_INTER_CLISRV_HEARTBEAT\022\020\n\010srv"
  "_uuid\030\001 \001(\003\"5\n!PB_MSG_INTER_CLISRV_HEART"
  "BEAT_RES\022\020\n\010srv_uuid\030\001 \001(\003\"\327\001\n\020PB_MSG_IN"
  "TER_MSG\022\025\n\rsrv_uuid_from\030\001 \001(\003\022\023\n\013srv_uu"
  "id_to\030\002 \001(\003\022\020\n\010srv_type\030\003 \001(\005\022\020\n\010msg_typ"
  "e\030\004 \001(\005\022\017\n\007msg_bin\030\005 \001(\014\022\016\n\006msg_id\030\006 \001(\003"
  "\022\017\n\007msg_seq\030\007 \001(\003\022\021\n\ttimestamp\030\010 \001(\003\022\030\n\020"
  "timestamp_arrive\030\t \001(\003\022\024\n\014timeout_wait\030\n"
  " \001(\003\"\205\002\n\024PB_MSG_INTER_MSG_RES\022\025\n\rsrv_uui"
  "d_from\030\001 \001(\003\022\023\n\013srv_uuid_to\030\002 \001(\003\022\020\n\010srv"
  "_type\030\003 \001(\005\022\020\n\010msg_type\030\004 \001(\005\022\017\n\007msg_bin"
  "\030\005 \001(\014\022\016\n\006msg_id\030\006 \001(\003\022\017\n\007msg_seq\030\007 \001(\003\022"
  "\021\n\ttimestamp\030\010 \001(\003\022\030\n\020timestamp_arrive\030\t"
  " \001(\003\022\024\n\014timeout_wait\030\n \001(\003\022(\n\003res\030\013 \001(\0162"
  "\033.msgpacket.PB_RESPONSE_CODE\"D\n\036PB_MSG_I"
  "NTER_CLISRV_REG_TO_QUE\022\020\n\010srv_uuid\030\001 \001(\003"
  "\022\020\n\010srv_type\030\002 \001(\005\"\250\001\n\"PB_MSG_INTER_CLIS"
  "RV_REG_TO_QUE_RES\022\020\n\010srv_uuid\030\001 \001(\003\022\020\n\010s"
  "rv_type\030\002 \001(\005\022+\n\007all_srv\030\003 \001(\0132\032.msgpack"
  "et.PB_SRV_INFO_ALL\0221\n\rlocal_all_srv\030\004 \001("
  "\0132\032.msgpacket.PB_SRV_INFO_ALL\"\232\001\n$PB_MSG"
  "_INTER_QUESRV_REPORT_BROADCAST\022\022\n\nque_sr"
  "v_id\030\001 \001(\003\0221\n\rlocal_all_srv\030\002 \001(\0132\032.msgp"
  "acket.PB_SRV_INFO_ALL\022+\n\007all_srv\030\003 \001(\0132\032"
  ".msgpacket.PB_SRV_INFO_ALL\"\316\001\n\027PB_MSG_IN"
  "TER_QUESRV_NTF\022R\n\016online_offline\030\001 \001(\01325"
  ".msgpacket.PB_MSG_INTER_QUESRV_NTF.onlin"
  "e_offline_ntfH\000\210\001\001\032L\n\022online_offline_ntf"
  "\022\020\n\010srv_uuid\030\001 \001(\003\022\020\n\010srv_type\030\002 \001(\005\022\022\n\n"
  "is_on_line\030\003 \001(\010B\021\n\017_online_offline\"3\n\037P"
  "B_MSG_INTER_QUESRV_GET_SRVTYPE\022\020\n\010srv_ty"
  "pe\030\001 \001(\005\"g\n#PB_MSG_INTER_QUESRV_GET_SRVT"
  "YPE_RES\022\020\n\010srv_type\030\001 \001(\005\022.\n\narrary_srv\030"
  "\002 \003(\0132\032.msgpacket.PB_SRV_INFO_ONE\"\"\n PB_"
  "MSG_CENTERSRV_GAMESRV_GETINFO\"H\n$PB_MSG_"
  "CENTERSRV_GAMESRV_GETINFO_RES\022\016\n\006out_ip\030"
  "\001 \001(\t\022\020\n\010out_port\030\002 \001(\005\"!\n\014PB_MSG_LOGON\022"
  "\021\n\tclient_id\030\001 \001(\003\"\?\n\020PB_MSG_LOGON_RES\022\021"
  "\n\tclient_id\030\001 \001(\003\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 "
  "\001(\005\"4\n\037PB_MSG_LOGONSRV_CENTERSRV_LOGON\022\021"
  "\n\tclient_id\030\001 \001(\003\"i\n#PB_MSG_LOGONSRV_CEN"
  "TERSRV_LOGON_RES\022\021\n\tclient_id\030\001 \001(\003\022\025\n\rg"
  "ame_srv_uuid\030\002 \001(\003\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004"
  " \001(\005B\016Z\014./;msgpacketb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msginter_2eproto_deps[1] = {
  &::descriptor_table_msgdef_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msginter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msginter_2eproto = {
  false, false, 3068, descriptor_table_protodef_msginter_2eproto, "msginter.proto", 
  &descriptor_table_msginter_2eproto_once, descriptor_table_msginter_2eproto_deps, 1, 32,
  schemas, file_default_instances, TableStruct_msginter_2eproto::offsets,
  file_level_metadata_msginter_2eproto, file_level_enum_descriptors_msginter_2eproto, file_level_service_descriptors_msginter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msginter_2eproto_getter() {
  return &descriptor_table_msginter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msginter_2eproto(&descriptor_table_msginter_2eproto);
namespace msgpacket {

// ===================================================================

class PB_SRV_INFO_ONE::_Internal {
 public:
};

PB_SRV_INFO_ONE::PB_SRV_INFO_ONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_SRV_INFO_ONE)
}
PB_SRV_INFO_ONE::PB_SRV_INFO_ONE(const PB_SRV_INFO_ONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srv_uuid_, &from.srv_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&srv_type_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_SRV_INFO_ONE)
}

inline void PB_SRV_INFO_ONE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&srv_type_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
}

PB_SRV_INFO_ONE::~PB_SRV_INFO_ONE() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_SRV_INFO_ONE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_SRV_INFO_ONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_SRV_INFO_ONE::ArenaDtor(void* object) {
  PB_SRV_INFO_ONE* _this = reinterpret_cast< PB_SRV_INFO_ONE* >(object);
  (void)_this;
}
void PB_SRV_INFO_ONE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_SRV_INFO_ONE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_SRV_INFO_ONE::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_SRV_INFO_ONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srv_uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srv_type_) -
      reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_SRV_INFO_ONE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 srv_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          srv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_SRV_INFO_ONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_SRV_INFO_ONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_uuid(), target);
  }

  // int32 srv_type = 2;
  if (this->_internal_srv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_srv_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_SRV_INFO_ONE)
  return target;
}

size_t PB_SRV_INFO_ONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_SRV_INFO_ONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid());
  }

  // int32 srv_type = 2;
  if (this->_internal_srv_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_srv_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_SRV_INFO_ONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_SRV_INFO_ONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_SRV_INFO_ONE::GetClassData() const { return &_class_data_; }

void PB_SRV_INFO_ONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_SRV_INFO_ONE *>(to)->MergeFrom(
      static_cast<const PB_SRV_INFO_ONE &>(from));
}


void PB_SRV_INFO_ONE::MergeFrom(const PB_SRV_INFO_ONE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_SRV_INFO_ONE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_uuid() != 0) {
    _internal_set_srv_uuid(from._internal_srv_uuid());
  }
  if (from._internal_srv_type() != 0) {
    _internal_set_srv_type(from._internal_srv_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_SRV_INFO_ONE::CopyFrom(const PB_SRV_INFO_ONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_SRV_INFO_ONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_SRV_INFO_ONE::IsInitialized() const {
  return true;
}

void PB_SRV_INFO_ONE::InternalSwap(PB_SRV_INFO_ONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_SRV_INFO_ONE, srv_type_)
      + sizeof(PB_SRV_INFO_ONE::srv_type_)
      - PROTOBUF_FIELD_OFFSET(PB_SRV_INFO_ONE, srv_uuid_)>(
          reinterpret_cast<char*>(&srv_uuid_),
          reinterpret_cast<char*>(&other->srv_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_SRV_INFO_ONE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[0]);
}

// ===================================================================

class PB_SRV_INFO_ALL::_Internal {
 public:
};

PB_SRV_INFO_ALL::PB_SRV_INFO_ALL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  array_srv_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_SRV_INFO_ALL)
}
PB_SRV_INFO_ALL::PB_SRV_INFO_ALL(const PB_SRV_INFO_ALL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      array_srv_(from.array_srv_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_SRV_INFO_ALL)
}

inline void PB_SRV_INFO_ALL::SharedCtor() {
}

PB_SRV_INFO_ALL::~PB_SRV_INFO_ALL() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_SRV_INFO_ALL)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_SRV_INFO_ALL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_SRV_INFO_ALL::ArenaDtor(void* object) {
  PB_SRV_INFO_ALL* _this = reinterpret_cast< PB_SRV_INFO_ALL* >(object);
  (void)_this;
}
void PB_SRV_INFO_ALL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_SRV_INFO_ALL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_SRV_INFO_ALL::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_SRV_INFO_ALL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_srv_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_SRV_INFO_ALL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msgpacket.PB_SRV_INFO_ONE array_srv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_srv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_SRV_INFO_ALL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_SRV_INFO_ALL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msgpacket.PB_SRV_INFO_ONE array_srv = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_array_srv_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_array_srv(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_SRV_INFO_ALL)
  return target;
}

size_t PB_SRV_INFO_ALL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_SRV_INFO_ALL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msgpacket.PB_SRV_INFO_ONE array_srv = 1;
  total_size += 1UL * this->_internal_array_srv_size();
  for (const auto& msg : this->array_srv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_SRV_INFO_ALL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_SRV_INFO_ALL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_SRV_INFO_ALL::GetClassData() const { return &_class_data_; }

void PB_SRV_INFO_ALL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_SRV_INFO_ALL *>(to)->MergeFrom(
      static_cast<const PB_SRV_INFO_ALL &>(from));
}


void PB_SRV_INFO_ALL::MergeFrom(const PB_SRV_INFO_ALL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_SRV_INFO_ALL)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  array_srv_.MergeFrom(from.array_srv_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_SRV_INFO_ALL::CopyFrom(const PB_SRV_INFO_ALL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_SRV_INFO_ALL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_SRV_INFO_ALL::IsInitialized() const {
  return true;
}

void PB_SRV_INFO_ALL::InternalSwap(PB_SRV_INFO_ALL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  array_srv_.InternalSwap(&other->array_srv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_SRV_INFO_ALL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[1]);
}

// ===================================================================

class PB_MSG_INTER_QUECENTER_REGISTER::_Internal {
 public:
  static const ::msgpacket::PB_SRV_INFO_ALL& local_all_srv(const PB_MSG_INTER_QUECENTER_REGISTER* msg);
};

const ::msgpacket::PB_SRV_INFO_ALL&
PB_MSG_INTER_QUECENTER_REGISTER::_Internal::local_all_srv(const PB_MSG_INTER_QUECENTER_REGISTER* msg) {
  return *msg->local_all_srv_;
}
PB_MSG_INTER_QUECENTER_REGISTER::PB_MSG_INTER_QUECENTER_REGISTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER)
}
PB_MSG_INTER_QUECENTER_REGISTER::PB_MSG_INTER_QUECENTER_REGISTER(const PB_MSG_INTER_QUECENTER_REGISTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_local_all_srv()) {
    local_all_srv_ = new ::msgpacket::PB_SRV_INFO_ALL(*from.local_all_srv_);
  } else {
    local_all_srv_ = nullptr;
  }
  ::memcpy(&que_srv_id_, &from.que_srv_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&que_srv_id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER)
}

inline void PB_MSG_INTER_QUECENTER_REGISTER::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_all_srv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&local_all_srv_)) + sizeof(port_));
}

PB_MSG_INTER_QUECENTER_REGISTER::~PB_MSG_INTER_QUECENTER_REGISTER() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUECENTER_REGISTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete local_all_srv_;
}

void PB_MSG_INTER_QUECENTER_REGISTER::ArenaDtor(void* object) {
  PB_MSG_INTER_QUECENTER_REGISTER* _this = reinterpret_cast< PB_MSG_INTER_QUECENTER_REGISTER* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUECENTER_REGISTER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUECENTER_REGISTER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUECENTER_REGISTER::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && local_all_srv_ != nullptr) {
    delete local_all_srv_;
  }
  local_all_srv_ = nullptr;
  ::memset(&que_srv_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&que_srv_id_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUECENTER_REGISTER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 que_srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_all_srv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUECENTER_REGISTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_que_srv_id(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.PB_MSG_INTER_QUECENTER_REGISTER.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 4;
  if (this->_internal_has_local_all_srv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::local_all_srv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER)
  return target;
}

size_t PB_MSG_INTER_QUECENTER_REGISTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 4;
  if (this->_internal_has_local_all_srv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_all_srv_);
  }

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUECENTER_REGISTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUECENTER_REGISTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUECENTER_REGISTER::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUECENTER_REGISTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUECENTER_REGISTER *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUECENTER_REGISTER &>(from));
}


void PB_MSG_INTER_QUECENTER_REGISTER::MergeFrom(const PB_MSG_INTER_QUECENTER_REGISTER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_has_local_all_srv()) {
    _internal_mutable_local_all_srv()->::msgpacket::PB_SRV_INFO_ALL::MergeFrom(from._internal_local_all_srv());
  }
  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUECENTER_REGISTER::CopyFrom(const PB_MSG_INTER_QUECENTER_REGISTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUECENTER_REGISTER::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUECENTER_REGISTER::InternalSwap(PB_MSG_INTER_QUECENTER_REGISTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUECENTER_REGISTER, port_)
      + sizeof(PB_MSG_INTER_QUECENTER_REGISTER::port_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUECENTER_REGISTER, local_all_srv_)>(
          reinterpret_cast<char*>(&local_all_srv_),
          reinterpret_cast<char*>(&other->local_all_srv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUECENTER_REGISTER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[2]);
}

// ===================================================================

class PB_MSG_INTER_QUESRV_INFO::_Internal {
 public:
};

PB_MSG_INTER_QUESRV_INFO::PB_MSG_INTER_QUESRV_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUESRV_INFO)
}
PB_MSG_INTER_QUESRV_INFO::PB_MSG_INTER_QUESRV_INFO(const PB_MSG_INTER_QUESRV_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&que_srv_id_, &from.que_srv_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&que_srv_id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUESRV_INFO)
}

inline void PB_MSG_INTER_QUESRV_INFO::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&que_srv_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&que_srv_id_)) + sizeof(port_));
}

PB_MSG_INTER_QUESRV_INFO::~PB_MSG_INTER_QUESRV_INFO() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUESRV_INFO)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUESRV_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PB_MSG_INTER_QUESRV_INFO::ArenaDtor(void* object) {
  PB_MSG_INTER_QUESRV_INFO* _this = reinterpret_cast< PB_MSG_INTER_QUESRV_INFO* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUESRV_INFO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUESRV_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUESRV_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUESRV_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&que_srv_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&que_srv_id_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUESRV_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 que_srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.PB_MSG_INTER_QUESRV_INFO.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUESRV_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUESRV_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_que_srv_id(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.PB_MSG_INTER_QUESRV_INFO.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUESRV_INFO)
  return target;
}

size_t PB_MSG_INTER_QUESRV_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUESRV_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUESRV_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUESRV_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUESRV_INFO::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUESRV_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUESRV_INFO *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUESRV_INFO &>(from));
}


void PB_MSG_INTER_QUESRV_INFO::MergeFrom(const PB_MSG_INTER_QUESRV_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUESRV_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUESRV_INFO::CopyFrom(const PB_MSG_INTER_QUESRV_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUESRV_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUESRV_INFO::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUESRV_INFO::InternalSwap(PB_MSG_INTER_QUESRV_INFO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUESRV_INFO, port_)
      + sizeof(PB_MSG_INTER_QUESRV_INFO::port_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUESRV_INFO, que_srv_id_)>(
          reinterpret_cast<char*>(&que_srv_id_),
          reinterpret_cast<char*>(&other->que_srv_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUESRV_INFO::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[3]);
}

// ===================================================================

class PB_MSG_INTER_QUECENTER_REGISTER_RES::_Internal {
 public:
};

PB_MSG_INTER_QUECENTER_REGISTER_RES::PB_MSG_INTER_QUECENTER_REGISTER_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  que_srv_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES)
}
PB_MSG_INTER_QUECENTER_REGISTER_RES::PB_MSG_INTER_QUECENTER_REGISTER_RES(const PB_MSG_INTER_QUECENTER_REGISTER_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      que_srv_info_(from.que_srv_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  que_srv_id_ = from.que_srv_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES)
}

inline void PB_MSG_INTER_QUECENTER_REGISTER_RES::SharedCtor() {
que_srv_id_ = int64_t{0};
}

PB_MSG_INTER_QUECENTER_REGISTER_RES::~PB_MSG_INTER_QUECENTER_REGISTER_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUECENTER_REGISTER_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_QUECENTER_REGISTER_RES::ArenaDtor(void* object) {
  PB_MSG_INTER_QUECENTER_REGISTER_RES* _this = reinterpret_cast< PB_MSG_INTER_QUECENTER_REGISTER_RES* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUECENTER_REGISTER_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUECENTER_REGISTER_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUECENTER_REGISTER_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  que_srv_info_.Clear();
  que_srv_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUECENTER_REGISTER_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msgpacket.PB_MSG_INTER_QUESRV_INFO que_srv_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_que_srv_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 que_srv_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUECENTER_REGISTER_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msgpacket.PB_MSG_INTER_QUESRV_INFO que_srv_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_que_srv_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_que_srv_info(i), target, stream);
  }

  // int64 que_srv_id = 2;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_que_srv_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES)
  return target;
}

size_t PB_MSG_INTER_QUECENTER_REGISTER_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msgpacket.PB_MSG_INTER_QUESRV_INFO que_srv_info = 1;
  total_size += 1UL * this->_internal_que_srv_info_size();
  for (const auto& msg : this->que_srv_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 que_srv_id = 2;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUECENTER_REGISTER_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUECENTER_REGISTER_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUECENTER_REGISTER_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUECENTER_REGISTER_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUECENTER_REGISTER_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUECENTER_REGISTER_RES &>(from));
}


void PB_MSG_INTER_QUECENTER_REGISTER_RES::MergeFrom(const PB_MSG_INTER_QUECENTER_REGISTER_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  que_srv_info_.MergeFrom(from.que_srv_info_);
  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUECENTER_REGISTER_RES::CopyFrom(const PB_MSG_INTER_QUECENTER_REGISTER_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUECENTER_REGISTER_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUECENTER_REGISTER_RES::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUECENTER_REGISTER_RES::InternalSwap(PB_MSG_INTER_QUECENTER_REGISTER_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  que_srv_info_.InternalSwap(&other->que_srv_info_);
  swap(que_srv_id_, other->que_srv_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUECENTER_REGISTER_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[4]);
}

// ===================================================================

class PB_MSG_INTER_QUECENTER_OFFLINE_NTF::_Internal {
 public:
};

PB_MSG_INTER_QUECENTER_OFFLINE_NTF::PB_MSG_INTER_QUECENTER_OFFLINE_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF)
}
PB_MSG_INTER_QUECENTER_OFFLINE_NTF::PB_MSG_INTER_QUECENTER_OFFLINE_NTF(const PB_MSG_INTER_QUECENTER_OFFLINE_NTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  que_srv_id_ = from.que_srv_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF)
}

inline void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::SharedCtor() {
que_srv_id_ = int64_t{0};
}

PB_MSG_INTER_QUECENTER_OFFLINE_NTF::~PB_MSG_INTER_QUECENTER_OFFLINE_NTF() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::ArenaDtor(void* object) {
  PB_MSG_INTER_QUECENTER_OFFLINE_NTF* _this = reinterpret_cast< PB_MSG_INTER_QUECENTER_OFFLINE_NTF* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  que_srv_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUECENTER_OFFLINE_NTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 que_srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUECENTER_OFFLINE_NTF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_que_srv_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF)
  return target;
}

size_t PB_MSG_INTER_QUECENTER_OFFLINE_NTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUECENTER_OFFLINE_NTF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUECENTER_OFFLINE_NTF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUECENTER_OFFLINE_NTF::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUECENTER_OFFLINE_NTF *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUECENTER_OFFLINE_NTF &>(from));
}


void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::MergeFrom(const PB_MSG_INTER_QUECENTER_OFFLINE_NTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::CopyFrom(const PB_MSG_INTER_QUECENTER_OFFLINE_NTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUECENTER_OFFLINE_NTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUECENTER_OFFLINE_NTF::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUECENTER_OFFLINE_NTF::InternalSwap(PB_MSG_INTER_QUECENTER_OFFLINE_NTF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(que_srv_id_, other->que_srv_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUECENTER_OFFLINE_NTF::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[5]);
}

// ===================================================================

class PB_MSG_INTER_QUECENTER_ONLINE_NTF::_Internal {
 public:
  static const ::msgpacket::PB_MSG_INTER_QUESRV_INFO& que_srv_info(const PB_MSG_INTER_QUECENTER_ONLINE_NTF* msg);
};

const ::msgpacket::PB_MSG_INTER_QUESRV_INFO&
PB_MSG_INTER_QUECENTER_ONLINE_NTF::_Internal::que_srv_info(const PB_MSG_INTER_QUECENTER_ONLINE_NTF* msg) {
  return *msg->que_srv_info_;
}
PB_MSG_INTER_QUECENTER_ONLINE_NTF::PB_MSG_INTER_QUECENTER_ONLINE_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF)
}
PB_MSG_INTER_QUECENTER_ONLINE_NTF::PB_MSG_INTER_QUECENTER_ONLINE_NTF(const PB_MSG_INTER_QUECENTER_ONLINE_NTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_que_srv_info()) {
    que_srv_info_ = new ::msgpacket::PB_MSG_INTER_QUESRV_INFO(*from.que_srv_info_);
  } else {
    que_srv_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF)
}

inline void PB_MSG_INTER_QUECENTER_ONLINE_NTF::SharedCtor() {
que_srv_info_ = nullptr;
}

PB_MSG_INTER_QUECENTER_ONLINE_NTF::~PB_MSG_INTER_QUECENTER_ONLINE_NTF() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUECENTER_ONLINE_NTF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete que_srv_info_;
}

void PB_MSG_INTER_QUECENTER_ONLINE_NTF::ArenaDtor(void* object) {
  PB_MSG_INTER_QUECENTER_ONLINE_NTF* _this = reinterpret_cast< PB_MSG_INTER_QUECENTER_ONLINE_NTF* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUECENTER_ONLINE_NTF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUECENTER_ONLINE_NTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUECENTER_ONLINE_NTF::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && que_srv_info_ != nullptr) {
    delete que_srv_info_;
  }
  que_srv_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUECENTER_ONLINE_NTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msgpacket.PB_MSG_INTER_QUESRV_INFO que_srv_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_que_srv_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUECENTER_ONLINE_NTF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msgpacket.PB_MSG_INTER_QUESRV_INFO que_srv_info = 1;
  if (this->_internal_has_que_srv_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::que_srv_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF)
  return target;
}

size_t PB_MSG_INTER_QUECENTER_ONLINE_NTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.PB_MSG_INTER_QUESRV_INFO que_srv_info = 1;
  if (this->_internal_has_que_srv_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *que_srv_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUECENTER_ONLINE_NTF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUECENTER_ONLINE_NTF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUECENTER_ONLINE_NTF::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUECENTER_ONLINE_NTF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUECENTER_ONLINE_NTF *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUECENTER_ONLINE_NTF &>(from));
}


void PB_MSG_INTER_QUECENTER_ONLINE_NTF::MergeFrom(const PB_MSG_INTER_QUECENTER_ONLINE_NTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_que_srv_info()) {
    _internal_mutable_que_srv_info()->::msgpacket::PB_MSG_INTER_QUESRV_INFO::MergeFrom(from._internal_que_srv_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUECENTER_ONLINE_NTF::CopyFrom(const PB_MSG_INTER_QUECENTER_ONLINE_NTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUECENTER_ONLINE_NTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUECENTER_ONLINE_NTF::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUECENTER_ONLINE_NTF::InternalSwap(PB_MSG_INTER_QUECENTER_ONLINE_NTF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(que_srv_info_, other->que_srv_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUECENTER_ONLINE_NTF::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[6]);
}

// ===================================================================

class PB_MSG_INTER_QUESRV_CONNECT::_Internal {
 public:
  static const ::msgpacket::PB_SRV_INFO_ALL& local_all_srv(const PB_MSG_INTER_QUESRV_CONNECT* msg);
};

const ::msgpacket::PB_SRV_INFO_ALL&
PB_MSG_INTER_QUESRV_CONNECT::_Internal::local_all_srv(const PB_MSG_INTER_QUESRV_CONNECT* msg) {
  return *msg->local_all_srv_;
}
PB_MSG_INTER_QUESRV_CONNECT::PB_MSG_INTER_QUESRV_CONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUESRV_CONNECT)
}
PB_MSG_INTER_QUESRV_CONNECT::PB_MSG_INTER_QUESRV_CONNECT(const PB_MSG_INTER_QUESRV_CONNECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_all_srv()) {
    local_all_srv_ = new ::msgpacket::PB_SRV_INFO_ALL(*from.local_all_srv_);
  } else {
    local_all_srv_ = nullptr;
  }
  que_srv_id_ = from.que_srv_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUESRV_CONNECT)
}

inline void PB_MSG_INTER_QUESRV_CONNECT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_all_srv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&que_srv_id_) -
    reinterpret_cast<char*>(&local_all_srv_)) + sizeof(que_srv_id_));
}

PB_MSG_INTER_QUESRV_CONNECT::~PB_MSG_INTER_QUESRV_CONNECT() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUESRV_CONNECT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUESRV_CONNECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete local_all_srv_;
}

void PB_MSG_INTER_QUESRV_CONNECT::ArenaDtor(void* object) {
  PB_MSG_INTER_QUESRV_CONNECT* _this = reinterpret_cast< PB_MSG_INTER_QUESRV_CONNECT* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUESRV_CONNECT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUESRV_CONNECT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUESRV_CONNECT::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUESRV_CONNECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && local_all_srv_ != nullptr) {
    delete local_all_srv_;
  }
  local_all_srv_ = nullptr;
  que_srv_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUESRV_CONNECT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 que_srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_all_srv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUESRV_CONNECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUESRV_CONNECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_que_srv_id(), target);
  }

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
  if (this->_internal_has_local_all_srv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::local_all_srv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUESRV_CONNECT)
  return target;
}

size_t PB_MSG_INTER_QUESRV_CONNECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUESRV_CONNECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
  if (this->_internal_has_local_all_srv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_all_srv_);
  }

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUESRV_CONNECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUESRV_CONNECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUESRV_CONNECT::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUESRV_CONNECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUESRV_CONNECT *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUESRV_CONNECT &>(from));
}


void PB_MSG_INTER_QUESRV_CONNECT::MergeFrom(const PB_MSG_INTER_QUESRV_CONNECT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUESRV_CONNECT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_local_all_srv()) {
    _internal_mutable_local_all_srv()->::msgpacket::PB_SRV_INFO_ALL::MergeFrom(from._internal_local_all_srv());
  }
  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUESRV_CONNECT::CopyFrom(const PB_MSG_INTER_QUESRV_CONNECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUESRV_CONNECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUESRV_CONNECT::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUESRV_CONNECT::InternalSwap(PB_MSG_INTER_QUESRV_CONNECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUESRV_CONNECT, que_srv_id_)
      + sizeof(PB_MSG_INTER_QUESRV_CONNECT::que_srv_id_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUESRV_CONNECT, local_all_srv_)>(
          reinterpret_cast<char*>(&local_all_srv_),
          reinterpret_cast<char*>(&other->local_all_srv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUESRV_CONNECT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[7]);
}

// ===================================================================

class PB_MSG_INTER_QUESRV_CONNECT_RES::_Internal {
 public:
  static const ::msgpacket::PB_SRV_INFO_ALL& local_all_srv(const PB_MSG_INTER_QUESRV_CONNECT_RES* msg);
};

const ::msgpacket::PB_SRV_INFO_ALL&
PB_MSG_INTER_QUESRV_CONNECT_RES::_Internal::local_all_srv(const PB_MSG_INTER_QUESRV_CONNECT_RES* msg) {
  return *msg->local_all_srv_;
}
PB_MSG_INTER_QUESRV_CONNECT_RES::PB_MSG_INTER_QUESRV_CONNECT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES)
}
PB_MSG_INTER_QUESRV_CONNECT_RES::PB_MSG_INTER_QUESRV_CONNECT_RES(const PB_MSG_INTER_QUESRV_CONNECT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_all_srv()) {
    local_all_srv_ = new ::msgpacket::PB_SRV_INFO_ALL(*from.local_all_srv_);
  } else {
    local_all_srv_ = nullptr;
  }
  que_srv_id_ = from.que_srv_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES)
}

inline void PB_MSG_INTER_QUESRV_CONNECT_RES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_all_srv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&que_srv_id_) -
    reinterpret_cast<char*>(&local_all_srv_)) + sizeof(que_srv_id_));
}

PB_MSG_INTER_QUESRV_CONNECT_RES::~PB_MSG_INTER_QUESRV_CONNECT_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUESRV_CONNECT_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete local_all_srv_;
}

void PB_MSG_INTER_QUESRV_CONNECT_RES::ArenaDtor(void* object) {
  PB_MSG_INTER_QUESRV_CONNECT_RES* _this = reinterpret_cast< PB_MSG_INTER_QUESRV_CONNECT_RES* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUESRV_CONNECT_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUESRV_CONNECT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUESRV_CONNECT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && local_all_srv_ != nullptr) {
    delete local_all_srv_;
  }
  local_all_srv_ = nullptr;
  que_srv_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUESRV_CONNECT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 que_srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_all_srv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUESRV_CONNECT_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_que_srv_id(), target);
  }

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
  if (this->_internal_has_local_all_srv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::local_all_srv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES)
  return target;
}

size_t PB_MSG_INTER_QUESRV_CONNECT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
  if (this->_internal_has_local_all_srv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_all_srv_);
  }

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUESRV_CONNECT_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUESRV_CONNECT_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUESRV_CONNECT_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUESRV_CONNECT_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUESRV_CONNECT_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUESRV_CONNECT_RES &>(from));
}


void PB_MSG_INTER_QUESRV_CONNECT_RES::MergeFrom(const PB_MSG_INTER_QUESRV_CONNECT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_local_all_srv()) {
    _internal_mutable_local_all_srv()->::msgpacket::PB_SRV_INFO_ALL::MergeFrom(from._internal_local_all_srv());
  }
  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUESRV_CONNECT_RES::CopyFrom(const PB_MSG_INTER_QUESRV_CONNECT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUESRV_CONNECT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUESRV_CONNECT_RES::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUESRV_CONNECT_RES::InternalSwap(PB_MSG_INTER_QUESRV_CONNECT_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUESRV_CONNECT_RES, que_srv_id_)
      + sizeof(PB_MSG_INTER_QUESRV_CONNECT_RES::que_srv_id_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUESRV_CONNECT_RES, local_all_srv_)>(
          reinterpret_cast<char*>(&local_all_srv_),
          reinterpret_cast<char*>(&other->local_all_srv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUESRV_CONNECT_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[8]);
}

// ===================================================================

class PB_MSG_INTER_QUECENTER_HEARTBEAT::_Internal {
 public:
};

PB_MSG_INTER_QUECENTER_HEARTBEAT::PB_MSG_INTER_QUECENTER_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT)
}
PB_MSG_INTER_QUECENTER_HEARTBEAT::PB_MSG_INTER_QUECENTER_HEARTBEAT(const PB_MSG_INTER_QUECENTER_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  que_srv_id_ = from.que_srv_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT)
}

inline void PB_MSG_INTER_QUECENTER_HEARTBEAT::SharedCtor() {
que_srv_id_ = int64_t{0};
}

PB_MSG_INTER_QUECENTER_HEARTBEAT::~PB_MSG_INTER_QUECENTER_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUECENTER_HEARTBEAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_QUECENTER_HEARTBEAT::ArenaDtor(void* object) {
  PB_MSG_INTER_QUECENTER_HEARTBEAT* _this = reinterpret_cast< PB_MSG_INTER_QUECENTER_HEARTBEAT* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUECENTER_HEARTBEAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUECENTER_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUECENTER_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  que_srv_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUECENTER_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 que_srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUECENTER_HEARTBEAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_que_srv_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT)
  return target;
}

size_t PB_MSG_INTER_QUECENTER_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUECENTER_HEARTBEAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUECENTER_HEARTBEAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUECENTER_HEARTBEAT::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUECENTER_HEARTBEAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUECENTER_HEARTBEAT *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUECENTER_HEARTBEAT &>(from));
}


void PB_MSG_INTER_QUECENTER_HEARTBEAT::MergeFrom(const PB_MSG_INTER_QUECENTER_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUECENTER_HEARTBEAT::CopyFrom(const PB_MSG_INTER_QUECENTER_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUECENTER_HEARTBEAT::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUECENTER_HEARTBEAT::InternalSwap(PB_MSG_INTER_QUECENTER_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(que_srv_id_, other->que_srv_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUECENTER_HEARTBEAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[9]);
}

// ===================================================================

class PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::_Internal {
 public:
};

PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)
}
PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES(const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  que_srv_id_ = from.que_srv_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)
}

inline void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::SharedCtor() {
que_srv_id_ = int64_t{0};
}

PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::~PB_MSG_INTER_QUECENTER_HEARTBEAT_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::ArenaDtor(void* object) {
  PB_MSG_INTER_QUECENTER_HEARTBEAT_RES* _this = reinterpret_cast< PB_MSG_INTER_QUECENTER_HEARTBEAT_RES* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  que_srv_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 que_srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_que_srv_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)
  return target;
}

size_t PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUECENTER_HEARTBEAT_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES &>(from));
}


void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::MergeFrom(const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::CopyFrom(const PB_MSG_INTER_QUECENTER_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUECENTER_HEARTBEAT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::InternalSwap(PB_MSG_INTER_QUECENTER_HEARTBEAT_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(que_srv_id_, other->que_srv_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUECENTER_HEARTBEAT_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[10]);
}

// ===================================================================

class PB_MSG_INTER_QUESRV_HEARTBEAT::_Internal {
 public:
};

PB_MSG_INTER_QUESRV_HEARTBEAT::PB_MSG_INTER_QUESRV_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT)
}
PB_MSG_INTER_QUESRV_HEARTBEAT::PB_MSG_INTER_QUESRV_HEARTBEAT(const PB_MSG_INTER_QUESRV_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  que_srv_id_ = from.que_srv_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT)
}

inline void PB_MSG_INTER_QUESRV_HEARTBEAT::SharedCtor() {
que_srv_id_ = int64_t{0};
}

PB_MSG_INTER_QUESRV_HEARTBEAT::~PB_MSG_INTER_QUESRV_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUESRV_HEARTBEAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_QUESRV_HEARTBEAT::ArenaDtor(void* object) {
  PB_MSG_INTER_QUESRV_HEARTBEAT* _this = reinterpret_cast< PB_MSG_INTER_QUESRV_HEARTBEAT* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUESRV_HEARTBEAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUESRV_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUESRV_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  que_srv_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUESRV_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 que_srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUESRV_HEARTBEAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_que_srv_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT)
  return target;
}

size_t PB_MSG_INTER_QUESRV_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUESRV_HEARTBEAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUESRV_HEARTBEAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUESRV_HEARTBEAT::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUESRV_HEARTBEAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUESRV_HEARTBEAT *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUESRV_HEARTBEAT &>(from));
}


void PB_MSG_INTER_QUESRV_HEARTBEAT::MergeFrom(const PB_MSG_INTER_QUESRV_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUESRV_HEARTBEAT::CopyFrom(const PB_MSG_INTER_QUESRV_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUESRV_HEARTBEAT::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUESRV_HEARTBEAT::InternalSwap(PB_MSG_INTER_QUESRV_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(que_srv_id_, other->que_srv_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUESRV_HEARTBEAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[11]);
}

// ===================================================================

class PB_MSG_INTER_QUESRV_HEARTBEAT_RES::_Internal {
 public:
};

PB_MSG_INTER_QUESRV_HEARTBEAT_RES::PB_MSG_INTER_QUESRV_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES)
}
PB_MSG_INTER_QUESRV_HEARTBEAT_RES::PB_MSG_INTER_QUESRV_HEARTBEAT_RES(const PB_MSG_INTER_QUESRV_HEARTBEAT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  que_srv_id_ = from.que_srv_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES)
}

inline void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::SharedCtor() {
que_srv_id_ = int64_t{0};
}

PB_MSG_INTER_QUESRV_HEARTBEAT_RES::~PB_MSG_INTER_QUESRV_HEARTBEAT_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::ArenaDtor(void* object) {
  PB_MSG_INTER_QUESRV_HEARTBEAT_RES* _this = reinterpret_cast< PB_MSG_INTER_QUESRV_HEARTBEAT_RES* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  que_srv_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUESRV_HEARTBEAT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 que_srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUESRV_HEARTBEAT_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_que_srv_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES)
  return target;
}

size_t PB_MSG_INTER_QUESRV_HEARTBEAT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUESRV_HEARTBEAT_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUESRV_HEARTBEAT_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUESRV_HEARTBEAT_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUESRV_HEARTBEAT_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUESRV_HEARTBEAT_RES &>(from));
}


void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::MergeFrom(const PB_MSG_INTER_QUESRV_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::CopyFrom(const PB_MSG_INTER_QUESRV_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUESRV_HEARTBEAT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUESRV_HEARTBEAT_RES::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUESRV_HEARTBEAT_RES::InternalSwap(PB_MSG_INTER_QUESRV_HEARTBEAT_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(que_srv_id_, other->que_srv_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUESRV_HEARTBEAT_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[12]);
}

// ===================================================================

class PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::_Internal {
 public:
};

PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)
}
PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srv_uuid_, &from.srv_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&srv_type_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)
}

inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&srv_type_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
}

PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::~PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::ArenaDtor(void* object) {
  PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER* _this = reinterpret_cast< PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER* >(object);
  (void)_this;
}
void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srv_uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srv_type_) -
      reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 srv_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 srv_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          srv_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 srv_type = 1;
  if (this->_internal_srv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_srv_type(), target);
  }

  // int64 srv_uuid = 2;
  if (this->_internal_srv_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_srv_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)
  return target;
}

size_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srv_uuid = 2;
  if (this->_internal_srv_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid());
  }

  // int32 srv_type = 1;
  if (this->_internal_srv_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_srv_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER &>(from));
}


void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::MergeFrom(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_uuid() != 0) {
    _internal_set_srv_uuid(from._internal_srv_uuid());
  }
  if (from._internal_srv_type() != 0) {
    _internal_set_srv_type(from._internal_srv_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::CopyFrom(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::InternalSwap(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER, srv_type_)
      + sizeof(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::srv_type_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER, srv_uuid_)>(
          reinterpret_cast<char*>(&srv_uuid_),
          reinterpret_cast<char*>(&other->srv_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[13]);
}

// ===================================================================

class PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_Internal {
 public:
};

PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)
}
PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  que_srv_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    que_srv_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_que_srv_ip().empty()) {
    que_srv_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_que_srv_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&srv_uuid_, &from.srv_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&que_srv_port_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(que_srv_port_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)
}

inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::SharedCtor() {
que_srv_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  que_srv_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&que_srv_port_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(que_srv_port_));
}

PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::~PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  que_srv_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::ArenaDtor(void* object) {
  PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES* _this = reinterpret_cast< PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES* >(object);
  (void)_this;
}
void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  que_srv_ip_.ClearToEmpty();
  ::memset(&srv_uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&que_srv_port_) -
      reinterpret_cast<char*>(&srv_uuid_)) + sizeof(que_srv_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msgpacket.PB_RESPONSE_CODE res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::msgpacket::PB_RESPONSE_CODE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 srv_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          srv_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 que_srv_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string que_srv_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_que_srv_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 que_srv_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          que_srv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msgpacket.PB_RESPONSE_CODE res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  // int64 srv_uuid = 2;
  if (this->_internal_srv_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_srv_uuid(), target);
  }

  // int64 que_srv_id = 3;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_que_srv_id(), target);
  }

  // string que_srv_ip = 4;
  if (!this->_internal_que_srv_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_que_srv_ip().data(), static_cast<int>(this->_internal_que_srv_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES.que_srv_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_que_srv_ip(), target);
  }

  // int32 que_srv_port = 5;
  if (this->_internal_que_srv_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_que_srv_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)
  return target;
}

size_t PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string que_srv_ip = 4;
  if (!this->_internal_que_srv_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_que_srv_ip());
  }

  // int64 srv_uuid = 2;
  if (this->_internal_srv_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid());
  }

  // int64 que_srv_id = 3;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  // .msgpacket.PB_RESPONSE_CODE res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  // int32 que_srv_port = 5;
  if (this->_internal_que_srv_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_que_srv_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES &>(from));
}


void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::MergeFrom(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_que_srv_ip().empty()) {
    _internal_set_que_srv_ip(from._internal_que_srv_ip());
  }
  if (from._internal_srv_uuid() != 0) {
    _internal_set_srv_uuid(from._internal_srv_uuid());
  }
  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  if (from._internal_que_srv_port() != 0) {
    _internal_set_que_srv_port(from._internal_que_srv_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::CopyFrom(const PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::InternalSwap(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &que_srv_ip_, lhs_arena,
      &other->que_srv_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES, que_srv_port_)
      + sizeof(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::que_srv_port_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES, srv_uuid_)>(
          reinterpret_cast<char*>(&srv_uuid_),
          reinterpret_cast<char*>(&other->srv_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[14]);
}

// ===================================================================

class PB_MSG_INTER_CLISRV_HEARTBEAT::_Internal {
 public:
};

PB_MSG_INTER_CLISRV_HEARTBEAT::PB_MSG_INTER_CLISRV_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT)
}
PB_MSG_INTER_CLISRV_HEARTBEAT::PB_MSG_INTER_CLISRV_HEARTBEAT(const PB_MSG_INTER_CLISRV_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srv_uuid_ = from.srv_uuid_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT)
}

inline void PB_MSG_INTER_CLISRV_HEARTBEAT::SharedCtor() {
srv_uuid_ = int64_t{0};
}

PB_MSG_INTER_CLISRV_HEARTBEAT::~PB_MSG_INTER_CLISRV_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_CLISRV_HEARTBEAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_CLISRV_HEARTBEAT::ArenaDtor(void* object) {
  PB_MSG_INTER_CLISRV_HEARTBEAT* _this = reinterpret_cast< PB_MSG_INTER_CLISRV_HEARTBEAT* >(object);
  (void)_this;
}
void PB_MSG_INTER_CLISRV_HEARTBEAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_CLISRV_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_CLISRV_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srv_uuid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_CLISRV_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_CLISRV_HEARTBEAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT)
  return target;
}

size_t PB_MSG_INTER_CLISRV_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_CLISRV_HEARTBEAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_CLISRV_HEARTBEAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_CLISRV_HEARTBEAT::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_CLISRV_HEARTBEAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_CLISRV_HEARTBEAT *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_CLISRV_HEARTBEAT &>(from));
}


void PB_MSG_INTER_CLISRV_HEARTBEAT::MergeFrom(const PB_MSG_INTER_CLISRV_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_uuid() != 0) {
    _internal_set_srv_uuid(from._internal_srv_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_CLISRV_HEARTBEAT::CopyFrom(const PB_MSG_INTER_CLISRV_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_CLISRV_HEARTBEAT::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_CLISRV_HEARTBEAT::InternalSwap(PB_MSG_INTER_CLISRV_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(srv_uuid_, other->srv_uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_CLISRV_HEARTBEAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[15]);
}

// ===================================================================

class PB_MSG_INTER_CLISRV_HEARTBEAT_RES::_Internal {
 public:
};

PB_MSG_INTER_CLISRV_HEARTBEAT_RES::PB_MSG_INTER_CLISRV_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES)
}
PB_MSG_INTER_CLISRV_HEARTBEAT_RES::PB_MSG_INTER_CLISRV_HEARTBEAT_RES(const PB_MSG_INTER_CLISRV_HEARTBEAT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srv_uuid_ = from.srv_uuid_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES)
}

inline void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::SharedCtor() {
srv_uuid_ = int64_t{0};
}

PB_MSG_INTER_CLISRV_HEARTBEAT_RES::~PB_MSG_INTER_CLISRV_HEARTBEAT_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::ArenaDtor(void* object) {
  PB_MSG_INTER_CLISRV_HEARTBEAT_RES* _this = reinterpret_cast< PB_MSG_INTER_CLISRV_HEARTBEAT_RES* >(object);
  (void)_this;
}
void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srv_uuid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_CLISRV_HEARTBEAT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_CLISRV_HEARTBEAT_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES)
  return target;
}

size_t PB_MSG_INTER_CLISRV_HEARTBEAT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_CLISRV_HEARTBEAT_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_CLISRV_HEARTBEAT_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_CLISRV_HEARTBEAT_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_CLISRV_HEARTBEAT_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_CLISRV_HEARTBEAT_RES &>(from));
}


void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::MergeFrom(const PB_MSG_INTER_CLISRV_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_uuid() != 0) {
    _internal_set_srv_uuid(from._internal_srv_uuid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::CopyFrom(const PB_MSG_INTER_CLISRV_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_CLISRV_HEARTBEAT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_CLISRV_HEARTBEAT_RES::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_CLISRV_HEARTBEAT_RES::InternalSwap(PB_MSG_INTER_CLISRV_HEARTBEAT_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(srv_uuid_, other->srv_uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_CLISRV_HEARTBEAT_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[16]);
}

// ===================================================================

class PB_MSG_INTER_MSG::_Internal {
 public:
};

PB_MSG_INTER_MSG::PB_MSG_INTER_MSG(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_MSG)
}
PB_MSG_INTER_MSG::PB_MSG_INTER_MSG(const PB_MSG_INTER_MSG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_bin().empty()) {
    msg_bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_bin(), 
      GetArenaForAllocation());
  }
  ::memcpy(&srv_uuid_from_, &from.srv_uuid_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_wait_) -
    reinterpret_cast<char*>(&srv_uuid_from_)) + sizeof(timeout_wait_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_MSG)
}

inline void PB_MSG_INTER_MSG::SharedCtor() {
msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_uuid_from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_wait_) -
    reinterpret_cast<char*>(&srv_uuid_from_)) + sizeof(timeout_wait_));
}

PB_MSG_INTER_MSG::~PB_MSG_INTER_MSG() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_MSG)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_MSG::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_bin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PB_MSG_INTER_MSG::ArenaDtor(void* object) {
  PB_MSG_INTER_MSG* _this = reinterpret_cast< PB_MSG_INTER_MSG* >(object);
  (void)_this;
}
void PB_MSG_INTER_MSG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_MSG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_MSG::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_MSG)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_bin_.ClearToEmpty();
  ::memset(&srv_uuid_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_wait_) -
      reinterpret_cast<char*>(&srv_uuid_from_)) + sizeof(timeout_wait_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_MSG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_uuid_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_uuid_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 srv_uuid_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          srv_uuid_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 srv_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          srv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msg_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes msg_bin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_msg_bin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msg_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msg_seq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          msg_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_arrive = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          timestamp_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeout_wait = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          timeout_wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_MSG::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_MSG)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_uuid_from = 1;
  if (this->_internal_srv_uuid_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_uuid_from(), target);
  }

  // int64 srv_uuid_to = 2;
  if (this->_internal_srv_uuid_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_srv_uuid_to(), target);
  }

  // int32 srv_type = 3;
  if (this->_internal_srv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_srv_type(), target);
  }

  // int32 msg_type = 4;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_msg_type(), target);
  }

  // bytes msg_bin = 5;
  if (!this->_internal_msg_bin().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_msg_bin(), target);
  }

  // int64 msg_id = 6;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_msg_id(), target);
  }

  // int64 msg_seq = 7;
  if (this->_internal_msg_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_msg_seq(), target);
  }

  // int64 timestamp = 8;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_timestamp(), target);
  }

  // int64 timestamp_arrive = 9;
  if (this->_internal_timestamp_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_timestamp_arrive(), target);
  }

  // int64 timeout_wait = 10;
  if (this->_internal_timeout_wait() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timeout_wait(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_MSG)
  return target;
}

size_t PB_MSG_INTER_MSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_MSG)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_bin = 5;
  if (!this->_internal_msg_bin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_bin());
  }

  // int64 srv_uuid_from = 1;
  if (this->_internal_srv_uuid_from() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid_from());
  }

  // int64 srv_uuid_to = 2;
  if (this->_internal_srv_uuid_to() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid_to());
  }

  // int32 srv_type = 3;
  if (this->_internal_srv_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_srv_type());
  }

  // int32 msg_type = 4;
  if (this->_internal_msg_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_type());
  }

  // int64 msg_id = 6;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msg_id());
  }

  // int64 msg_seq = 7;
  if (this->_internal_msg_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msg_seq());
  }

  // int64 timestamp = 8;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 timestamp_arrive = 9;
  if (this->_internal_timestamp_arrive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_arrive());
  }

  // int64 timeout_wait = 10;
  if (this->_internal_timeout_wait() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timeout_wait());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_MSG::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_MSG::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_MSG::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_MSG::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_MSG *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_MSG &>(from));
}


void PB_MSG_INTER_MSG::MergeFrom(const PB_MSG_INTER_MSG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_MSG)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_bin().empty()) {
    _internal_set_msg_bin(from._internal_msg_bin());
  }
  if (from._internal_srv_uuid_from() != 0) {
    _internal_set_srv_uuid_from(from._internal_srv_uuid_from());
  }
  if (from._internal_srv_uuid_to() != 0) {
    _internal_set_srv_uuid_to(from._internal_srv_uuid_to());
  }
  if (from._internal_srv_type() != 0) {
    _internal_set_srv_type(from._internal_srv_type());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_msg_seq() != 0) {
    _internal_set_msg_seq(from._internal_msg_seq());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timestamp_arrive() != 0) {
    _internal_set_timestamp_arrive(from._internal_timestamp_arrive());
  }
  if (from._internal_timeout_wait() != 0) {
    _internal_set_timeout_wait(from._internal_timeout_wait());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_MSG::CopyFrom(const PB_MSG_INTER_MSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_MSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_MSG::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_MSG::InternalSwap(PB_MSG_INTER_MSG* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_bin_, lhs_arena,
      &other->msg_bin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_MSG, timeout_wait_)
      + sizeof(PB_MSG_INTER_MSG::timeout_wait_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_MSG, srv_uuid_from_)>(
          reinterpret_cast<char*>(&srv_uuid_from_),
          reinterpret_cast<char*>(&other->srv_uuid_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_MSG::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[17]);
}

// ===================================================================

class PB_MSG_INTER_MSG_RES::_Internal {
 public:
};

PB_MSG_INTER_MSG_RES::PB_MSG_INTER_MSG_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_MSG_RES)
}
PB_MSG_INTER_MSG_RES::PB_MSG_INTER_MSG_RES(const PB_MSG_INTER_MSG_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_bin().empty()) {
    msg_bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_bin(), 
      GetArenaForAllocation());
  }
  ::memcpy(&srv_uuid_from_, &from.srv_uuid_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&srv_uuid_from_)) + sizeof(res_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_MSG_RES)
}

inline void PB_MSG_INTER_MSG_RES::SharedCtor() {
msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_uuid_from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&srv_uuid_from_)) + sizeof(res_));
}

PB_MSG_INTER_MSG_RES::~PB_MSG_INTER_MSG_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_MSG_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_MSG_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_bin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PB_MSG_INTER_MSG_RES::ArenaDtor(void* object) {
  PB_MSG_INTER_MSG_RES* _this = reinterpret_cast< PB_MSG_INTER_MSG_RES* >(object);
  (void)_this;
}
void PB_MSG_INTER_MSG_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_MSG_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_MSG_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_MSG_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_bin_.ClearToEmpty();
  ::memset(&srv_uuid_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&srv_uuid_from_)) + sizeof(res_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_MSG_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_uuid_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_uuid_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 srv_uuid_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          srv_uuid_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 srv_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          srv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msg_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes msg_bin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_msg_bin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msg_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msg_seq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          msg_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_arrive = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          timestamp_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeout_wait = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          timeout_wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PB_RESPONSE_CODE res = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::msgpacket::PB_RESPONSE_CODE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_MSG_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_MSG_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_uuid_from = 1;
  if (this->_internal_srv_uuid_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_uuid_from(), target);
  }

  // int64 srv_uuid_to = 2;
  if (this->_internal_srv_uuid_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_srv_uuid_to(), target);
  }

  // int32 srv_type = 3;
  if (this->_internal_srv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_srv_type(), target);
  }

  // int32 msg_type = 4;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_msg_type(), target);
  }

  // bytes msg_bin = 5;
  if (!this->_internal_msg_bin().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_msg_bin(), target);
  }

  // int64 msg_id = 6;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_msg_id(), target);
  }

  // int64 msg_seq = 7;
  if (this->_internal_msg_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_msg_seq(), target);
  }

  // int64 timestamp = 8;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_timestamp(), target);
  }

  // int64 timestamp_arrive = 9;
  if (this->_internal_timestamp_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_timestamp_arrive(), target);
  }

  // int64 timeout_wait = 10;
  if (this->_internal_timeout_wait() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timeout_wait(), target);
  }

  // .msgpacket.PB_RESPONSE_CODE res = 11;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_MSG_RES)
  return target;
}

size_t PB_MSG_INTER_MSG_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_MSG_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_bin = 5;
  if (!this->_internal_msg_bin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_bin());
  }

  // int64 srv_uuid_from = 1;
  if (this->_internal_srv_uuid_from() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid_from());
  }

  // int64 srv_uuid_to = 2;
  if (this->_internal_srv_uuid_to() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid_to());
  }

  // int32 srv_type = 3;
  if (this->_internal_srv_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_srv_type());
  }

  // int32 msg_type = 4;
  if (this->_internal_msg_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_type());
  }

  // int64 msg_id = 6;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msg_id());
  }

  // int64 msg_seq = 7;
  if (this->_internal_msg_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msg_seq());
  }

  // int64 timestamp = 8;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 timestamp_arrive = 9;
  if (this->_internal_timestamp_arrive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_arrive());
  }

  // int64 timeout_wait = 10;
  if (this->_internal_timeout_wait() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timeout_wait());
  }

  // .msgpacket.PB_RESPONSE_CODE res = 11;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_MSG_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_MSG_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_MSG_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_MSG_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_MSG_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_MSG_RES &>(from));
}


void PB_MSG_INTER_MSG_RES::MergeFrom(const PB_MSG_INTER_MSG_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_MSG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_bin().empty()) {
    _internal_set_msg_bin(from._internal_msg_bin());
  }
  if (from._internal_srv_uuid_from() != 0) {
    _internal_set_srv_uuid_from(from._internal_srv_uuid_from());
  }
  if (from._internal_srv_uuid_to() != 0) {
    _internal_set_srv_uuid_to(from._internal_srv_uuid_to());
  }
  if (from._internal_srv_type() != 0) {
    _internal_set_srv_type(from._internal_srv_type());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_msg_seq() != 0) {
    _internal_set_msg_seq(from._internal_msg_seq());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timestamp_arrive() != 0) {
    _internal_set_timestamp_arrive(from._internal_timestamp_arrive());
  }
  if (from._internal_timeout_wait() != 0) {
    _internal_set_timeout_wait(from._internal_timeout_wait());
  }
  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_MSG_RES::CopyFrom(const PB_MSG_INTER_MSG_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_MSG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_MSG_RES::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_MSG_RES::InternalSwap(PB_MSG_INTER_MSG_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_bin_, lhs_arena,
      &other->msg_bin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_MSG_RES, res_)
      + sizeof(PB_MSG_INTER_MSG_RES::res_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_MSG_RES, srv_uuid_from_)>(
          reinterpret_cast<char*>(&srv_uuid_from_),
          reinterpret_cast<char*>(&other->srv_uuid_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_MSG_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[18]);
}

// ===================================================================

class PB_MSG_INTER_CLISRV_REG_TO_QUE::_Internal {
 public:
};

PB_MSG_INTER_CLISRV_REG_TO_QUE::PB_MSG_INTER_CLISRV_REG_TO_QUE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE)
}
PB_MSG_INTER_CLISRV_REG_TO_QUE::PB_MSG_INTER_CLISRV_REG_TO_QUE(const PB_MSG_INTER_CLISRV_REG_TO_QUE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srv_uuid_, &from.srv_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&srv_type_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE)
}

inline void PB_MSG_INTER_CLISRV_REG_TO_QUE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&srv_type_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
}

PB_MSG_INTER_CLISRV_REG_TO_QUE::~PB_MSG_INTER_CLISRV_REG_TO_QUE() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_CLISRV_REG_TO_QUE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_CLISRV_REG_TO_QUE::ArenaDtor(void* object) {
  PB_MSG_INTER_CLISRV_REG_TO_QUE* _this = reinterpret_cast< PB_MSG_INTER_CLISRV_REG_TO_QUE* >(object);
  (void)_this;
}
void PB_MSG_INTER_CLISRV_REG_TO_QUE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_CLISRV_REG_TO_QUE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_CLISRV_REG_TO_QUE::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srv_uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srv_type_) -
      reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_CLISRV_REG_TO_QUE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 srv_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          srv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_CLISRV_REG_TO_QUE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_uuid(), target);
  }

  // int32 srv_type = 2;
  if (this->_internal_srv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_srv_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE)
  return target;
}

size_t PB_MSG_INTER_CLISRV_REG_TO_QUE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid());
  }

  // int32 srv_type = 2;
  if (this->_internal_srv_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_srv_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_CLISRV_REG_TO_QUE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_CLISRV_REG_TO_QUE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_CLISRV_REG_TO_QUE::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_CLISRV_REG_TO_QUE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_CLISRV_REG_TO_QUE *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_CLISRV_REG_TO_QUE &>(from));
}


void PB_MSG_INTER_CLISRV_REG_TO_QUE::MergeFrom(const PB_MSG_INTER_CLISRV_REG_TO_QUE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_uuid() != 0) {
    _internal_set_srv_uuid(from._internal_srv_uuid());
  }
  if (from._internal_srv_type() != 0) {
    _internal_set_srv_type(from._internal_srv_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_CLISRV_REG_TO_QUE::CopyFrom(const PB_MSG_INTER_CLISRV_REG_TO_QUE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_CLISRV_REG_TO_QUE::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_CLISRV_REG_TO_QUE::InternalSwap(PB_MSG_INTER_CLISRV_REG_TO_QUE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_CLISRV_REG_TO_QUE, srv_type_)
      + sizeof(PB_MSG_INTER_CLISRV_REG_TO_QUE::srv_type_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_CLISRV_REG_TO_QUE, srv_uuid_)>(
          reinterpret_cast<char*>(&srv_uuid_),
          reinterpret_cast<char*>(&other->srv_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_CLISRV_REG_TO_QUE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[19]);
}

// ===================================================================

class PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_Internal {
 public:
  static const ::msgpacket::PB_SRV_INFO_ALL& all_srv(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* msg);
  static const ::msgpacket::PB_SRV_INFO_ALL& local_all_srv(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* msg);
};

const ::msgpacket::PB_SRV_INFO_ALL&
PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_Internal::all_srv(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* msg) {
  return *msg->all_srv_;
}
const ::msgpacket::PB_SRV_INFO_ALL&
PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_Internal::local_all_srv(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* msg) {
  return *msg->local_all_srv_;
}
PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)
}
PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_all_srv()) {
    all_srv_ = new ::msgpacket::PB_SRV_INFO_ALL(*from.all_srv_);
  } else {
    all_srv_ = nullptr;
  }
  if (from._internal_has_local_all_srv()) {
    local_all_srv_ = new ::msgpacket::PB_SRV_INFO_ALL(*from.local_all_srv_);
  } else {
    local_all_srv_ = nullptr;
  }
  ::memcpy(&srv_uuid_, &from.srv_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&srv_type_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)
}

inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&all_srv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&srv_type_) -
    reinterpret_cast<char*>(&all_srv_)) + sizeof(srv_type_));
}

PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::~PB_MSG_INTER_CLISRV_REG_TO_QUE_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete all_srv_;
  if (this != internal_default_instance()) delete local_all_srv_;
}

void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::ArenaDtor(void* object) {
  PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* _this = reinterpret_cast< PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* >(object);
  (void)_this;
}
void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && all_srv_ != nullptr) {
    delete all_srv_;
  }
  all_srv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && local_all_srv_ != nullptr) {
    delete local_all_srv_;
  }
  local_all_srv_ = nullptr;
  ::memset(&srv_uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srv_type_) -
      reinterpret_cast<char*>(&srv_uuid_)) + sizeof(srv_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 srv_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          srv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PB_SRV_INFO_ALL all_srv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_srv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_all_srv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_uuid(), target);
  }

  // int32 srv_type = 2;
  if (this->_internal_srv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_srv_type(), target);
  }

  // .msgpacket.PB_SRV_INFO_ALL all_srv = 3;
  if (this->_internal_has_all_srv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::all_srv(this), target, stream);
  }

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 4;
  if (this->_internal_has_local_all_srv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::local_all_srv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)
  return target;
}

size_t PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.PB_SRV_INFO_ALL all_srv = 3;
  if (this->_internal_has_all_srv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *all_srv_);
  }

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 4;
  if (this->_internal_has_local_all_srv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_all_srv_);
  }

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid());
  }

  // int32 srv_type = 2;
  if (this->_internal_srv_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_srv_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_CLISRV_REG_TO_QUE_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES &>(from));
}


void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::MergeFrom(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_all_srv()) {
    _internal_mutable_all_srv()->::msgpacket::PB_SRV_INFO_ALL::MergeFrom(from._internal_all_srv());
  }
  if (from._internal_has_local_all_srv()) {
    _internal_mutable_local_all_srv()->::msgpacket::PB_SRV_INFO_ALL::MergeFrom(from._internal_local_all_srv());
  }
  if (from._internal_srv_uuid() != 0) {
    _internal_set_srv_uuid(from._internal_srv_uuid());
  }
  if (from._internal_srv_type() != 0) {
    _internal_set_srv_type(from._internal_srv_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::CopyFrom(const PB_MSG_INTER_CLISRV_REG_TO_QUE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_CLISRV_REG_TO_QUE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::InternalSwap(PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_CLISRV_REG_TO_QUE_RES, srv_type_)
      + sizeof(PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::srv_type_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_CLISRV_REG_TO_QUE_RES, all_srv_)>(
          reinterpret_cast<char*>(&all_srv_),
          reinterpret_cast<char*>(&other->all_srv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_CLISRV_REG_TO_QUE_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[20]);
}

// ===================================================================

class PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_Internal {
 public:
  static const ::msgpacket::PB_SRV_INFO_ALL& local_all_srv(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST* msg);
  static const ::msgpacket::PB_SRV_INFO_ALL& all_srv(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST* msg);
};

const ::msgpacket::PB_SRV_INFO_ALL&
PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_Internal::local_all_srv(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST* msg) {
  return *msg->local_all_srv_;
}
const ::msgpacket::PB_SRV_INFO_ALL&
PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_Internal::all_srv(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST* msg) {
  return *msg->all_srv_;
}
PB_MSG_INTER_QUESRV_REPORT_BROADCAST::PB_MSG_INTER_QUESRV_REPORT_BROADCAST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST)
}
PB_MSG_INTER_QUESRV_REPORT_BROADCAST::PB_MSG_INTER_QUESRV_REPORT_BROADCAST(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_all_srv()) {
    local_all_srv_ = new ::msgpacket::PB_SRV_INFO_ALL(*from.local_all_srv_);
  } else {
    local_all_srv_ = nullptr;
  }
  if (from._internal_has_all_srv()) {
    all_srv_ = new ::msgpacket::PB_SRV_INFO_ALL(*from.all_srv_);
  } else {
    all_srv_ = nullptr;
  }
  que_srv_id_ = from.que_srv_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST)
}

inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_all_srv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&que_srv_id_) -
    reinterpret_cast<char*>(&local_all_srv_)) + sizeof(que_srv_id_));
}

PB_MSG_INTER_QUESRV_REPORT_BROADCAST::~PB_MSG_INTER_QUESRV_REPORT_BROADCAST() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete local_all_srv_;
  if (this != internal_default_instance()) delete all_srv_;
}

void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::ArenaDtor(void* object) {
  PB_MSG_INTER_QUESRV_REPORT_BROADCAST* _this = reinterpret_cast< PB_MSG_INTER_QUESRV_REPORT_BROADCAST* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && local_all_srv_ != nullptr) {
    delete local_all_srv_;
  }
  local_all_srv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && all_srv_ != nullptr) {
    delete all_srv_;
  }
  all_srv_ = nullptr;
  que_srv_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 que_srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          que_srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_all_srv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PB_SRV_INFO_ALL all_srv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_srv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_que_srv_id(), target);
  }

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
  if (this->_internal_has_local_all_srv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::local_all_srv(this), target, stream);
  }

  // .msgpacket.PB_SRV_INFO_ALL all_srv = 3;
  if (this->_internal_has_all_srv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::all_srv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST)
  return target;
}

size_t PB_MSG_INTER_QUESRV_REPORT_BROADCAST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.PB_SRV_INFO_ALL local_all_srv = 2;
  if (this->_internal_has_local_all_srv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_all_srv_);
  }

  // .msgpacket.PB_SRV_INFO_ALL all_srv = 3;
  if (this->_internal_has_all_srv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *all_srv_);
  }

  // int64 que_srv_id = 1;
  if (this->_internal_que_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_que_srv_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUESRV_REPORT_BROADCAST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUESRV_REPORT_BROADCAST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUESRV_REPORT_BROADCAST::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUESRV_REPORT_BROADCAST *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUESRV_REPORT_BROADCAST &>(from));
}


void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::MergeFrom(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_local_all_srv()) {
    _internal_mutable_local_all_srv()->::msgpacket::PB_SRV_INFO_ALL::MergeFrom(from._internal_local_all_srv());
  }
  if (from._internal_has_all_srv()) {
    _internal_mutable_all_srv()->::msgpacket::PB_SRV_INFO_ALL::MergeFrom(from._internal_all_srv());
  }
  if (from._internal_que_srv_id() != 0) {
    _internal_set_que_srv_id(from._internal_que_srv_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::CopyFrom(const PB_MSG_INTER_QUESRV_REPORT_BROADCAST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUESRV_REPORT_BROADCAST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUESRV_REPORT_BROADCAST::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUESRV_REPORT_BROADCAST::InternalSwap(PB_MSG_INTER_QUESRV_REPORT_BROADCAST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUESRV_REPORT_BROADCAST, que_srv_id_)
      + sizeof(PB_MSG_INTER_QUESRV_REPORT_BROADCAST::que_srv_id_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUESRV_REPORT_BROADCAST, local_all_srv_)>(
          reinterpret_cast<char*>(&local_all_srv_),
          reinterpret_cast<char*>(&other->local_all_srv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUESRV_REPORT_BROADCAST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[21]);
}

// ===================================================================

class PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::_Internal {
 public:
};

PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf)
}
PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf(const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srv_uuid_, &from.srv_uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_on_line_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(is_on_line_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf)
}

inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_on_line_) -
    reinterpret_cast<char*>(&srv_uuid_)) + sizeof(is_on_line_));
}

PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::~PB_MSG_INTER_QUESRV_NTF_online_offline_ntf() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::ArenaDtor(void* object) {
  PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* _this = reinterpret_cast< PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srv_uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_on_line_) -
      reinterpret_cast<char*>(&srv_uuid_)) + sizeof(is_on_line_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 srv_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          srv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_on_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_on_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_uuid(), target);
  }

  // int32 srv_type = 2;
  if (this->_internal_srv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_srv_type(), target);
  }

  // bool is_on_line = 3;
  if (this->_internal_is_on_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_on_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf)
  return target;
}

size_t PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srv_uuid = 1;
  if (this->_internal_srv_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_uuid());
  }

  // int32 srv_type = 2;
  if (this->_internal_srv_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_srv_type());
  }

  // bool is_on_line = 3;
  if (this->_internal_is_on_line() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUESRV_NTF_online_offline_ntf *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf &>(from));
}


void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::MergeFrom(const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_uuid() != 0) {
    _internal_set_srv_uuid(from._internal_srv_uuid());
  }
  if (from._internal_srv_type() != 0) {
    _internal_set_srv_type(from._internal_srv_type());
  }
  if (from._internal_is_on_line() != 0) {
    _internal_set_is_on_line(from._internal_is_on_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::CopyFrom(const PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::InternalSwap(PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUESRV_NTF_online_offline_ntf, is_on_line_)
      + sizeof(PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::is_on_line_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_INTER_QUESRV_NTF_online_offline_ntf, srv_uuid_)>(
          reinterpret_cast<char*>(&srv_uuid_),
          reinterpret_cast<char*>(&other->srv_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[22]);
}

// ===================================================================

class PB_MSG_INTER_QUESRV_NTF::_Internal {
 public:
  using HasBits = decltype(std::declval<PB_MSG_INTER_QUESRV_NTF>()._has_bits_);
  static const ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf& online_offline(const PB_MSG_INTER_QUESRV_NTF* msg);
  static void set_has_online_offline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf&
PB_MSG_INTER_QUESRV_NTF::_Internal::online_offline(const PB_MSG_INTER_QUESRV_NTF* msg) {
  return *msg->online_offline_;
}
PB_MSG_INTER_QUESRV_NTF::PB_MSG_INTER_QUESRV_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUESRV_NTF)
}
PB_MSG_INTER_QUESRV_NTF::PB_MSG_INTER_QUESRV_NTF(const PB_MSG_INTER_QUESRV_NTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_online_offline()) {
    online_offline_ = new ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf(*from.online_offline_);
  } else {
    online_offline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUESRV_NTF)
}

inline void PB_MSG_INTER_QUESRV_NTF::SharedCtor() {
online_offline_ = nullptr;
}

PB_MSG_INTER_QUESRV_NTF::~PB_MSG_INTER_QUESRV_NTF() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUESRV_NTF)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUESRV_NTF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete online_offline_;
}

void PB_MSG_INTER_QUESRV_NTF::ArenaDtor(void* object) {
  PB_MSG_INTER_QUESRV_NTF* _this = reinterpret_cast< PB_MSG_INTER_QUESRV_NTF* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUESRV_NTF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUESRV_NTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUESRV_NTF::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUESRV_NTF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(online_offline_ != nullptr);
    online_offline_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUESRV_NTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf online_offline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_online_offline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUESRV_NTF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUESRV_NTF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf online_offline = 1;
  if (_internal_has_online_offline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::online_offline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUESRV_NTF)
  return target;
}

size_t PB_MSG_INTER_QUESRV_NTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUESRV_NTF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .msgpacket.PB_MSG_INTER_QUESRV_NTF.online_offline_ntf online_offline = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *online_offline_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUESRV_NTF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUESRV_NTF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUESRV_NTF::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUESRV_NTF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUESRV_NTF *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUESRV_NTF &>(from));
}


void PB_MSG_INTER_QUESRV_NTF::MergeFrom(const PB_MSG_INTER_QUESRV_NTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUESRV_NTF)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_online_offline()) {
    _internal_mutable_online_offline()->::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf::MergeFrom(from._internal_online_offline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUESRV_NTF::CopyFrom(const PB_MSG_INTER_QUESRV_NTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUESRV_NTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUESRV_NTF::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUESRV_NTF::InternalSwap(PB_MSG_INTER_QUESRV_NTF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(online_offline_, other->online_offline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUESRV_NTF::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[23]);
}

// ===================================================================

class PB_MSG_INTER_QUESRV_GET_SRVTYPE::_Internal {
 public:
};

PB_MSG_INTER_QUESRV_GET_SRVTYPE::PB_MSG_INTER_QUESRV_GET_SRVTYPE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE)
}
PB_MSG_INTER_QUESRV_GET_SRVTYPE::PB_MSG_INTER_QUESRV_GET_SRVTYPE(const PB_MSG_INTER_QUESRV_GET_SRVTYPE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srv_type_ = from.srv_type_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE)
}

inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE::SharedCtor() {
srv_type_ = 0;
}

PB_MSG_INTER_QUESRV_GET_SRVTYPE::~PB_MSG_INTER_QUESRV_GET_SRVTYPE() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_QUESRV_GET_SRVTYPE::ArenaDtor(void* object) {
  PB_MSG_INTER_QUESRV_GET_SRVTYPE* _this = reinterpret_cast< PB_MSG_INTER_QUESRV_GET_SRVTYPE* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUESRV_GET_SRVTYPE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUESRV_GET_SRVTYPE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUESRV_GET_SRVTYPE::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srv_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUESRV_GET_SRVTYPE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 srv_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUESRV_GET_SRVTYPE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 srv_type = 1;
  if (this->_internal_srv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_srv_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE)
  return target;
}

size_t PB_MSG_INTER_QUESRV_GET_SRVTYPE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 srv_type = 1;
  if (this->_internal_srv_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_srv_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUESRV_GET_SRVTYPE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUESRV_GET_SRVTYPE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUESRV_GET_SRVTYPE::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUESRV_GET_SRVTYPE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUESRV_GET_SRVTYPE *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUESRV_GET_SRVTYPE &>(from));
}


void PB_MSG_INTER_QUESRV_GET_SRVTYPE::MergeFrom(const PB_MSG_INTER_QUESRV_GET_SRVTYPE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_type() != 0) {
    _internal_set_srv_type(from._internal_srv_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUESRV_GET_SRVTYPE::CopyFrom(const PB_MSG_INTER_QUESRV_GET_SRVTYPE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUESRV_GET_SRVTYPE::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUESRV_GET_SRVTYPE::InternalSwap(PB_MSG_INTER_QUESRV_GET_SRVTYPE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(srv_type_, other->srv_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUESRV_GET_SRVTYPE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[24]);
}

// ===================================================================

class PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::_Internal {
 public:
};

PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arrary_srv_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)
}
PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES(const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arrary_srv_(from.arrary_srv_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srv_type_ = from.srv_type_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)
}

inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::SharedCtor() {
srv_type_ = 0;
}

PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::~PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::ArenaDtor(void* object) {
  PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES* _this = reinterpret_cast< PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES* >(object);
  (void)_this;
}
void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrary_srv_.Clear();
  srv_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 srv_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msgpacket.PB_SRV_INFO_ONE arrary_srv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrary_srv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 srv_type = 1;
  if (this->_internal_srv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_srv_type(), target);
  }

  // repeated .msgpacket.PB_SRV_INFO_ONE arrary_srv = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arrary_srv_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_arrary_srv(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)
  return target;
}

size_t PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msgpacket.PB_SRV_INFO_ONE arrary_srv = 2;
  total_size += 1UL * this->_internal_arrary_srv_size();
  for (const auto& msg : this->arrary_srv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 srv_type = 1;
  if (this->_internal_srv_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_srv_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES &>(from));
}


void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::MergeFrom(const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  arrary_srv_.MergeFrom(from.arrary_srv_);
  if (from._internal_srv_type() != 0) {
    _internal_set_srv_type(from._internal_srv_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::CopyFrom(const PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::IsInitialized() const {
  return true;
}

void PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::InternalSwap(PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arrary_srv_.InternalSwap(&other->arrary_srv_);
  swap(srv_type_, other->srv_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[25]);
}

// ===================================================================

class PB_MSG_CENTERSRV_GAMESRV_GETINFO::_Internal {
 public:
};

PB_MSG_CENTERSRV_GAMESRV_GETINFO::PB_MSG_CENTERSRV_GAMESRV_GETINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO)
}
PB_MSG_CENTERSRV_GAMESRV_GETINFO::PB_MSG_CENTERSRV_GAMESRV_GETINFO(const PB_MSG_CENTERSRV_GAMESRV_GETINFO& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_CENTERSRV_GAMESRV_GETINFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_CENTERSRV_GAMESRV_GETINFO::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_CENTERSRV_GAMESRV_GETINFO::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[26]);
}

// ===================================================================

class PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::_Internal {
 public:
};

PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)
}
PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES(const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  out_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    out_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_out_ip().empty()) {
    out_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_out_ip(), 
      GetArenaForAllocation());
  }
  out_port_ = from.out_port_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)
}

inline void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::SharedCtor() {
out_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  out_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
out_port_ = 0;
}

PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::~PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  out_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::ArenaDtor(void* object) {
  PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES* _this = reinterpret_cast< PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES* >(object);
  (void)_this;
}
void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_ip_.ClearToEmpty();
  out_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string out_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_out_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES.out_ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 out_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          out_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string out_ip = 1;
  if (!this->_internal_out_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_out_ip().data(), static_cast<int>(this->_internal_out_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES.out_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_out_ip(), target);
  }

  // int32 out_port = 2;
  if (this->_internal_out_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_out_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)
  return target;
}

size_t PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string out_ip = 1;
  if (!this->_internal_out_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_out_ip());
  }

  // int32 out_port = 2;
  if (this->_internal_out_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_out_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES &>(from));
}


void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::MergeFrom(const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_out_ip().empty()) {
    _internal_set_out_ip(from._internal_out_ip());
  }
  if (from._internal_out_port() != 0) {
    _internal_set_out_port(from._internal_out_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::CopyFrom(const PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::IsInitialized() const {
  return true;
}

void PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::InternalSwap(PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &out_ip_, lhs_arena,
      &other->out_ip_, rhs_arena
  );
  swap(out_port_, other->out_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[27]);
}

// ===================================================================

class PB_MSG_LOGON::_Internal {
 public:
};

PB_MSG_LOGON::PB_MSG_LOGON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_LOGON)
}
PB_MSG_LOGON::PB_MSG_LOGON(const PB_MSG_LOGON& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_ = from.client_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_LOGON)
}

inline void PB_MSG_LOGON::SharedCtor() {
client_id_ = int64_t{0};
}

PB_MSG_LOGON::~PB_MSG_LOGON() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_LOGON)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_LOGON::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_LOGON::ArenaDtor(void* object) {
  PB_MSG_LOGON* _this = reinterpret_cast< PB_MSG_LOGON* >(object);
  (void)_this;
}
void PB_MSG_LOGON::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_LOGON::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_LOGON::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_LOGON)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_LOGON::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_LOGON::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_LOGON)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_LOGON)
  return target;
}

size_t PB_MSG_LOGON::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_LOGON)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_LOGON::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_LOGON::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_LOGON::GetClassData() const { return &_class_data_; }

void PB_MSG_LOGON::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_LOGON *>(to)->MergeFrom(
      static_cast<const PB_MSG_LOGON &>(from));
}


void PB_MSG_LOGON::MergeFrom(const PB_MSG_LOGON& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_LOGON)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_LOGON::CopyFrom(const PB_MSG_LOGON& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_LOGON)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_LOGON::IsInitialized() const {
  return true;
}

void PB_MSG_LOGON::InternalSwap(PB_MSG_LOGON* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_LOGON::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[28]);
}

// ===================================================================

class PB_MSG_LOGON_RES::_Internal {
 public:
};

PB_MSG_LOGON_RES::PB_MSG_LOGON_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_LOGON_RES)
}
PB_MSG_LOGON_RES::PB_MSG_LOGON_RES(const PB_MSG_LOGON_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_LOGON_RES)
}

inline void PB_MSG_LOGON_RES::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(port_));
}

PB_MSG_LOGON_RES::~PB_MSG_LOGON_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_LOGON_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_LOGON_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PB_MSG_LOGON_RES::ArenaDtor(void* object) {
  PB_MSG_LOGON_RES* _this = reinterpret_cast< PB_MSG_LOGON_RES* >(object);
  (void)_this;
}
void PB_MSG_LOGON_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_LOGON_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_LOGON_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_LOGON_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_LOGON_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.PB_MSG_LOGON_RES.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_LOGON_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_LOGON_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_client_id(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.PB_MSG_LOGON_RES.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_LOGON_RES)
  return target;
}

size_t PB_MSG_LOGON_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_LOGON_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_client_id());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_LOGON_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_LOGON_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_LOGON_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_LOGON_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_LOGON_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_LOGON_RES &>(from));
}


void PB_MSG_LOGON_RES::MergeFrom(const PB_MSG_LOGON_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_LOGON_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_LOGON_RES::CopyFrom(const PB_MSG_LOGON_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_LOGON_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_LOGON_RES::IsInitialized() const {
  return true;
}

void PB_MSG_LOGON_RES::InternalSwap(PB_MSG_LOGON_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_LOGON_RES, port_)
      + sizeof(PB_MSG_LOGON_RES::port_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_LOGON_RES, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_LOGON_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[29]);
}

// ===================================================================

class PB_MSG_LOGONSRV_CENTERSRV_LOGON::_Internal {
 public:
};

PB_MSG_LOGONSRV_CENTERSRV_LOGON::PB_MSG_LOGONSRV_CENTERSRV_LOGON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON)
}
PB_MSG_LOGONSRV_CENTERSRV_LOGON::PB_MSG_LOGONSRV_CENTERSRV_LOGON(const PB_MSG_LOGONSRV_CENTERSRV_LOGON& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_ = from.client_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON)
}

inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON::SharedCtor() {
client_id_ = int64_t{0};
}

PB_MSG_LOGONSRV_CENTERSRV_LOGON::~PB_MSG_LOGONSRV_CENTERSRV_LOGON() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PB_MSG_LOGONSRV_CENTERSRV_LOGON::ArenaDtor(void* object) {
  PB_MSG_LOGONSRV_CENTERSRV_LOGON* _this = reinterpret_cast< PB_MSG_LOGONSRV_CENTERSRV_LOGON* >(object);
  (void)_this;
}
void PB_MSG_LOGONSRV_CENTERSRV_LOGON::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_LOGONSRV_CENTERSRV_LOGON::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_LOGONSRV_CENTERSRV_LOGON::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_LOGONSRV_CENTERSRV_LOGON::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_LOGONSRV_CENTERSRV_LOGON::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON)
  return target;
}

size_t PB_MSG_LOGONSRV_CENTERSRV_LOGON::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_LOGONSRV_CENTERSRV_LOGON::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_LOGONSRV_CENTERSRV_LOGON::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_LOGONSRV_CENTERSRV_LOGON::GetClassData() const { return &_class_data_; }

void PB_MSG_LOGONSRV_CENTERSRV_LOGON::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_LOGONSRV_CENTERSRV_LOGON *>(to)->MergeFrom(
      static_cast<const PB_MSG_LOGONSRV_CENTERSRV_LOGON &>(from));
}


void PB_MSG_LOGONSRV_CENTERSRV_LOGON::MergeFrom(const PB_MSG_LOGONSRV_CENTERSRV_LOGON& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_LOGONSRV_CENTERSRV_LOGON::CopyFrom(const PB_MSG_LOGONSRV_CENTERSRV_LOGON& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_LOGONSRV_CENTERSRV_LOGON::IsInitialized() const {
  return true;
}

void PB_MSG_LOGONSRV_CENTERSRV_LOGON::InternalSwap(PB_MSG_LOGONSRV_CENTERSRV_LOGON* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_LOGONSRV_CENTERSRV_LOGON::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[30]);
}

// ===================================================================

class PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_Internal {
 public:
};

PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)
}
PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES(const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)
}

inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(port_));
}

PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::~PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::ArenaDtor(void* object) {
  PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES* _this = reinterpret_cast< PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES* >(object);
  (void)_this;
}
void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 game_srv_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          game_srv_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_client_id(), target);
  }

  // int64 game_srv_uuid = 2;
  if (this->_internal_game_srv_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_game_srv_uuid(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)
  return target;
}

size_t PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_client_id());
  }

  // int64 game_srv_uuid = 2;
  if (this->_internal_game_srv_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_game_srv_uuid());
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::GetClassData() const { return &_class_data_; }

void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES *>(to)->MergeFrom(
      static_cast<const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES &>(from));
}


void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::MergeFrom(const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_game_srv_uuid() != 0) {
    _internal_set_game_srv_uuid(from._internal_game_srv_uuid());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::CopyFrom(const PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::IsInitialized() const {
  return true;
}

void PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::InternalSwap(PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES, port_)
      + sizeof(PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::port_)
      - PROTOBUF_FIELD_OFFSET(PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msginter_2eproto_getter, &descriptor_table_msginter_2eproto_once,
      file_level_metadata_msginter_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msgpacket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msgpacket::PB_SRV_INFO_ONE* Arena::CreateMaybeMessage< ::msgpacket::PB_SRV_INFO_ONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_SRV_INFO_ONE >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_SRV_INFO_ALL* Arena::CreateMaybeMessage< ::msgpacket::PB_SRV_INFO_ALL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_SRV_INFO_ALL >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUESRV_INFO* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUESRV_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUESRV_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUECENTER_REGISTER_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUECENTER_OFFLINE_NTF* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUECENTER_OFFLINE_NTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUECENTER_OFFLINE_NTF >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUECENTER_ONLINE_NTF* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUECENTER_ONLINE_NTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUECENTER_ONLINE_NTF >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUESRV_CONNECT* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUESRV_CONNECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUESRV_CONNECT >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUESRV_CONNECT_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUESRV_CONNECT_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUESRV_CONNECT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUECENTER_HEARTBEAT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUESRV_HEARTBEAT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_CLISRV_REG_MSGQUE_CENTER_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_CLISRV_HEARTBEAT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_MSG* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_MSG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_MSG >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_MSG_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_MSG_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_MSG_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_CLISRV_REG_TO_QUE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUESRV_REPORT_BROADCAST* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUESRV_REPORT_BROADCAST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUESRV_REPORT_BROADCAST >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUESRV_NTF_online_offline_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUESRV_NTF* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUESRV_NTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUESRV_NTF >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_INTER_QUESRV_GET_SRVTYPE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_CENTERSRV_GAMESRV_GETINFO_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_LOGON* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_LOGON >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_LOGON >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_LOGON_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_LOGON_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_LOGON_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES* Arena::CreateMaybeMessage< ::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PB_MSG_LOGONSRV_CENTERSRV_LOGON_RES >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
