// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgDB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msgDB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msgDB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msgDB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msgDB_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msgDB_2eproto;
namespace msgpacket {
class DBMapTest;
struct DBMapTestDefaultTypeInternal;
extern DBMapTestDefaultTypeInternal _DBMapTest_default_instance_;
class DBRepeatedTest;
struct DBRepeatedTestDefaultTypeInternal;
extern DBRepeatedTestDefaultTypeInternal _DBRepeatedTest_default_instance_;
class DBRepeatedTest_TestMapEntry_DoNotUse;
struct DBRepeatedTest_TestMapEntry_DoNotUseDefaultTypeInternal;
extern DBRepeatedTest_TestMapEntry_DoNotUseDefaultTypeInternal _DBRepeatedTest_TestMapEntry_DoNotUse_default_instance_;
class DBTest;
struct DBTestDefaultTypeInternal;
extern DBTestDefaultTypeInternal _DBTest_default_instance_;
class DBTestKey;
struct DBTestKeyDefaultTypeInternal;
extern DBTestKeyDefaultTypeInternal _DBTestKey_default_instance_;
class DBUserDetail;
struct DBUserDetailDefaultTypeInternal;
extern DBUserDetailDefaultTypeInternal _DBUserDetail_default_instance_;
class DBUserDetailKey;
struct DBUserDetailKeyDefaultTypeInternal;
extern DBUserDetailKeyDefaultTypeInternal _DBUserDetailKey_default_instance_;
class DBUserMain;
struct DBUserMainDefaultTypeInternal;
extern DBUserMainDefaultTypeInternal _DBUserMain_default_instance_;
class DBUserMainKey;
struct DBUserMainKeyDefaultTypeInternal;
extern DBUserMainKeyDefaultTypeInternal _DBUserMainKey_default_instance_;
class DBUserMainTest;
struct DBUserMainTestDefaultTypeInternal;
extern DBUserMainTestDefaultTypeInternal _DBUserMainTest_default_instance_;
}  // namespace msgpacket
PROTOBUF_NAMESPACE_OPEN
template<> ::msgpacket::DBMapTest* Arena::CreateMaybeMessage<::msgpacket::DBMapTest>(Arena*);
template<> ::msgpacket::DBRepeatedTest* Arena::CreateMaybeMessage<::msgpacket::DBRepeatedTest>(Arena*);
template<> ::msgpacket::DBRepeatedTest_TestMapEntry_DoNotUse* Arena::CreateMaybeMessage<::msgpacket::DBRepeatedTest_TestMapEntry_DoNotUse>(Arena*);
template<> ::msgpacket::DBTest* Arena::CreateMaybeMessage<::msgpacket::DBTest>(Arena*);
template<> ::msgpacket::DBTestKey* Arena::CreateMaybeMessage<::msgpacket::DBTestKey>(Arena*);
template<> ::msgpacket::DBUserDetail* Arena::CreateMaybeMessage<::msgpacket::DBUserDetail>(Arena*);
template<> ::msgpacket::DBUserDetailKey* Arena::CreateMaybeMessage<::msgpacket::DBUserDetailKey>(Arena*);
template<> ::msgpacket::DBUserMain* Arena::CreateMaybeMessage<::msgpacket::DBUserMain>(Arena*);
template<> ::msgpacket::DBUserMainKey* Arena::CreateMaybeMessage<::msgpacket::DBUserMainKey>(Arena*);
template<> ::msgpacket::DBUserMainTest* Arena::CreateMaybeMessage<::msgpacket::DBUserMainTest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msgpacket {

enum EN_TEST : int {
  EN_TEST0 = 0,
  EN_TEST1 = 1,
  EN_TEST2 = 2,
  EN_TEST3 = 3,
  EN_TEST_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EN_TEST_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EN_TEST_IsValid(int value);
constexpr EN_TEST EN_TEST_MIN = EN_TEST0;
constexpr EN_TEST EN_TEST_MAX = EN_TEST3;
constexpr int EN_TEST_ARRAYSIZE = EN_TEST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EN_TEST_descriptor();
template<typename T>
inline const std::string& EN_TEST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EN_TEST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EN_TEST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EN_TEST_descriptor(), enum_t_value);
}
inline bool EN_TEST_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EN_TEST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EN_TEST>(
    EN_TEST_descriptor(), name, value);
}
// ===================================================================

class DBUserMainKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.DBUserMainKey) */ {
 public:
  inline DBUserMainKey() : DBUserMainKey(nullptr) {}
  ~DBUserMainKey() override;
  explicit constexpr DBUserMainKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserMainKey(const DBUserMainKey& from);
  DBUserMainKey(DBUserMainKey&& from) noexcept
    : DBUserMainKey() {
    *this = ::std::move(from);
  }

  inline DBUserMainKey& operator=(const DBUserMainKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserMainKey& operator=(DBUserMainKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserMainKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserMainKey* internal_default_instance() {
    return reinterpret_cast<const DBUserMainKey*>(
               &_DBUserMainKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DBUserMainKey& a, DBUserMainKey& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserMainKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserMainKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserMainKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserMainKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserMainKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserMainKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserMainKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.DBUserMainKey";
  }
  protected:
  explicit DBUserMainKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.DBUserMainKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgDB_2eproto;
};
// -------------------------------------------------------------------

class DBUserMain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.DBUserMain) */ {
 public:
  inline DBUserMain() : DBUserMain(nullptr) {}
  ~DBUserMain() override;
  explicit constexpr DBUserMain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserMain(const DBUserMain& from);
  DBUserMain(DBUserMain&& from) noexcept
    : DBUserMain() {
    *this = ::std::move(from);
  }

  inline DBUserMain& operator=(const DBUserMain& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserMain& operator=(DBUserMain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserMain& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserMain* internal_default_instance() {
    return reinterpret_cast<const DBUserMain*>(
               &_DBUserMain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DBUserMain& a, DBUserMain& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserMain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserMain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserMain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserMain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserMain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserMain& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserMain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.DBUserMain";
  }
  protected:
  explicit DBUserMain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string _id = 1;
  void clear__id();
  const std::string& _id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__id(ArgT0&& arg0, ArgT... args);
  std::string* mutable__id();
  PROTOBUF_NODISCARD std::string* release__id();
  void set_allocated__id(std::string* _id);
  private:
  const std::string& _internal__id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__id(const std::string& value);
  std::string* _internal_mutable__id();
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.DBUserMain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _id_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgDB_2eproto;
};
// -------------------------------------------------------------------

class DBUserDetailKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.DBUserDetailKey) */ {
 public:
  inline DBUserDetailKey() : DBUserDetailKey(nullptr) {}
  ~DBUserDetailKey() override;
  explicit constexpr DBUserDetailKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserDetailKey(const DBUserDetailKey& from);
  DBUserDetailKey(DBUserDetailKey&& from) noexcept
    : DBUserDetailKey() {
    *this = ::std::move(from);
  }

  inline DBUserDetailKey& operator=(const DBUserDetailKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserDetailKey& operator=(DBUserDetailKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserDetailKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserDetailKey* internal_default_instance() {
    return reinterpret_cast<const DBUserDetailKey*>(
               &_DBUserDetailKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DBUserDetailKey& a, DBUserDetailKey& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserDetailKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserDetailKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserDetailKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserDetailKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserDetailKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserDetailKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserDetailKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.DBUserDetailKey";
  }
  protected:
  explicit DBUserDetailKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.DBUserDetailKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgDB_2eproto;
};
// -------------------------------------------------------------------

class DBUserDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.DBUserDetail) */ {
 public:
  inline DBUserDetail() : DBUserDetail(nullptr) {}
  ~DBUserDetail() override;
  explicit constexpr DBUserDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserDetail(const DBUserDetail& from);
  DBUserDetail(DBUserDetail&& from) noexcept
    : DBUserDetail() {
    *this = ::std::move(from);
  }

  inline DBUserDetail& operator=(const DBUserDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserDetail& operator=(DBUserDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserDetail* internal_default_instance() {
    return reinterpret_cast<const DBUserDetail*>(
               &_DBUserDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DBUserDetail& a, DBUserDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserDetail& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.DBUserDetail";
  }
  protected:
  explicit DBUserDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDetailDataFieldNumber = 2,
    kDetailIdFieldNumber = 3,
  };
  // string _id = 1;
  void clear__id();
  const std::string& _id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__id(ArgT0&& arg0, ArgT... args);
  std::string* mutable__id();
  PROTOBUF_NODISCARD std::string* release__id();
  void set_allocated__id(std::string* _id);
  private:
  const std::string& _internal__id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__id(const std::string& value);
  std::string* _internal_mutable__id();
  public:

  // string detail_data = 2;
  void clear_detail_data();
  const std::string& detail_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail_data();
  PROTOBUF_NODISCARD std::string* release_detail_data();
  void set_allocated_detail_data(std::string* detail_data);
  private:
  const std::string& _internal_detail_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail_data(const std::string& value);
  std::string* _internal_mutable_detail_data();
  public:

  // int32 detail_id = 3;
  void clear_detail_id();
  int32_t detail_id() const;
  void set_detail_id(int32_t value);
  private:
  int32_t _internal_detail_id() const;
  void _internal_set_detail_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.DBUserDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_data_;
  int32_t detail_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgDB_2eproto;
};
// -------------------------------------------------------------------

class DBUserMainTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.DBUserMainTest) */ {
 public:
  inline DBUserMainTest() : DBUserMainTest(nullptr) {}
  ~DBUserMainTest() override;
  explicit constexpr DBUserMainTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserMainTest(const DBUserMainTest& from);
  DBUserMainTest(DBUserMainTest&& from) noexcept
    : DBUserMainTest() {
    *this = ::std::move(from);
  }

  inline DBUserMainTest& operator=(const DBUserMainTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserMainTest& operator=(DBUserMainTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserMainTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserMainTest* internal_default_instance() {
    return reinterpret_cast<const DBUserMainTest*>(
               &_DBUserMainTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DBUserMainTest& a, DBUserMainTest& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserMainTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserMainTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserMainTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserMainTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserMainTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserMainTest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserMainTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.DBUserMainTest";
  }
  protected:
  explicit DBUserMainTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestRepeatedFieldNumber = 4,
    kIdFieldNumber = 1,
    kStr1FieldNumber = 6,
    kStr2FieldNumber = 7,
    kDetailFieldNumber = 3,
    kUserIdFieldNumber = 2,
    kEnTestFieldNumber = 5,
    kInt1FieldNumber = 8,
    kInt2FieldNumber = 9,
  };
  // repeated .msgpacket.DBRepeatedTest test_repeated = 4;
  int test_repeated_size() const;
  private:
  int _internal_test_repeated_size() const;
  public:
  void clear_test_repeated();
  ::msgpacket::DBRepeatedTest* mutable_test_repeated(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::DBRepeatedTest >*
      mutable_test_repeated();
  private:
  const ::msgpacket::DBRepeatedTest& _internal_test_repeated(int index) const;
  ::msgpacket::DBRepeatedTest* _internal_add_test_repeated();
  public:
  const ::msgpacket::DBRepeatedTest& test_repeated(int index) const;
  ::msgpacket::DBRepeatedTest* add_test_repeated();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::DBRepeatedTest >&
      test_repeated() const;

  // string _id = 1;
  void clear__id();
  const std::string& _id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__id(ArgT0&& arg0, ArgT... args);
  std::string* mutable__id();
  PROTOBUF_NODISCARD std::string* release__id();
  void set_allocated__id(std::string* _id);
  private:
  const std::string& _internal__id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__id(const std::string& value);
  std::string* _internal_mutable__id();
  public:

  // string str1 = 6;
  void clear_str1();
  const std::string& str1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str1();
  PROTOBUF_NODISCARD std::string* release_str1();
  void set_allocated_str1(std::string* str1);
  private:
  const std::string& _internal_str1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str1(const std::string& value);
  std::string* _internal_mutable_str1();
  public:

  // string str2 = 7;
  void clear_str2();
  const std::string& str2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str2();
  PROTOBUF_NODISCARD std::string* release_str2();
  void set_allocated_str2(std::string* str2);
  private:
  const std::string& _internal_str2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str2(const std::string& value);
  std::string* _internal_mutable_str2();
  public:

  // .msgpacket.DBUserDetail detail = 3;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const ::msgpacket::DBUserDetail& detail() const;
  PROTOBUF_NODISCARD ::msgpacket::DBUserDetail* release_detail();
  ::msgpacket::DBUserDetail* mutable_detail();
  void set_allocated_detail(::msgpacket::DBUserDetail* detail);
  private:
  const ::msgpacket::DBUserDetail& _internal_detail() const;
  ::msgpacket::DBUserDetail* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::msgpacket::DBUserDetail* detail);
  ::msgpacket::DBUserDetail* unsafe_arena_release_detail();

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // .msgpacket.EN_TEST en_test = 5;
  void clear_en_test();
  ::msgpacket::EN_TEST en_test() const;
  void set_en_test(::msgpacket::EN_TEST value);
  private:
  ::msgpacket::EN_TEST _internal_en_test() const;
  void _internal_set_en_test(::msgpacket::EN_TEST value);
  public:

  // int32 int1 = 8;
  void clear_int1();
  int32_t int1() const;
  void set_int1(int32_t value);
  private:
  int32_t _internal_int1() const;
  void _internal_set_int1(int32_t value);
  public:

  // int32 int2 = 9;
  void clear_int2();
  int32_t int2() const;
  void set_int2(int32_t value);
  private:
  int32_t _internal_int2() const;
  void _internal_set_int2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.DBUserMainTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::DBRepeatedTest > test_repeated_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str2_;
  ::msgpacket::DBUserDetail* detail_;
  int64_t user_id_;
  int en_test_;
  int32_t int1_;
  int32_t int2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgDB_2eproto;
};
// -------------------------------------------------------------------

class DBMapTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.DBMapTest) */ {
 public:
  inline DBMapTest() : DBMapTest(nullptr) {}
  ~DBMapTest() override;
  explicit constexpr DBMapTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBMapTest(const DBMapTest& from);
  DBMapTest(DBMapTest&& from) noexcept
    : DBMapTest() {
    *this = ::std::move(from);
  }

  inline DBMapTest& operator=(const DBMapTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBMapTest& operator=(DBMapTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBMapTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBMapTest* internal_default_instance() {
    return reinterpret_cast<const DBMapTest*>(
               &_DBMapTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DBMapTest& a, DBMapTest& b) {
    a.Swap(&b);
  }
  inline void Swap(DBMapTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBMapTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBMapTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBMapTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBMapTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBMapTest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBMapTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.DBMapTest";
  }
  protected:
  explicit DBMapTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapStrFieldNumber = 1,
    kMapIntFieldNumber = 2,
  };
  // string map_str = 1;
  void clear_map_str();
  const std::string& map_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_str();
  PROTOBUF_NODISCARD std::string* release_map_str();
  void set_allocated_map_str(std::string* map_str);
  private:
  const std::string& _internal_map_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_str(const std::string& value);
  std::string* _internal_mutable_map_str();
  public:

  // int64 map_int = 2;
  void clear_map_int();
  int64_t map_int() const;
  void set_map_int(int64_t value);
  private:
  int64_t _internal_map_int() const;
  void _internal_set_map_int(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.DBMapTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_str_;
  int64_t map_int_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgDB_2eproto;
};
// -------------------------------------------------------------------

class DBRepeatedTest_TestMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DBRepeatedTest_TestMapEntry_DoNotUse, 
    int64_t, ::msgpacket::DBMapTest,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DBRepeatedTest_TestMapEntry_DoNotUse, 
    int64_t, ::msgpacket::DBMapTest,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DBRepeatedTest_TestMapEntry_DoNotUse();
  explicit constexpr DBRepeatedTest_TestMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DBRepeatedTest_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DBRepeatedTest_TestMapEntry_DoNotUse& other);
  static const DBRepeatedTest_TestMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DBRepeatedTest_TestMapEntry_DoNotUse*>(&_DBRepeatedTest_TestMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class DBRepeatedTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.DBRepeatedTest) */ {
 public:
  inline DBRepeatedTest() : DBRepeatedTest(nullptr) {}
  ~DBRepeatedTest() override;
  explicit constexpr DBRepeatedTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRepeatedTest(const DBRepeatedTest& from);
  DBRepeatedTest(DBRepeatedTest&& from) noexcept
    : DBRepeatedTest() {
    *this = ::std::move(from);
  }

  inline DBRepeatedTest& operator=(const DBRepeatedTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRepeatedTest& operator=(DBRepeatedTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRepeatedTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRepeatedTest* internal_default_instance() {
    return reinterpret_cast<const DBRepeatedTest*>(
               &_DBRepeatedTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DBRepeatedTest& a, DBRepeatedTest& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRepeatedTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRepeatedTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBRepeatedTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBRepeatedTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRepeatedTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBRepeatedTest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRepeatedTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.DBRepeatedTest";
  }
  protected:
  explicit DBRepeatedTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTestMapFieldNumber = 3,
    kRepeatedStrFieldNumber = 1,
    kRepeatedIntFieldNumber = 2,
  };
  // map<int64, .msgpacket.DBMapTest> test_map = 3;
  int test_map_size() const;
  private:
  int _internal_test_map_size() const;
  public:
  void clear_test_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >&
      _internal_test_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >*
      _internal_mutable_test_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >&
      test_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >*
      mutable_test_map();

  // string repeated_str = 1;
  void clear_repeated_str();
  const std::string& repeated_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_repeated_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_repeated_str();
  PROTOBUF_NODISCARD std::string* release_repeated_str();
  void set_allocated_repeated_str(std::string* repeated_str);
  private:
  const std::string& _internal_repeated_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_repeated_str(const std::string& value);
  std::string* _internal_mutable_repeated_str();
  public:

  // int64 repeated_int = 2;
  void clear_repeated_int();
  int64_t repeated_int() const;
  void set_repeated_int(int64_t value);
  private:
  int64_t _internal_repeated_int() const;
  void _internal_set_repeated_int(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.DBRepeatedTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DBRepeatedTest_TestMapEntry_DoNotUse,
      int64_t, ::msgpacket::DBMapTest,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> test_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repeated_str_;
  int64_t repeated_int_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgDB_2eproto;
};
// -------------------------------------------------------------------

class DBTestKey final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msgpacket.DBTestKey) */ {
 public:
  inline DBTestKey() : DBTestKey(nullptr) {}
  explicit constexpr DBTestKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBTestKey(const DBTestKey& from);
  DBTestKey(DBTestKey&& from) noexcept
    : DBTestKey() {
    *this = ::std::move(from);
  }

  inline DBTestKey& operator=(const DBTestKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBTestKey& operator=(DBTestKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBTestKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBTestKey* internal_default_instance() {
    return reinterpret_cast<const DBTestKey*>(
               &_DBTestKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DBTestKey& a, DBTestKey& b) {
    a.Swap(&b);
  }
  inline void Swap(DBTestKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBTestKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBTestKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBTestKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DBTestKey& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DBTestKey& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.DBTestKey";
  }
  protected:
  explicit DBTestKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msgpacket.DBTestKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgDB_2eproto;
};
// -------------------------------------------------------------------

class DBTest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msgpacket.DBTest) */ {
 public:
  inline DBTest() : DBTest(nullptr) {}
  explicit constexpr DBTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBTest(const DBTest& from);
  DBTest(DBTest&& from) noexcept
    : DBTest() {
    *this = ::std::move(from);
  }

  inline DBTest& operator=(const DBTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBTest& operator=(DBTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBTest* internal_default_instance() {
    return reinterpret_cast<const DBTest*>(
               &_DBTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DBTest& a, DBTest& b) {
    a.Swap(&b);
  }
  inline void Swap(DBTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DBTest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DBTest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.DBTest";
  }
  protected:
  explicit DBTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msgpacket.DBTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msgDB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DBUserMainKey

// int64 user_id = 1;
inline void DBUserMainKey::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t DBUserMainKey::_internal_user_id() const {
  return user_id_;
}
inline int64_t DBUserMainKey::user_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMainKey.user_id)
  return _internal_user_id();
}
inline void DBUserMainKey::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void DBUserMainKey::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.DBUserMainKey.user_id)
}

// -------------------------------------------------------------------

// DBUserMain

// string _id = 1;
inline void DBUserMain::clear__id() {
  _id_.ClearToEmpty();
}
inline const std::string& DBUserMain::_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMain._id)
  return _internal__id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserMain::set__id(ArgT0&& arg0, ArgT... args) {
 
 _id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.DBUserMain._id)
}
inline std::string* DBUserMain::mutable__id() {
  std::string* _s = _internal_mutable__id();
  // @@protoc_insertion_point(field_mutable:msgpacket.DBUserMain._id)
  return _s;
}
inline const std::string& DBUserMain::_internal__id() const {
  return _id_.Get();
}
inline void DBUserMain::_internal_set__id(const std::string& value) {
  
  _id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserMain::_internal_mutable__id() {
  
  return _id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserMain::release__id() {
  // @@protoc_insertion_point(field_release:msgpacket.DBUserMain._id)
  return _id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserMain::set_allocated__id(std::string* _id) {
  if (_id != nullptr) {
    
  } else {
    
  }
  _id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    _id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.DBUserMain._id)
}

// int64 user_id = 2;
inline void DBUserMain::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t DBUserMain::_internal_user_id() const {
  return user_id_;
}
inline int64_t DBUserMain::user_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMain.user_id)
  return _internal_user_id();
}
inline void DBUserMain::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void DBUserMain::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.DBUserMain.user_id)
}

// -------------------------------------------------------------------

// DBUserDetailKey

// int64 user_id = 1;
inline void DBUserDetailKey::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t DBUserDetailKey::_internal_user_id() const {
  return user_id_;
}
inline int64_t DBUserDetailKey::user_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserDetailKey.user_id)
  return _internal_user_id();
}
inline void DBUserDetailKey::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void DBUserDetailKey::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.DBUserDetailKey.user_id)
}

// -------------------------------------------------------------------

// DBUserDetail

// string _id = 1;
inline void DBUserDetail::clear__id() {
  _id_.ClearToEmpty();
}
inline const std::string& DBUserDetail::_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserDetail._id)
  return _internal__id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserDetail::set__id(ArgT0&& arg0, ArgT... args) {
 
 _id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.DBUserDetail._id)
}
inline std::string* DBUserDetail::mutable__id() {
  std::string* _s = _internal_mutable__id();
  // @@protoc_insertion_point(field_mutable:msgpacket.DBUserDetail._id)
  return _s;
}
inline const std::string& DBUserDetail::_internal__id() const {
  return _id_.Get();
}
inline void DBUserDetail::_internal_set__id(const std::string& value) {
  
  _id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserDetail::_internal_mutable__id() {
  
  return _id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserDetail::release__id() {
  // @@protoc_insertion_point(field_release:msgpacket.DBUserDetail._id)
  return _id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserDetail::set_allocated__id(std::string* _id) {
  if (_id != nullptr) {
    
  } else {
    
  }
  _id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    _id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.DBUserDetail._id)
}

// string detail_data = 2;
inline void DBUserDetail::clear_detail_data() {
  detail_data_.ClearToEmpty();
}
inline const std::string& DBUserDetail::detail_data() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserDetail.detail_data)
  return _internal_detail_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserDetail::set_detail_data(ArgT0&& arg0, ArgT... args) {
 
 detail_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.DBUserDetail.detail_data)
}
inline std::string* DBUserDetail::mutable_detail_data() {
  std::string* _s = _internal_mutable_detail_data();
  // @@protoc_insertion_point(field_mutable:msgpacket.DBUserDetail.detail_data)
  return _s;
}
inline const std::string& DBUserDetail::_internal_detail_data() const {
  return detail_data_.Get();
}
inline void DBUserDetail::_internal_set_detail_data(const std::string& value) {
  
  detail_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserDetail::_internal_mutable_detail_data() {
  
  return detail_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserDetail::release_detail_data() {
  // @@protoc_insertion_point(field_release:msgpacket.DBUserDetail.detail_data)
  return detail_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserDetail::set_allocated_detail_data(std::string* detail_data) {
  if (detail_data != nullptr) {
    
  } else {
    
  }
  detail_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (detail_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    detail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.DBUserDetail.detail_data)
}

// int32 detail_id = 3;
inline void DBUserDetail::clear_detail_id() {
  detail_id_ = 0;
}
inline int32_t DBUserDetail::_internal_detail_id() const {
  return detail_id_;
}
inline int32_t DBUserDetail::detail_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserDetail.detail_id)
  return _internal_detail_id();
}
inline void DBUserDetail::_internal_set_detail_id(int32_t value) {
  
  detail_id_ = value;
}
inline void DBUserDetail::set_detail_id(int32_t value) {
  _internal_set_detail_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.DBUserDetail.detail_id)
}

// -------------------------------------------------------------------

// DBUserMainTest

// string _id = 1;
inline void DBUserMainTest::clear__id() {
  _id_.ClearToEmpty();
}
inline const std::string& DBUserMainTest::_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMainTest._id)
  return _internal__id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserMainTest::set__id(ArgT0&& arg0, ArgT... args) {
 
 _id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.DBUserMainTest._id)
}
inline std::string* DBUserMainTest::mutable__id() {
  std::string* _s = _internal_mutable__id();
  // @@protoc_insertion_point(field_mutable:msgpacket.DBUserMainTest._id)
  return _s;
}
inline const std::string& DBUserMainTest::_internal__id() const {
  return _id_.Get();
}
inline void DBUserMainTest::_internal_set__id(const std::string& value) {
  
  _id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserMainTest::_internal_mutable__id() {
  
  return _id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserMainTest::release__id() {
  // @@protoc_insertion_point(field_release:msgpacket.DBUserMainTest._id)
  return _id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserMainTest::set_allocated__id(std::string* _id) {
  if (_id != nullptr) {
    
  } else {
    
  }
  _id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    _id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.DBUserMainTest._id)
}

// int64 user_id = 2;
inline void DBUserMainTest::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t DBUserMainTest::_internal_user_id() const {
  return user_id_;
}
inline int64_t DBUserMainTest::user_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMainTest.user_id)
  return _internal_user_id();
}
inline void DBUserMainTest::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void DBUserMainTest::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.DBUserMainTest.user_id)
}

// .msgpacket.DBUserDetail detail = 3;
inline bool DBUserMainTest::_internal_has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline bool DBUserMainTest::has_detail() const {
  return _internal_has_detail();
}
inline void DBUserMainTest::clear_detail() {
  if (GetArenaForAllocation() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
inline const ::msgpacket::DBUserDetail& DBUserMainTest::_internal_detail() const {
  const ::msgpacket::DBUserDetail* p = detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::DBUserDetail&>(
      ::msgpacket::_DBUserDetail_default_instance_);
}
inline const ::msgpacket::DBUserDetail& DBUserMainTest::detail() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMainTest.detail)
  return _internal_detail();
}
inline void DBUserMainTest::unsafe_arena_set_allocated_detail(
    ::msgpacket::DBUserDetail* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail_);
  }
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.DBUserMainTest.detail)
}
inline ::msgpacket::DBUserDetail* DBUserMainTest::release_detail() {
  
  ::msgpacket::DBUserDetail* temp = detail_;
  detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::DBUserDetail* DBUserMainTest::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:msgpacket.DBUserMainTest.detail)
  
  ::msgpacket::DBUserDetail* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::msgpacket::DBUserDetail* DBUserMainTest::_internal_mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::DBUserDetail>(GetArenaForAllocation());
    detail_ = p;
  }
  return detail_;
}
inline ::msgpacket::DBUserDetail* DBUserMainTest::mutable_detail() {
  ::msgpacket::DBUserDetail* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:msgpacket.DBUserMainTest.detail)
  return _msg;
}
inline void DBUserMainTest::set_allocated_detail(::msgpacket::DBUserDetail* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete detail_;
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::DBUserDetail>::GetOwningArena(detail);
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.DBUserMainTest.detail)
}

// repeated .msgpacket.DBRepeatedTest test_repeated = 4;
inline int DBUserMainTest::_internal_test_repeated_size() const {
  return test_repeated_.size();
}
inline int DBUserMainTest::test_repeated_size() const {
  return _internal_test_repeated_size();
}
inline void DBUserMainTest::clear_test_repeated() {
  test_repeated_.Clear();
}
inline ::msgpacket::DBRepeatedTest* DBUserMainTest::mutable_test_repeated(int index) {
  // @@protoc_insertion_point(field_mutable:msgpacket.DBUserMainTest.test_repeated)
  return test_repeated_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::DBRepeatedTest >*
DBUserMainTest::mutable_test_repeated() {
  // @@protoc_insertion_point(field_mutable_list:msgpacket.DBUserMainTest.test_repeated)
  return &test_repeated_;
}
inline const ::msgpacket::DBRepeatedTest& DBUserMainTest::_internal_test_repeated(int index) const {
  return test_repeated_.Get(index);
}
inline const ::msgpacket::DBRepeatedTest& DBUserMainTest::test_repeated(int index) const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMainTest.test_repeated)
  return _internal_test_repeated(index);
}
inline ::msgpacket::DBRepeatedTest* DBUserMainTest::_internal_add_test_repeated() {
  return test_repeated_.Add();
}
inline ::msgpacket::DBRepeatedTest* DBUserMainTest::add_test_repeated() {
  ::msgpacket::DBRepeatedTest* _add = _internal_add_test_repeated();
  // @@protoc_insertion_point(field_add:msgpacket.DBUserMainTest.test_repeated)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::DBRepeatedTest >&
DBUserMainTest::test_repeated() const {
  // @@protoc_insertion_point(field_list:msgpacket.DBUserMainTest.test_repeated)
  return test_repeated_;
}

// .msgpacket.EN_TEST en_test = 5;
inline void DBUserMainTest::clear_en_test() {
  en_test_ = 0;
}
inline ::msgpacket::EN_TEST DBUserMainTest::_internal_en_test() const {
  return static_cast< ::msgpacket::EN_TEST >(en_test_);
}
inline ::msgpacket::EN_TEST DBUserMainTest::en_test() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMainTest.en_test)
  return _internal_en_test();
}
inline void DBUserMainTest::_internal_set_en_test(::msgpacket::EN_TEST value) {
  
  en_test_ = value;
}
inline void DBUserMainTest::set_en_test(::msgpacket::EN_TEST value) {
  _internal_set_en_test(value);
  // @@protoc_insertion_point(field_set:msgpacket.DBUserMainTest.en_test)
}

// string str1 = 6;
inline void DBUserMainTest::clear_str1() {
  str1_.ClearToEmpty();
}
inline const std::string& DBUserMainTest::str1() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMainTest.str1)
  return _internal_str1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserMainTest::set_str1(ArgT0&& arg0, ArgT... args) {
 
 str1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.DBUserMainTest.str1)
}
inline std::string* DBUserMainTest::mutable_str1() {
  std::string* _s = _internal_mutable_str1();
  // @@protoc_insertion_point(field_mutable:msgpacket.DBUserMainTest.str1)
  return _s;
}
inline const std::string& DBUserMainTest::_internal_str1() const {
  return str1_.Get();
}
inline void DBUserMainTest::_internal_set_str1(const std::string& value) {
  
  str1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserMainTest::_internal_mutable_str1() {
  
  return str1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserMainTest::release_str1() {
  // @@protoc_insertion_point(field_release:msgpacket.DBUserMainTest.str1)
  return str1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserMainTest::set_allocated_str1(std::string* str1) {
  if (str1 != nullptr) {
    
  } else {
    
  }
  str1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.DBUserMainTest.str1)
}

// string str2 = 7;
inline void DBUserMainTest::clear_str2() {
  str2_.ClearToEmpty();
}
inline const std::string& DBUserMainTest::str2() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMainTest.str2)
  return _internal_str2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserMainTest::set_str2(ArgT0&& arg0, ArgT... args) {
 
 str2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.DBUserMainTest.str2)
}
inline std::string* DBUserMainTest::mutable_str2() {
  std::string* _s = _internal_mutable_str2();
  // @@protoc_insertion_point(field_mutable:msgpacket.DBUserMainTest.str2)
  return _s;
}
inline const std::string& DBUserMainTest::_internal_str2() const {
  return str2_.Get();
}
inline void DBUserMainTest::_internal_set_str2(const std::string& value) {
  
  str2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserMainTest::_internal_mutable_str2() {
  
  return str2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserMainTest::release_str2() {
  // @@protoc_insertion_point(field_release:msgpacket.DBUserMainTest.str2)
  return str2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserMainTest::set_allocated_str2(std::string* str2) {
  if (str2 != nullptr) {
    
  } else {
    
  }
  str2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.DBUserMainTest.str2)
}

// int32 int1 = 8;
inline void DBUserMainTest::clear_int1() {
  int1_ = 0;
}
inline int32_t DBUserMainTest::_internal_int1() const {
  return int1_;
}
inline int32_t DBUserMainTest::int1() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMainTest.int1)
  return _internal_int1();
}
inline void DBUserMainTest::_internal_set_int1(int32_t value) {
  
  int1_ = value;
}
inline void DBUserMainTest::set_int1(int32_t value) {
  _internal_set_int1(value);
  // @@protoc_insertion_point(field_set:msgpacket.DBUserMainTest.int1)
}

// int32 int2 = 9;
inline void DBUserMainTest::clear_int2() {
  int2_ = 0;
}
inline int32_t DBUserMainTest::_internal_int2() const {
  return int2_;
}
inline int32_t DBUserMainTest::int2() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBUserMainTest.int2)
  return _internal_int2();
}
inline void DBUserMainTest::_internal_set_int2(int32_t value) {
  
  int2_ = value;
}
inline void DBUserMainTest::set_int2(int32_t value) {
  _internal_set_int2(value);
  // @@protoc_insertion_point(field_set:msgpacket.DBUserMainTest.int2)
}

// -------------------------------------------------------------------

// DBMapTest

// string map_str = 1;
inline void DBMapTest::clear_map_str() {
  map_str_.ClearToEmpty();
}
inline const std::string& DBMapTest::map_str() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBMapTest.map_str)
  return _internal_map_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBMapTest::set_map_str(ArgT0&& arg0, ArgT... args) {
 
 map_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.DBMapTest.map_str)
}
inline std::string* DBMapTest::mutable_map_str() {
  std::string* _s = _internal_mutable_map_str();
  // @@protoc_insertion_point(field_mutable:msgpacket.DBMapTest.map_str)
  return _s;
}
inline const std::string& DBMapTest::_internal_map_str() const {
  return map_str_.Get();
}
inline void DBMapTest::_internal_set_map_str(const std::string& value) {
  
  map_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBMapTest::_internal_mutable_map_str() {
  
  return map_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBMapTest::release_map_str() {
  // @@protoc_insertion_point(field_release:msgpacket.DBMapTest.map_str)
  return map_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBMapTest::set_allocated_map_str(std::string* map_str) {
  if (map_str != nullptr) {
    
  } else {
    
  }
  map_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    map_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.DBMapTest.map_str)
}

// int64 map_int = 2;
inline void DBMapTest::clear_map_int() {
  map_int_ = int64_t{0};
}
inline int64_t DBMapTest::_internal_map_int() const {
  return map_int_;
}
inline int64_t DBMapTest::map_int() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBMapTest.map_int)
  return _internal_map_int();
}
inline void DBMapTest::_internal_set_map_int(int64_t value) {
  
  map_int_ = value;
}
inline void DBMapTest::set_map_int(int64_t value) {
  _internal_set_map_int(value);
  // @@protoc_insertion_point(field_set:msgpacket.DBMapTest.map_int)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DBRepeatedTest

// string repeated_str = 1;
inline void DBRepeatedTest::clear_repeated_str() {
  repeated_str_.ClearToEmpty();
}
inline const std::string& DBRepeatedTest::repeated_str() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBRepeatedTest.repeated_str)
  return _internal_repeated_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBRepeatedTest::set_repeated_str(ArgT0&& arg0, ArgT... args) {
 
 repeated_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.DBRepeatedTest.repeated_str)
}
inline std::string* DBRepeatedTest::mutable_repeated_str() {
  std::string* _s = _internal_mutable_repeated_str();
  // @@protoc_insertion_point(field_mutable:msgpacket.DBRepeatedTest.repeated_str)
  return _s;
}
inline const std::string& DBRepeatedTest::_internal_repeated_str() const {
  return repeated_str_.Get();
}
inline void DBRepeatedTest::_internal_set_repeated_str(const std::string& value) {
  
  repeated_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBRepeatedTest::_internal_mutable_repeated_str() {
  
  return repeated_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBRepeatedTest::release_repeated_str() {
  // @@protoc_insertion_point(field_release:msgpacket.DBRepeatedTest.repeated_str)
  return repeated_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBRepeatedTest::set_allocated_repeated_str(std::string* repeated_str) {
  if (repeated_str != nullptr) {
    
  } else {
    
  }
  repeated_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repeated_str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (repeated_str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    repeated_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.DBRepeatedTest.repeated_str)
}

// int64 repeated_int = 2;
inline void DBRepeatedTest::clear_repeated_int() {
  repeated_int_ = int64_t{0};
}
inline int64_t DBRepeatedTest::_internal_repeated_int() const {
  return repeated_int_;
}
inline int64_t DBRepeatedTest::repeated_int() const {
  // @@protoc_insertion_point(field_get:msgpacket.DBRepeatedTest.repeated_int)
  return _internal_repeated_int();
}
inline void DBRepeatedTest::_internal_set_repeated_int(int64_t value) {
  
  repeated_int_ = value;
}
inline void DBRepeatedTest::set_repeated_int(int64_t value) {
  _internal_set_repeated_int(value);
  // @@protoc_insertion_point(field_set:msgpacket.DBRepeatedTest.repeated_int)
}

// map<int64, .msgpacket.DBMapTest> test_map = 3;
inline int DBRepeatedTest::_internal_test_map_size() const {
  return test_map_.size();
}
inline int DBRepeatedTest::test_map_size() const {
  return _internal_test_map_size();
}
inline void DBRepeatedTest::clear_test_map() {
  test_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >&
DBRepeatedTest::_internal_test_map() const {
  return test_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >&
DBRepeatedTest::test_map() const {
  // @@protoc_insertion_point(field_map:msgpacket.DBRepeatedTest.test_map)
  return _internal_test_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >*
DBRepeatedTest::_internal_mutable_test_map() {
  return test_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::msgpacket::DBMapTest >*
DBRepeatedTest::mutable_test_map() {
  // @@protoc_insertion_point(field_mutable_map:msgpacket.DBRepeatedTest.test_map)
  return _internal_mutable_test_map();
}

// -------------------------------------------------------------------

// DBTestKey

// -------------------------------------------------------------------

// DBTest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgpacket

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msgpacket::EN_TEST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msgpacket::EN_TEST>() {
  return ::msgpacket::EN_TEST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msgDB_2eproto
