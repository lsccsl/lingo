// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace msgpacket {
constexpr POS_T::POS_T(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_x_(0)
  , pos_y_(0){}
struct POS_TDefaultTypeInternal {
  constexpr POS_TDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~POS_TDefaultTypeInternal() {}
  union {
    POS_T _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT POS_TDefaultTypeInternal _POS_T_default_instance_;
constexpr PROTO_VEC_3F::PROTO_VEC_3F(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct PROTO_VEC_3FDefaultTypeInternal {
  constexpr PROTO_VEC_3FDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PROTO_VEC_3FDefaultTypeInternal() {}
  union {
    PROTO_VEC_3F _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTO_VEC_3FDefaultTypeInternal _PROTO_VEC_3F_default_instance_;
constexpr MSG_RPC::MSG_RPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_bin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_id_(int64_t{0})
  , timestamp_(int64_t{0})
  , timestamp_arrive_(int64_t{0})
  , timeout_wait_(int64_t{0})
  , msg_type_(0){}
struct MSG_RPCDefaultTypeInternal {
  constexpr MSG_RPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_RPCDefaultTypeInternal() {}
  union {
    MSG_RPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_RPCDefaultTypeInternal _MSG_RPC_default_instance_;
constexpr MSG_RPC_RES::MSG_RPC_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_bin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_id_(int64_t{0})
  , msg_type_(0)
  , res_code_(0)

  , timestamp_(int64_t{0})
  , timestamp_arrive_(int64_t{0})
  , timestamp_process_(int64_t{0}){}
struct MSG_RPC_RESDefaultTypeInternal {
  constexpr MSG_RPC_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_RPC_RESDefaultTypeInternal() {}
  union {
    MSG_RPC_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_RPC_RESDefaultTypeInternal _MSG_RPC_RES_default_instance_;
constexpr MSG_SRV_REPORT::MSG_SRV_REPORT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_id_(int64_t{0})
  , tcp_conn_id_(int64_t{0}){}
struct MSG_SRV_REPORTDefaultTypeInternal {
  constexpr MSG_SRV_REPORTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_SRV_REPORTDefaultTypeInternal() {}
  union {
    MSG_SRV_REPORT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_SRV_REPORTDefaultTypeInternal _MSG_SRV_REPORT_default_instance_;
constexpr MSG_SRV_REPORT_RES::MSG_SRV_REPORT_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_id_(int64_t{0})
  , tcp_conn_id_(int64_t{0}){}
struct MSG_SRV_REPORT_RESDefaultTypeInternal {
  constexpr MSG_SRV_REPORT_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_SRV_REPORT_RESDefaultTypeInternal() {}
  union {
    MSG_SRV_REPORT_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_SRV_REPORT_RESDefaultTypeInternal _MSG_SRV_REPORT_RES_default_instance_;
constexpr MSG_HEARTBEAT::MSG_HEARTBEAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct MSG_HEARTBEATDefaultTypeInternal {
  constexpr MSG_HEARTBEATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_HEARTBEATDefaultTypeInternal() {}
  union {
    MSG_HEARTBEAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_HEARTBEATDefaultTypeInternal _MSG_HEARTBEAT_default_instance_;
constexpr MSG_HEARTBEAT_RES::MSG_HEARTBEAT_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct MSG_HEARTBEAT_RESDefaultTypeInternal {
  constexpr MSG_HEARTBEAT_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_HEARTBEAT_RESDefaultTypeInternal() {}
  union {
    MSG_HEARTBEAT_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_HEARTBEAT_RESDefaultTypeInternal _MSG_HEARTBEAT_RES_default_instance_;
constexpr MSG_TEST::MSG_TEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , seq_(int64_t{0})
  , timestamp_(int64_t{0})
  , timestamp_arrive_(int64_t{0}){}
struct MSG_TESTDefaultTypeInternal {
  constexpr MSG_TESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TESTDefaultTypeInternal() {}
  union {
    MSG_TEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TESTDefaultTypeInternal _MSG_TEST_default_instance_;
constexpr MSG_TEST_RES::MSG_TEST_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , seq_(int64_t{0})
  , timestamp_(int64_t{0})
  , timestamp_arrive_(int64_t{0})
  , timestamp_process_(int64_t{0}){}
struct MSG_TEST_RESDefaultTypeInternal {
  constexpr MSG_TEST_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TEST_RESDefaultTypeInternal() {}
  union {
    MSG_TEST_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TEST_RESDefaultTypeInternal _MSG_TEST_RES_default_instance_;
constexpr MSG_TEST_RPC::MSG_TEST_RPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rpc_count_(int64_t{0}){}
struct MSG_TEST_RPCDefaultTypeInternal {
  constexpr MSG_TEST_RPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TEST_RPCDefaultTypeInternal() {}
  union {
    MSG_TEST_RPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TEST_RPCDefaultTypeInternal _MSG_TEST_RPC_default_instance_;
constexpr MSG_TEST_RPC_RES::MSG_TEST_RPC_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MSG_TEST_RPC_RESDefaultTypeInternal {
  constexpr MSG_TEST_RPC_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TEST_RPC_RESDefaultTypeInternal() {}
  union {
    MSG_TEST_RPC_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TEST_RPC_RESDefaultTypeInternal _MSG_TEST_RPC_RES_default_instance_;
constexpr MSG_LOGIN::MSG_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0})
  , x_(0)
  , y_(0)
  , view_range_(0){}
struct MSG_LOGINDefaultTypeInternal {
  constexpr MSG_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_LOGINDefaultTypeInternal() {}
  union {
    MSG_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_LOGINDefaultTypeInternal _MSG_LOGIN_default_instance_;
constexpr MSG_LOGIN_RES::MSG_LOGIN_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0})
  , connect_id_(int64_t{0})
  , fd_(int64_t{0})
  , obj_id_(int64_t{0}){}
struct MSG_LOGIN_RESDefaultTypeInternal {
  constexpr MSG_LOGIN_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_LOGIN_RESDefaultTypeInternal() {}
  union {
    MSG_LOGIN_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_LOGIN_RESDefaultTypeInternal _MSG_LOGIN_RES_default_instance_;
constexpr MSG_TCP_STATIC::MSG_TCP_STATIC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seq_(int64_t{0}){}
struct MSG_TCP_STATICDefaultTypeInternal {
  constexpr MSG_TCP_STATICDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TCP_STATICDefaultTypeInternal() {}
  union {
    MSG_TCP_STATIC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TCP_STATICDefaultTypeInternal _MSG_TCP_STATIC_default_instance_;
constexpr MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUseDefaultTypeInternal {
  constexpr MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUseDefaultTypeInternal _MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse_default_instance_;
constexpr MSG_TCP_STATIC_RES::MSG_TCP_STATIC_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_static_msg_recv_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , packet_count_(int64_t{0})
  , byte_recv_(int64_t{0})
  , byte_proc_(int64_t{0})
  , byte_send_(int64_t{0}){}
struct MSG_TCP_STATIC_RESDefaultTypeInternal {
  constexpr MSG_TCP_STATIC_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TCP_STATIC_RESDefaultTypeInternal() {}
  union {
    MSG_TCP_STATIC_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TCP_STATIC_RESDefaultTypeInternal _MSG_TCP_STATIC_RES_default_instance_;
constexpr MSG_CLIENT_ENTER::MSG_CLIENT_ENTER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(int64_t{0}){}
struct MSG_CLIENT_ENTERDefaultTypeInternal {
  constexpr MSG_CLIENT_ENTERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_CLIENT_ENTERDefaultTypeInternal() {}
  union {
    MSG_CLIENT_ENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_CLIENT_ENTERDefaultTypeInternal _MSG_CLIENT_ENTER_default_instance_;
constexpr MSG_CLIENT_ENTER_RES::MSG_CLIENT_ENTER_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : redirect_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_id_(int64_t{0})
  , res_(0)

  , redirect_port_(0){}
struct MSG_CLIENT_ENTER_RESDefaultTypeInternal {
  constexpr MSG_CLIENT_ENTER_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_CLIENT_ENTER_RESDefaultTypeInternal() {}
  union {
    MSG_CLIENT_ENTER_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_CLIENT_ENTER_RESDefaultTypeInternal _MSG_CLIENT_ENTER_RES_default_instance_;
constexpr MSG_GET_MAP::MSG_GET_MAP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MSG_GET_MAPDefaultTypeInternal {
  constexpr MSG_GET_MAPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_GET_MAPDefaultTypeInternal() {}
  union {
    MSG_GET_MAP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_GET_MAPDefaultTypeInternal _MSG_GET_MAP_default_instance_;
constexpr MSG_GET_MAP_RES::MSG_GET_MAP_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_wid_(0)
  , map_high_(0)
  , map_pitch_(0){}
struct MSG_GET_MAP_RESDefaultTypeInternal {
  constexpr MSG_GET_MAP_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_GET_MAP_RESDefaultTypeInternal() {}
  union {
    MSG_GET_MAP_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_GET_MAP_RESDefaultTypeInternal _MSG_GET_MAP_RES_default_instance_;
constexpr MSG_PATH_SEARCH::MSG_PATH_SEARCH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_src_(nullptr)
  , pos_dst_(nullptr){}
struct MSG_PATH_SEARCHDefaultTypeInternal {
  constexpr MSG_PATH_SEARCHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_PATH_SEARCHDefaultTypeInternal() {}
  union {
    MSG_PATH_SEARCH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_PATH_SEARCHDefaultTypeInternal _MSG_PATH_SEARCH_default_instance_;
constexpr MSG_PATH_SEARCH_RES::MSG_PATH_SEARCH_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_pos_()
  , path_key_pos_()
  , pos_src_(nullptr)
  , pos_dst_(nullptr){}
struct MSG_PATH_SEARCH_RESDefaultTypeInternal {
  constexpr MSG_PATH_SEARCH_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_PATH_SEARCH_RESDefaultTypeInternal() {}
  union {
    MSG_PATH_SEARCH_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_PATH_SEARCH_RESDefaultTypeInternal _MSG_PATH_SEARCH_RES_default_instance_;
constexpr MSG_NAV_SEARCH::MSG_NAV_SEARCH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_src_(nullptr)
  , pos_dst_(nullptr){}
struct MSG_NAV_SEARCHDefaultTypeInternal {
  constexpr MSG_NAV_SEARCHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_NAV_SEARCHDefaultTypeInternal() {}
  union {
    MSG_NAV_SEARCH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_NAV_SEARCHDefaultTypeInternal _MSG_NAV_SEARCH_default_instance_;
constexpr MSG_NAV_SEARCH_RES::MSG_NAV_SEARCH_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_pos_(){}
struct MSG_NAV_SEARCH_RESDefaultTypeInternal {
  constexpr MSG_NAV_SEARCH_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_NAV_SEARCH_RESDefaultTypeInternal() {}
  union {
    MSG_NAV_SEARCH_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_NAV_SEARCH_RESDefaultTypeInternal _MSG_NAV_SEARCH_RES_default_instance_;
constexpr NAV_OBSTACLE::NAV_OBSTACLE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_(nullptr)
  , half_ext_(nullptr)
  , obstacle_id_(0u)
  , y_radian_(0){}
struct NAV_OBSTACLEDefaultTypeInternal {
  constexpr NAV_OBSTACLEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NAV_OBSTACLEDefaultTypeInternal() {}
  union {
    NAV_OBSTACLE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NAV_OBSTACLEDefaultTypeInternal _NAV_OBSTACLE_default_instance_;
constexpr MSG_NAV_ADD_OBSTACLE::MSG_NAV_ADD_OBSTACLE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obstacle_(nullptr){}
struct MSG_NAV_ADD_OBSTACLEDefaultTypeInternal {
  constexpr MSG_NAV_ADD_OBSTACLEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_NAV_ADD_OBSTACLEDefaultTypeInternal() {}
  union {
    MSG_NAV_ADD_OBSTACLE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_NAV_ADD_OBSTACLEDefaultTypeInternal _MSG_NAV_ADD_OBSTACLE_default_instance_;
constexpr MSG_NAV_ADD_OBSTACLE_RES::MSG_NAV_ADD_OBSTACLE_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obstacle_(nullptr){}
struct MSG_NAV_ADD_OBSTACLE_RESDefaultTypeInternal {
  constexpr MSG_NAV_ADD_OBSTACLE_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_NAV_ADD_OBSTACLE_RESDefaultTypeInternal() {}
  union {
    MSG_NAV_ADD_OBSTACLE_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_NAV_ADD_OBSTACLE_RESDefaultTypeInternal _MSG_NAV_ADD_OBSTACLE_RES_default_instance_;
constexpr MSG_NAV_DEL_OBSTACLE::MSG_NAV_DEL_OBSTACLE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obstacle_id_(0u){}
struct MSG_NAV_DEL_OBSTACLEDefaultTypeInternal {
  constexpr MSG_NAV_DEL_OBSTACLEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_NAV_DEL_OBSTACLEDefaultTypeInternal() {}
  union {
    MSG_NAV_DEL_OBSTACLE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_NAV_DEL_OBSTACLEDefaultTypeInternal _MSG_NAV_DEL_OBSTACLE_default_instance_;
constexpr MSG_NAV_DEL_OBSTACLE_RES::MSG_NAV_DEL_OBSTACLE_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obstacle_id_(0u){}
struct MSG_NAV_DEL_OBSTACLE_RESDefaultTypeInternal {
  constexpr MSG_NAV_DEL_OBSTACLE_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_NAV_DEL_OBSTACLE_RESDefaultTypeInternal() {}
  union {
    MSG_NAV_DEL_OBSTACLE_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_NAV_DEL_OBSTACLE_RESDefaultTypeInternal _MSG_NAV_DEL_OBSTACLE_RES_default_instance_;
constexpr MSG_NAV_GET_ALL_OBSTACLE::MSG_NAV_GET_ALL_OBSTACLE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MSG_NAV_GET_ALL_OBSTACLEDefaultTypeInternal {
  constexpr MSG_NAV_GET_ALL_OBSTACLEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_NAV_GET_ALL_OBSTACLEDefaultTypeInternal() {}
  union {
    MSG_NAV_GET_ALL_OBSTACLE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_NAV_GET_ALL_OBSTACLEDefaultTypeInternal _MSG_NAV_GET_ALL_OBSTACLE_default_instance_;
constexpr MSG_NAV_GET_ALL_OBSTACLE_RES::MSG_NAV_GET_ALL_OBSTACLE_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obstacle_(){}
struct MSG_NAV_GET_ALL_OBSTACLE_RESDefaultTypeInternal {
  constexpr MSG_NAV_GET_ALL_OBSTACLE_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_NAV_GET_ALL_OBSTACLE_RESDefaultTypeInternal() {}
  union {
    MSG_NAV_GET_ALL_OBSTACLE_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_NAV_GET_ALL_OBSTACLE_RESDefaultTypeInternal _MSG_NAV_GET_ALL_OBSTACLE_RES_default_instance_;
constexpr MSG_UPDATE_POS::MSG_UPDATE_POS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_pos_(nullptr){}
struct MSG_UPDATE_POSDefaultTypeInternal {
  constexpr MSG_UPDATE_POSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_UPDATE_POSDefaultTypeInternal() {}
  union {
    MSG_UPDATE_POS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_UPDATE_POSDefaultTypeInternal _MSG_UPDATE_POS_default_instance_;
constexpr MSG_UPDATE_POS_RES::MSG_UPDATE_POS_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_pos_(nullptr){}
struct MSG_UPDATE_POS_RESDefaultTypeInternal {
  constexpr MSG_UPDATE_POS_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_UPDATE_POS_RESDefaultTypeInternal() {}
  union {
    MSG_UPDATE_POS_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_UPDATE_POS_RESDefaultTypeInternal _MSG_UPDATE_POS_RES_default_instance_;
constexpr MSG_NTF_IN_VIEW::MSG_NTF_IN_VIEW(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obj_id_(int64_t{0}){}
struct MSG_NTF_IN_VIEWDefaultTypeInternal {
  constexpr MSG_NTF_IN_VIEWDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_NTF_IN_VIEWDefaultTypeInternal() {}
  union {
    MSG_NTF_IN_VIEW _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_NTF_IN_VIEWDefaultTypeInternal _MSG_NTF_IN_VIEW_default_instance_;
constexpr MSG_NTF_OUT_VIEW::MSG_NTF_OUT_VIEW(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obj_id_(int64_t{0}){}
struct MSG_NTF_OUT_VIEWDefaultTypeInternal {
  constexpr MSG_NTF_OUT_VIEWDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_NTF_OUT_VIEWDefaultTypeInternal() {}
  union {
    MSG_NTF_OUT_VIEW _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_NTF_OUT_VIEWDefaultTypeInternal _MSG_NTF_OUT_VIEW_default_instance_;
}  // namespace msgpacket
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2eproto[36];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::POS_T, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::POS_T, pos_x_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::POS_T, pos_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PROTO_VEC_3F, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::PROTO_VEC_3F, x_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PROTO_VEC_3F, y_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::PROTO_VEC_3F, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, msg_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, msg_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, msg_bin_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, timestamp_arrive_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, timeout_wait_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, msg_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, msg_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, res_code_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, msg_bin_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, timestamp_arrive_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, timestamp_process_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT, srv_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT, tcp_conn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT_RES, srv_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT_RES, tcp_conn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_HEARTBEAT, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_HEARTBEAT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_HEARTBEAT_RES, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, str_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, seq_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, timestamp_arrive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, str_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, seq_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, timestamp_arrive_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, timestamp_process_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RPC, rpc_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RPC_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN, id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN, x_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN, y_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN, view_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN_RES, id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN_RES, connect_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN_RES, fd_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN_RES, obj_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC, seq_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, packet_count_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, byte_recv_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, byte_proc_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, byte_send_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, map_static_msg_recv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER_RES, client_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER_RES, res_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER_RES, redirect_ip_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER_RES, redirect_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_GET_MAP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_GET_MAP_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_GET_MAP_RES, map_wid_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_GET_MAP_RES, map_high_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_GET_MAP_RES, map_pitch_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_GET_MAP_RES, map_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_PATH_SEARCH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_PATH_SEARCH, pos_src_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_PATH_SEARCH, pos_dst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_PATH_SEARCH_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_PATH_SEARCH_RES, pos_src_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_PATH_SEARCH_RES, pos_dst_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_PATH_SEARCH_RES, path_pos_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_PATH_SEARCH_RES, path_key_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_SEARCH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_SEARCH, pos_src_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_SEARCH, pos_dst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_SEARCH_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_SEARCH_RES, path_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::NAV_OBSTACLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::NAV_OBSTACLE, obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::NAV_OBSTACLE, center_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::NAV_OBSTACLE, half_ext_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::NAV_OBSTACLE, y_radian_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_ADD_OBSTACLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_ADD_OBSTACLE, obstacle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_ADD_OBSTACLE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_ADD_OBSTACLE_RES, obstacle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_DEL_OBSTACLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_DEL_OBSTACLE, obstacle_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_DEL_OBSTACLE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_DEL_OBSTACLE_RES, obstacle_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_GET_ALL_OBSTACLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_GET_ALL_OBSTACLE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NAV_GET_ALL_OBSTACLE_RES, obstacle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_UPDATE_POS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_UPDATE_POS, new_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_UPDATE_POS_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_UPDATE_POS_RES, new_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NTF_IN_VIEW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NTF_IN_VIEW, obj_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NTF_OUT_VIEW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_NTF_OUT_VIEW, obj_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msgpacket::POS_T)},
  { 8, -1, -1, sizeof(::msgpacket::PROTO_VEC_3F)},
  { 17, -1, -1, sizeof(::msgpacket::MSG_RPC)},
  { 29, -1, -1, sizeof(::msgpacket::MSG_RPC_RES)},
  { 42, -1, -1, sizeof(::msgpacket::MSG_SRV_REPORT)},
  { 50, -1, -1, sizeof(::msgpacket::MSG_SRV_REPORT_RES)},
  { 58, -1, -1, sizeof(::msgpacket::MSG_HEARTBEAT)},
  { 65, -1, -1, sizeof(::msgpacket::MSG_HEARTBEAT_RES)},
  { 72, -1, -1, sizeof(::msgpacket::MSG_TEST)},
  { 83, -1, -1, sizeof(::msgpacket::MSG_TEST_RES)},
  { 95, -1, -1, sizeof(::msgpacket::MSG_TEST_RPC)},
  { 102, -1, -1, sizeof(::msgpacket::MSG_TEST_RPC_RES)},
  { 108, -1, -1, sizeof(::msgpacket::MSG_LOGIN)},
  { 118, -1, -1, sizeof(::msgpacket::MSG_LOGIN_RES)},
  { 128, -1, -1, sizeof(::msgpacket::MSG_TCP_STATIC)},
  { 135, 143, -1, sizeof(::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse)},
  { 145, -1, -1, sizeof(::msgpacket::MSG_TCP_STATIC_RES)},
  { 156, -1, -1, sizeof(::msgpacket::MSG_CLIENT_ENTER)},
  { 163, -1, -1, sizeof(::msgpacket::MSG_CLIENT_ENTER_RES)},
  { 173, -1, -1, sizeof(::msgpacket::MSG_GET_MAP)},
  { 179, -1, -1, sizeof(::msgpacket::MSG_GET_MAP_RES)},
  { 189, -1, -1, sizeof(::msgpacket::MSG_PATH_SEARCH)},
  { 197, -1, -1, sizeof(::msgpacket::MSG_PATH_SEARCH_RES)},
  { 207, -1, -1, sizeof(::msgpacket::MSG_NAV_SEARCH)},
  { 215, -1, -1, sizeof(::msgpacket::MSG_NAV_SEARCH_RES)},
  { 222, -1, -1, sizeof(::msgpacket::NAV_OBSTACLE)},
  { 232, -1, -1, sizeof(::msgpacket::MSG_NAV_ADD_OBSTACLE)},
  { 239, -1, -1, sizeof(::msgpacket::MSG_NAV_ADD_OBSTACLE_RES)},
  { 246, -1, -1, sizeof(::msgpacket::MSG_NAV_DEL_OBSTACLE)},
  { 253, -1, -1, sizeof(::msgpacket::MSG_NAV_DEL_OBSTACLE_RES)},
  { 260, -1, -1, sizeof(::msgpacket::MSG_NAV_GET_ALL_OBSTACLE)},
  { 266, -1, -1, sizeof(::msgpacket::MSG_NAV_GET_ALL_OBSTACLE_RES)},
  { 273, -1, -1, sizeof(::msgpacket::MSG_UPDATE_POS)},
  { 280, -1, -1, sizeof(::msgpacket::MSG_UPDATE_POS_RES)},
  { 287, -1, -1, sizeof(::msgpacket::MSG_NTF_IN_VIEW)},
  { 294, -1, -1, sizeof(::msgpacket::MSG_NTF_OUT_VIEW)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_POS_T_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_PROTO_VEC_3F_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_RPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_RPC_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_SRV_REPORT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_SRV_REPORT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_HEARTBEAT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TEST_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TEST_RPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TEST_RPC_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_LOGIN_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TCP_STATIC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TCP_STATIC_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_CLIENT_ENTER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_CLIENT_ENTER_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_GET_MAP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_GET_MAP_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_PATH_SEARCH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_PATH_SEARCH_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_NAV_SEARCH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_NAV_SEARCH_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_NAV_OBSTACLE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_NAV_ADD_OBSTACLE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_NAV_ADD_OBSTACLE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_NAV_DEL_OBSTACLE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_NAV_DEL_OBSTACLE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_NAV_GET_ALL_OBSTACLE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_NAV_GET_ALL_OBSTACLE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_UPDATE_POS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_UPDATE_POS_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_NTF_IN_VIEW_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_NTF_OUT_VIEW_default_instance_),
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\tmsgpacket\"%\n\005POS_T\022\r\n\005pos_x"
  "\030\001 \001(\005\022\r\n\005pos_y\030\002 \001(\005\"/\n\014PROTO_VEC_3F\022\t\n"
  "\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\177\n\007MSG_RP"
  "C\022\016\n\006msg_id\030\001 \001(\003\022\020\n\010msg_type\030\002 \001(\005\022\017\n\007m"
  "sg_bin\030\003 \001(\014\022\021\n\ttimestamp\030\004 \001(\003\022\030\n\020times"
  "tamp_arrive\030\005 \001(\003\022\024\n\014timeout_wait\030\006 \001(\003\""
  "\264\001\n\013MSG_RPC_RES\022\016\n\006msg_id\030\001 \001(\003\022\020\n\010msg_t"
  "ype\030\002 \001(\005\022*\n\010res_code\030\003 \001(\0162\030.msgpacket."
  "RESPONSE_CODE\022\017\n\007msg_bin\030\004 \001(\014\022\021\n\ttimest"
  "amp\030\005 \001(\003\022\030\n\020timestamp_arrive\030\006 \001(\003\022\031\n\021t"
  "imestamp_process\030\007 \001(\003\"5\n\016MSG_SRV_REPORT"
  "\022\016\n\006srv_id\030\001 \001(\003\022\023\n\013tcp_conn_id\030\002 \001(\003\"9\n"
  "\022MSG_SRV_REPORT_RES\022\016\n\006srv_id\030\001 \001(\003\022\023\n\013t"
  "cp_conn_id\030\002 \001(\003\"\033\n\rMSG_HEARTBEAT\022\n\n\002id\030"
  "\001 \001(\003\"\037\n\021MSG_HEARTBEAT_RES\022\n\n\002id\030\001 \001(\003\"]"
  "\n\010MSG_TEST\022\n\n\002id\030\001 \001(\003\022\013\n\003str\030\002 \001(\t\022\013\n\003s"
  "eq\030\003 \001(\003\022\021\n\ttimestamp\030\004 \001(\003\022\030\n\020timestamp"
  "_arrive\030\005 \001(\003\"|\n\014MSG_TEST_RES\022\n\n\002id\030\001 \001("
  "\003\022\013\n\003str\030\002 \001(\t\022\013\n\003seq\030\003 \001(\003\022\021\n\ttimestamp"
  "\030\004 \001(\003\022\030\n\020timestamp_arrive\030\005 \001(\003\022\031\n\021time"
  "stamp_process\030\006 \001(\003\"!\n\014MSG_TEST_RPC\022\021\n\tr"
  "pc_count\030\001 \001(\003\"\022\n\020MSG_TEST_RPC_RES\"A\n\tMS"
  "G_LOGIN\022\n\n\002id\030\001 \001(\003\022\t\n\001X\030\002 \001(\002\022\t\n\001Y\030\003 \001("
  "\002\022\022\n\nview_range\030\004 \001(\002\"K\n\rMSG_LOGIN_RES\022\n"
  "\n\002id\030\001 \001(\003\022\022\n\nconnect_id\030\002 \001(\003\022\n\n\002fd\030\003 \001"
  "(\003\022\016\n\006obj_id\030\004 \001(\003\"\035\n\016MSG_TCP_STATIC\022\013\n\003"
  "seq\030\001 \001(\003\"\356\001\n\022MSG_TCP_STATIC_RES\022\024\n\014pack"
  "et_count\030\001 \001(\003\022\021\n\tbyte_recv\030\002 \001(\003\022\021\n\tbyt"
  "e_proc\030\003 \001(\003\022\021\n\tbyte_send\030\004 \001(\003\022P\n\023map_s"
  "tatic_msg_recv\030\005 \003(\01323.msgpacket.MSG_TCP"
  "_STATIC_RES.MapStaticMsgRecvEntry\0327\n\025Map"
  "StaticMsgRecvEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value"
  "\030\002 \001(\003:\0028\001\"%\n\020MSG_CLIENT_ENTER\022\021\n\tclient"
  "_id\030\001 \001(\003\"|\n\024MSG_CLIENT_ENTER_RES\022\021\n\tcli"
  "ent_id\030\001 \001(\003\022%\n\003res\030\002 \001(\0162\030.msgpacket.RE"
  "SPONSE_CODE\022\023\n\013redirect_ip\030\004 \001(\t\022\025\n\rredi"
  "rect_port\030\005 \001(\005\"\r\n\013MSG_GET_MAP\"Y\n\017MSG_GE"
  "T_MAP_RES\022\017\n\007map_wid\030\001 \001(\005\022\020\n\010map_high\030\002"
  " \001(\005\022\021\n\tmap_pitch\030\003 \001(\005\022\020\n\010map_data\030\004 \001("
  "\014\"W\n\017MSG_PATH_SEARCH\022!\n\007pos_src\030\001 \001(\0132\020."
  "msgpacket.POS_T\022!\n\007pos_dst\030\002 \001(\0132\020.msgpa"
  "cket.POS_T\"\247\001\n\023MSG_PATH_SEARCH_RES\022!\n\007po"
  "s_src\030\001 \001(\0132\020.msgpacket.POS_T\022!\n\007pos_dst"
  "\030\002 \001(\0132\020.msgpacket.POS_T\022\"\n\010path_pos\030\003 \003"
  "(\0132\020.msgpacket.POS_T\022&\n\014path_key_pos\030\004 \003"
  "(\0132\020.msgpacket.POS_T\"d\n\016MSG_NAV_SEARCH\022("
  "\n\007pos_src\030\001 \001(\0132\027.msgpacket.PROTO_VEC_3F"
  "\022(\n\007pos_dst\030\002 \001(\0132\027.msgpacket.PROTO_VEC_"
  "3F\"\?\n\022MSG_NAV_SEARCH_RES\022)\n\010path_pos\030\001 \003"
  "(\0132\027.msgpacket.PROTO_VEC_3F\"\211\001\n\014NAV_OBST"
  "ACLE\022\023\n\013obstacle_id\030\001 \001(\r\022\'\n\006center\030\002 \001("
  "\0132\027.msgpacket.PROTO_VEC_3F\022)\n\010half_ext\030\003"
  " \001(\0132\027.msgpacket.PROTO_VEC_3F\022\020\n\010y_radia"
  "n\030\004 \001(\002\"A\n\024MSG_NAV_ADD_OBSTACLE\022)\n\010obsta"
  "cle\030\001 \001(\0132\027.msgpacket.NAV_OBSTACLE\"E\n\030MS"
  "G_NAV_ADD_OBSTACLE_RES\022)\n\010obstacle\030\002 \001(\013"
  "2\027.msgpacket.NAV_OBSTACLE\"+\n\024MSG_NAV_DEL"
  "_OBSTACLE\022\023\n\013obstacle_id\030\001 \001(\r\"/\n\030MSG_NA"
  "V_DEL_OBSTACLE_RES\022\023\n\013obstacle_id\030\001 \001(\r\""
  "\032\n\030MSG_NAV_GET_ALL_OBSTACLE\"I\n\034MSG_NAV_G"
  "ET_ALL_OBSTACLE_RES\022)\n\010obstacle\030\001 \003(\0132\027."
  "msgpacket.NAV_OBSTACLE\":\n\016MSG_UPDATE_POS"
  "\022(\n\007new_pos\030\001 \001(\0132\027.msgpacket.PROTO_VEC_"
  "3F\">\n\022MSG_UPDATE_POS_RES\022(\n\007new_pos\030\001 \001("
  "\0132\027.msgpacket.PROTO_VEC_3F\"!\n\017MSG_NTF_IN"
  "_VIEW\022\016\n\006obj_id\030\001 \001(\003\"\"\n\020MSG_NTF_OUT_VIE"
  "W\022\016\n\006obj_id\030\001 \001(\003*\260\006\n\010MSG_TYPE\022\r\n\t_MSG_N"
  "ULL\020\000\022\014\n\010_MSG_RPC\020\001\022\020\n\014_MSG_RPC_RES\020\002\022\023\n"
  "\017_MSG_SRV_REPORT\020\003\022\027\n\023_MSG_SRV_REPORT_RE"
  "S\020\004\022\022\n\016_MSG_HEARTBEAT\020\005\022\026\n\022_MSG_HEARTBEA"
  "T_RES\020\006\022\023\n\017_MSG_TCP_STATIC\020\007\022\027\n\023_MSG_TCP"
  "_STATIC_RES\020\010\022\014\n\010_MSG_MAX\020d\022\r\n\t_MSG_TEST"
  "\020e\022\021\n\r_MSG_TEST_RES\020f\022\016\n\n_MSG_LOGIN\020g\022\022\n"
  "\016_MSG_LOGIN_RES\020h\022\021\n\r_MSG_TEST_RPC\020i\022\025\n\021"
  "_MSG_TEST_RPC_RES\020j\022\024\n\017_MSG_SERVER_MAX\020\350"
  "\007\022\026\n\021_MSG_CLIENT_ENTER\020\351\007\022\032\n\025_MSG_CLIENT"
  "_ENTER_RES\020\352\007\022\021\n\014_MSG_GET_MAP\020\353\007\022\025\n\020_MSG"
  "_GET_MAP_RES\020\354\007\022\025\n\020_MSG_PATH_SEARCH\020\355\007\022\031"
  "\n\024_MSG_PATH_SEARCH_RES\020\356\007\022\024\n\017_MSG_NAV_SE"
  "ARCH\020\357\007\022\030\n\023_MSG_NAV_SEARCH_RES\020\360\007\022\032\n\025_MS"
  "G_NAV_ADD_OBSTACLE\020\361\007\022\036\n\031_MSG_NAV_ADD_OB"
  "STACLE_RES\020\362\007\022\032\n\025_MSG_NAV_DEL_OBSTACLE\020\363"
  "\007\022\036\n\031_MSG_NAV_DEL_OBSTACLE_RES\020\364\007\022\036\n\031_MS"
  "G_NAV_GET_ALL_OBSTACLE\020\365\007\022\"\n\035_MSG_NAV_GE"
  "T_ALL_OBSTACLE_RES\020\366\007\022\024\n\017_MSG_UPDATE_POS"
  "\020\367\007\022\030\n\023_MSG_UPDATE_POS_RES\020\370\007\022\025\n\020_MSG_NT"
  "F_IN_VIEW\020\371\007\022\026\n\021_MSG_NTF_OUT_VIEW\020\372\007*{\n\r"
  "RESPONSE_CODE\022\026\n\022RESPONSE_CODE_Fail\020\000\022\024\n"
  "\020RESPONSE_CODE_OK\020\001\022 \n\034RESPONSE_CODE_Rpc"
  "_not_accept\020\002\022\032\n\026RESPONSE_CODE_redirect\020"
  "\003B\016Z\014./;msgpacketb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto = {
  false, false, 3625, descriptor_table_protodef_msg_2eproto, "msg.proto", 
  &descriptor_table_msg_2eproto_once, nullptr, 0, 36,
  schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
  file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto, file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace msgpacket {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool MSG_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RESPONSE_CODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[1];
}
bool RESPONSE_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class POS_T::_Internal {
 public:
};

POS_T::POS_T(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.POS_T)
}
POS_T::POS_T(const POS_T& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pos_x_, &from.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&pos_x_)) + sizeof(pos_y_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.POS_T)
}

inline void POS_T::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&pos_x_)) + sizeof(pos_y_));
}

POS_T::~POS_T() {
  // @@protoc_insertion_point(destructor:msgpacket.POS_T)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void POS_T::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void POS_T::ArenaDtor(void* object) {
  POS_T* _this = reinterpret_cast< POS_T* >(object);
  (void)_this;
}
void POS_T::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void POS_T::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void POS_T::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.POS_T)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_y_) -
      reinterpret_cast<char*>(&pos_x_)) + sizeof(pos_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* POS_T::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pos_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pos_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* POS_T::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.POS_T)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pos_x = 1;
  if (this->_internal_pos_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pos_x(), target);
  }

  // int32 pos_y = 2;
  if (this->_internal_pos_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pos_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.POS_T)
  return target;
}

size_t POS_T::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.POS_T)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pos_x = 1;
  if (this->_internal_pos_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pos_x());
  }

  // int32 pos_y = 2;
  if (this->_internal_pos_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pos_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData POS_T::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    POS_T::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*POS_T::GetClassData() const { return &_class_data_; }

void POS_T::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<POS_T *>(to)->MergeFrom(
      static_cast<const POS_T &>(from));
}


void POS_T::MergeFrom(const POS_T& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.POS_T)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pos_x() != 0) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (from._internal_pos_y() != 0) {
    _internal_set_pos_y(from._internal_pos_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void POS_T::CopyFrom(const POS_T& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.POS_T)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POS_T::IsInitialized() const {
  return true;
}

void POS_T::InternalSwap(POS_T* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(POS_T, pos_y_)
      + sizeof(POS_T::pos_y_)
      - PROTOBUF_FIELD_OFFSET(POS_T, pos_x_)>(
          reinterpret_cast<char*>(&pos_x_),
          reinterpret_cast<char*>(&other->pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata POS_T::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class PROTO_VEC_3F::_Internal {
 public:
};

PROTO_VEC_3F::PROTO_VEC_3F(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.PROTO_VEC_3F)
}
PROTO_VEC_3F::PROTO_VEC_3F(const PROTO_VEC_3F& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.PROTO_VEC_3F)
}

inline void PROTO_VEC_3F::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

PROTO_VEC_3F::~PROTO_VEC_3F() {
  // @@protoc_insertion_point(destructor:msgpacket.PROTO_VEC_3F)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PROTO_VEC_3F::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROTO_VEC_3F::ArenaDtor(void* object) {
  PROTO_VEC_3F* _this = reinterpret_cast< PROTO_VEC_3F* >(object);
  (void)_this;
}
void PROTO_VEC_3F::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROTO_VEC_3F::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PROTO_VEC_3F::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.PROTO_VEC_3F)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROTO_VEC_3F::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROTO_VEC_3F::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.PROTO_VEC_3F)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.PROTO_VEC_3F)
  return target;
}

size_t PROTO_VEC_3F::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.PROTO_VEC_3F)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROTO_VEC_3F::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PROTO_VEC_3F::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROTO_VEC_3F::GetClassData() const { return &_class_data_; }

void PROTO_VEC_3F::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PROTO_VEC_3F *>(to)->MergeFrom(
      static_cast<const PROTO_VEC_3F &>(from));
}


void PROTO_VEC_3F::MergeFrom(const PROTO_VEC_3F& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.PROTO_VEC_3F)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROTO_VEC_3F::CopyFrom(const PROTO_VEC_3F& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.PROTO_VEC_3F)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROTO_VEC_3F::IsInitialized() const {
  return true;
}

void PROTO_VEC_3F::InternalSwap(PROTO_VEC_3F* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROTO_VEC_3F, z_)
      + sizeof(PROTO_VEC_3F::z_)
      - PROTOBUF_FIELD_OFFSET(PROTO_VEC_3F, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROTO_VEC_3F::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class MSG_RPC::_Internal {
 public:
};

MSG_RPC::MSG_RPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_RPC)
}
MSG_RPC::MSG_RPC(const MSG_RPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_bin().empty()) {
    msg_bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_bin(), 
      GetArenaForAllocation());
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_RPC)
}

inline void MSG_RPC::SharedCtor() {
msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_type_));
}

MSG_RPC::~MSG_RPC() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_RPC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_RPC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_bin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RPC::ArenaDtor(void* object) {
  MSG_RPC* _this = reinterpret_cast< MSG_RPC* >(object);
  (void)_this;
}
void MSG_RPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_RPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_RPC::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_RPC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_bin_.ClearToEmpty();
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_RPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes msg_bin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg_bin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_arrive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeout_wait = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          timeout_wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_RPC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_RPC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_msg_id(), target);
  }

  // int32 msg_type = 2;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_type(), target);
  }

  // bytes msg_bin = 3;
  if (!this->_internal_msg_bin().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_bin(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp_arrive(), target);
  }

  // int64 timeout_wait = 6;
  if (this->_internal_timeout_wait() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timeout_wait(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_RPC)
  return target;
}

size_t MSG_RPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_RPC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_bin = 3;
  if (!this->_internal_msg_bin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_bin());
  }

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msg_id());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_arrive());
  }

  // int64 timeout_wait = 6;
  if (this->_internal_timeout_wait() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timeout_wait());
  }

  // int32 msg_type = 2;
  if (this->_internal_msg_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_RPC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_RPC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_RPC::GetClassData() const { return &_class_data_; }

void MSG_RPC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_RPC *>(to)->MergeFrom(
      static_cast<const MSG_RPC &>(from));
}


void MSG_RPC::MergeFrom(const MSG_RPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_RPC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_bin().empty()) {
    _internal_set_msg_bin(from._internal_msg_bin());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timestamp_arrive() != 0) {
    _internal_set_timestamp_arrive(from._internal_timestamp_arrive());
  }
  if (from._internal_timeout_wait() != 0) {
    _internal_set_timeout_wait(from._internal_timeout_wait());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_RPC::CopyFrom(const MSG_RPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_RPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RPC::IsInitialized() const {
  return true;
}

void MSG_RPC::InternalSwap(MSG_RPC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_bin_, lhs_arena,
      &other->msg_bin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_RPC, msg_type_)
      + sizeof(MSG_RPC::msg_type_)
      - PROTOBUF_FIELD_OFFSET(MSG_RPC, msg_id_)>(
          reinterpret_cast<char*>(&msg_id_),
          reinterpret_cast<char*>(&other->msg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RPC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class MSG_RPC_RES::_Internal {
 public:
};

MSG_RPC_RES::MSG_RPC_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_RPC_RES)
}
MSG_RPC_RES::MSG_RPC_RES(const MSG_RPC_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_bin().empty()) {
    msg_bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_bin(), 
      GetArenaForAllocation());
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_process_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(timestamp_process_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_RPC_RES)
}

inline void MSG_RPC_RES::SharedCtor() {
msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_process_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(timestamp_process_));
}

MSG_RPC_RES::~MSG_RPC_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_RPC_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_RPC_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_bin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RPC_RES::ArenaDtor(void* object) {
  MSG_RPC_RES* _this = reinterpret_cast< MSG_RPC_RES* >(object);
  (void)_this;
}
void MSG_RPC_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_RPC_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_RPC_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_RPC_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_bin_.ClearToEmpty();
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_process_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(timestamp_process_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_RPC_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.RESPONSE_CODE res_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res_code(static_cast<::msgpacket::RESPONSE_CODE>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes msg_bin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg_bin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_arrive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          timestamp_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_process = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          timestamp_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_RPC_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_RPC_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_msg_id(), target);
  }

  // int32 msg_type = 2;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_type(), target);
  }

  // .msgpacket.RESPONSE_CODE res_code = 3;
  if (this->_internal_res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_res_code(), target);
  }

  // bytes msg_bin = 4;
  if (!this->_internal_msg_bin().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_msg_bin(), target);
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // int64 timestamp_arrive = 6;
  if (this->_internal_timestamp_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp_arrive(), target);
  }

  // int64 timestamp_process = 7;
  if (this->_internal_timestamp_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_timestamp_process(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_RPC_RES)
  return target;
}

size_t MSG_RPC_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_RPC_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_bin = 4;
  if (!this->_internal_msg_bin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_bin());
  }

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msg_id());
  }

  // int32 msg_type = 2;
  if (this->_internal_msg_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_type());
  }

  // .msgpacket.RESPONSE_CODE res_code = 3;
  if (this->_internal_res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res_code());
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 timestamp_arrive = 6;
  if (this->_internal_timestamp_arrive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_arrive());
  }

  // int64 timestamp_process = 7;
  if (this->_internal_timestamp_process() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_process());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_RPC_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_RPC_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_RPC_RES::GetClassData() const { return &_class_data_; }

void MSG_RPC_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_RPC_RES *>(to)->MergeFrom(
      static_cast<const MSG_RPC_RES &>(from));
}


void MSG_RPC_RES::MergeFrom(const MSG_RPC_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_RPC_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_bin().empty()) {
    _internal_set_msg_bin(from._internal_msg_bin());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timestamp_arrive() != 0) {
    _internal_set_timestamp_arrive(from._internal_timestamp_arrive());
  }
  if (from._internal_timestamp_process() != 0) {
    _internal_set_timestamp_process(from._internal_timestamp_process());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_RPC_RES::CopyFrom(const MSG_RPC_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_RPC_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RPC_RES::IsInitialized() const {
  return true;
}

void MSG_RPC_RES::InternalSwap(MSG_RPC_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_bin_, lhs_arena,
      &other->msg_bin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_RPC_RES, timestamp_process_)
      + sizeof(MSG_RPC_RES::timestamp_process_)
      - PROTOBUF_FIELD_OFFSET(MSG_RPC_RES, msg_id_)>(
          reinterpret_cast<char*>(&msg_id_),
          reinterpret_cast<char*>(&other->msg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RPC_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// ===================================================================

class MSG_SRV_REPORT::_Internal {
 public:
};

MSG_SRV_REPORT::MSG_SRV_REPORT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_SRV_REPORT)
}
MSG_SRV_REPORT::MSG_SRV_REPORT(const MSG_SRV_REPORT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srv_id_, &from.srv_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_conn_id_) -
    reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_SRV_REPORT)
}

inline void MSG_SRV_REPORT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tcp_conn_id_) -
    reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
}

MSG_SRV_REPORT::~MSG_SRV_REPORT() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_SRV_REPORT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_SRV_REPORT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_SRV_REPORT::ArenaDtor(void* object) {
  MSG_SRV_REPORT* _this = reinterpret_cast< MSG_SRV_REPORT* >(object);
  (void)_this;
}
void MSG_SRV_REPORT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_SRV_REPORT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_SRV_REPORT::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_SRV_REPORT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srv_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_conn_id_) -
      reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_SRV_REPORT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 tcp_conn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          tcp_conn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_SRV_REPORT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_SRV_REPORT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_id = 1;
  if (this->_internal_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_id(), target);
  }

  // int64 tcp_conn_id = 2;
  if (this->_internal_tcp_conn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_tcp_conn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_SRV_REPORT)
  return target;
}

size_t MSG_SRV_REPORT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_SRV_REPORT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srv_id = 1;
  if (this->_internal_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_id());
  }

  // int64 tcp_conn_id = 2;
  if (this->_internal_tcp_conn_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_tcp_conn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_SRV_REPORT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_SRV_REPORT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_SRV_REPORT::GetClassData() const { return &_class_data_; }

void MSG_SRV_REPORT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_SRV_REPORT *>(to)->MergeFrom(
      static_cast<const MSG_SRV_REPORT &>(from));
}


void MSG_SRV_REPORT::MergeFrom(const MSG_SRV_REPORT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_SRV_REPORT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_id() != 0) {
    _internal_set_srv_id(from._internal_srv_id());
  }
  if (from._internal_tcp_conn_id() != 0) {
    _internal_set_tcp_conn_id(from._internal_tcp_conn_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_SRV_REPORT::CopyFrom(const MSG_SRV_REPORT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_SRV_REPORT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SRV_REPORT::IsInitialized() const {
  return true;
}

void MSG_SRV_REPORT::InternalSwap(MSG_SRV_REPORT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_SRV_REPORT, tcp_conn_id_)
      + sizeof(MSG_SRV_REPORT::tcp_conn_id_)
      - PROTOBUF_FIELD_OFFSET(MSG_SRV_REPORT, srv_id_)>(
          reinterpret_cast<char*>(&srv_id_),
          reinterpret_cast<char*>(&other->srv_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SRV_REPORT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[4]);
}

// ===================================================================

class MSG_SRV_REPORT_RES::_Internal {
 public:
};

MSG_SRV_REPORT_RES::MSG_SRV_REPORT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_SRV_REPORT_RES)
}
MSG_SRV_REPORT_RES::MSG_SRV_REPORT_RES(const MSG_SRV_REPORT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srv_id_, &from.srv_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_conn_id_) -
    reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_SRV_REPORT_RES)
}

inline void MSG_SRV_REPORT_RES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tcp_conn_id_) -
    reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
}

MSG_SRV_REPORT_RES::~MSG_SRV_REPORT_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_SRV_REPORT_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_SRV_REPORT_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_SRV_REPORT_RES::ArenaDtor(void* object) {
  MSG_SRV_REPORT_RES* _this = reinterpret_cast< MSG_SRV_REPORT_RES* >(object);
  (void)_this;
}
void MSG_SRV_REPORT_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_SRV_REPORT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_SRV_REPORT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_SRV_REPORT_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srv_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_conn_id_) -
      reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_SRV_REPORT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 tcp_conn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          tcp_conn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_SRV_REPORT_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_SRV_REPORT_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_id = 1;
  if (this->_internal_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_id(), target);
  }

  // int64 tcp_conn_id = 2;
  if (this->_internal_tcp_conn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_tcp_conn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_SRV_REPORT_RES)
  return target;
}

size_t MSG_SRV_REPORT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_SRV_REPORT_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srv_id = 1;
  if (this->_internal_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_id());
  }

  // int64 tcp_conn_id = 2;
  if (this->_internal_tcp_conn_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_tcp_conn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_SRV_REPORT_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_SRV_REPORT_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_SRV_REPORT_RES::GetClassData() const { return &_class_data_; }

void MSG_SRV_REPORT_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_SRV_REPORT_RES *>(to)->MergeFrom(
      static_cast<const MSG_SRV_REPORT_RES &>(from));
}


void MSG_SRV_REPORT_RES::MergeFrom(const MSG_SRV_REPORT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_SRV_REPORT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_id() != 0) {
    _internal_set_srv_id(from._internal_srv_id());
  }
  if (from._internal_tcp_conn_id() != 0) {
    _internal_set_tcp_conn_id(from._internal_tcp_conn_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_SRV_REPORT_RES::CopyFrom(const MSG_SRV_REPORT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_SRV_REPORT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SRV_REPORT_RES::IsInitialized() const {
  return true;
}

void MSG_SRV_REPORT_RES::InternalSwap(MSG_SRV_REPORT_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_SRV_REPORT_RES, tcp_conn_id_)
      + sizeof(MSG_SRV_REPORT_RES::tcp_conn_id_)
      - PROTOBUF_FIELD_OFFSET(MSG_SRV_REPORT_RES, srv_id_)>(
          reinterpret_cast<char*>(&srv_id_),
          reinterpret_cast<char*>(&other->srv_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SRV_REPORT_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[5]);
}

// ===================================================================

class MSG_HEARTBEAT::_Internal {
 public:
};

MSG_HEARTBEAT::MSG_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_HEARTBEAT)
}
MSG_HEARTBEAT::MSG_HEARTBEAT(const MSG_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_HEARTBEAT)
}

inline void MSG_HEARTBEAT::SharedCtor() {
id_ = int64_t{0};
}

MSG_HEARTBEAT::~MSG_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_HEARTBEAT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_HEARTBEAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_HEARTBEAT::ArenaDtor(void* object) {
  MSG_HEARTBEAT* _this = reinterpret_cast< MSG_HEARTBEAT* >(object);
  (void)_this;
}
void MSG_HEARTBEAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_HEARTBEAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_HEARTBEAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_HEARTBEAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_HEARTBEAT)
  return target;
}

size_t MSG_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_HEARTBEAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_HEARTBEAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_HEARTBEAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_HEARTBEAT::GetClassData() const { return &_class_data_; }

void MSG_HEARTBEAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_HEARTBEAT *>(to)->MergeFrom(
      static_cast<const MSG_HEARTBEAT &>(from));
}


void MSG_HEARTBEAT::MergeFrom(const MSG_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_HEARTBEAT::CopyFrom(const MSG_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_HEARTBEAT::IsInitialized() const {
  return true;
}

void MSG_HEARTBEAT::InternalSwap(MSG_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_HEARTBEAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[6]);
}

// ===================================================================

class MSG_HEARTBEAT_RES::_Internal {
 public:
};

MSG_HEARTBEAT_RES::MSG_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_HEARTBEAT_RES)
}
MSG_HEARTBEAT_RES::MSG_HEARTBEAT_RES(const MSG_HEARTBEAT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_HEARTBEAT_RES)
}

inline void MSG_HEARTBEAT_RES::SharedCtor() {
id_ = int64_t{0};
}

MSG_HEARTBEAT_RES::~MSG_HEARTBEAT_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_HEARTBEAT_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_HEARTBEAT_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_HEARTBEAT_RES::ArenaDtor(void* object) {
  MSG_HEARTBEAT_RES* _this = reinterpret_cast< MSG_HEARTBEAT_RES* >(object);
  (void)_this;
}
void MSG_HEARTBEAT_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_HEARTBEAT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_HEARTBEAT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_HEARTBEAT_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_HEARTBEAT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_HEARTBEAT_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_HEARTBEAT_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_HEARTBEAT_RES)
  return target;
}

size_t MSG_HEARTBEAT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_HEARTBEAT_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_HEARTBEAT_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_HEARTBEAT_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_HEARTBEAT_RES::GetClassData() const { return &_class_data_; }

void MSG_HEARTBEAT_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_HEARTBEAT_RES *>(to)->MergeFrom(
      static_cast<const MSG_HEARTBEAT_RES &>(from));
}


void MSG_HEARTBEAT_RES::MergeFrom(const MSG_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_HEARTBEAT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_HEARTBEAT_RES::CopyFrom(const MSG_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_HEARTBEAT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_HEARTBEAT_RES::IsInitialized() const {
  return true;
}

void MSG_HEARTBEAT_RES::InternalSwap(MSG_HEARTBEAT_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_HEARTBEAT_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[7]);
}

// ===================================================================

class MSG_TEST::_Internal {
 public:
};

MSG_TEST::MSG_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TEST)
}
MSG_TEST::MSG_TEST(const MSG_TEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_arrive_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_arrive_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TEST)
}

inline void MSG_TEST::SharedCtor() {
str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_arrive_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_arrive_));
}

MSG_TEST::~MSG_TEST() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_TEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_TEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TEST::ArenaDtor(void* object) {
  MSG_TEST* _this = reinterpret_cast< MSG_TEST* >(object);
  (void)_this;
}
void MSG_TEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_TEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_TEST::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_TEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_arrive_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_arrive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_TEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.MSG_TEST.str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_arrive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_TEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_TEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string str = 2;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.MSG_TEST.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  // int64 seq = 3;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_seq(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp_arrive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_TEST)
  return target;
}

size_t MSG_TEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_TEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 2;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 seq = 3;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_arrive());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_TEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TEST::GetClassData() const { return &_class_data_; }

void MSG_TEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_TEST *>(to)->MergeFrom(
      static_cast<const MSG_TEST &>(from));
}


void MSG_TEST::MergeFrom(const MSG_TEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_TEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _internal_set_str(from._internal_str());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timestamp_arrive() != 0) {
    _internal_set_timestamp_arrive(from._internal_timestamp_arrive());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_TEST::CopyFrom(const MSG_TEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_TEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST::IsInitialized() const {
  return true;
}

void MSG_TEST::InternalSwap(MSG_TEST* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_TEST, timestamp_arrive_)
      + sizeof(MSG_TEST::timestamp_arrive_)
      - PROTOBUF_FIELD_OFFSET(MSG_TEST, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[8]);
}

// ===================================================================

class MSG_TEST_RES::_Internal {
 public:
};

MSG_TEST_RES::MSG_TEST_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TEST_RES)
}
MSG_TEST_RES::MSG_TEST_RES(const MSG_TEST_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_process_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_process_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TEST_RES)
}

inline void MSG_TEST_RES::SharedCtor() {
str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_process_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_process_));
}

MSG_TEST_RES::~MSG_TEST_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_TEST_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_TEST_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TEST_RES::ArenaDtor(void* object) {
  MSG_TEST_RES* _this = reinterpret_cast< MSG_TEST_RES* >(object);
  (void)_this;
}
void MSG_TEST_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_TEST_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_TEST_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_TEST_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_process_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_process_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_TEST_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.MSG_TEST_RES.str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_arrive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_process = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          timestamp_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_TEST_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_TEST_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string str = 2;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.MSG_TEST_RES.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  // int64 seq = 3;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_seq(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp_arrive(), target);
  }

  // int64 timestamp_process = 6;
  if (this->_internal_timestamp_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp_process(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_TEST_RES)
  return target;
}

size_t MSG_TEST_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_TEST_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 2;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 seq = 3;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_arrive());
  }

  // int64 timestamp_process = 6;
  if (this->_internal_timestamp_process() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_process());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TEST_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_TEST_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TEST_RES::GetClassData() const { return &_class_data_; }

void MSG_TEST_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_TEST_RES *>(to)->MergeFrom(
      static_cast<const MSG_TEST_RES &>(from));
}


void MSG_TEST_RES::MergeFrom(const MSG_TEST_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_TEST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _internal_set_str(from._internal_str());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timestamp_arrive() != 0) {
    _internal_set_timestamp_arrive(from._internal_timestamp_arrive());
  }
  if (from._internal_timestamp_process() != 0) {
    _internal_set_timestamp_process(from._internal_timestamp_process());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_TEST_RES::CopyFrom(const MSG_TEST_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_TEST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST_RES::IsInitialized() const {
  return true;
}

void MSG_TEST_RES::InternalSwap(MSG_TEST_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_TEST_RES, timestamp_process_)
      + sizeof(MSG_TEST_RES::timestamp_process_)
      - PROTOBUF_FIELD_OFFSET(MSG_TEST_RES, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[9]);
}

// ===================================================================

class MSG_TEST_RPC::_Internal {
 public:
};

MSG_TEST_RPC::MSG_TEST_RPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TEST_RPC)
}
MSG_TEST_RPC::MSG_TEST_RPC(const MSG_TEST_RPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpc_count_ = from.rpc_count_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TEST_RPC)
}

inline void MSG_TEST_RPC::SharedCtor() {
rpc_count_ = int64_t{0};
}

MSG_TEST_RPC::~MSG_TEST_RPC() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_TEST_RPC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_TEST_RPC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_TEST_RPC::ArenaDtor(void* object) {
  MSG_TEST_RPC* _this = reinterpret_cast< MSG_TEST_RPC* >(object);
  (void)_this;
}
void MSG_TEST_RPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_TEST_RPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_TEST_RPC::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_TEST_RPC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpc_count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_TEST_RPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 rpc_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          rpc_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_TEST_RPC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_TEST_RPC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 rpc_count = 1;
  if (this->_internal_rpc_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_rpc_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_TEST_RPC)
  return target;
}

size_t MSG_TEST_RPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_TEST_RPC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 rpc_count = 1;
  if (this->_internal_rpc_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_rpc_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TEST_RPC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_TEST_RPC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TEST_RPC::GetClassData() const { return &_class_data_; }

void MSG_TEST_RPC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_TEST_RPC *>(to)->MergeFrom(
      static_cast<const MSG_TEST_RPC &>(from));
}


void MSG_TEST_RPC::MergeFrom(const MSG_TEST_RPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_TEST_RPC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rpc_count() != 0) {
    _internal_set_rpc_count(from._internal_rpc_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_TEST_RPC::CopyFrom(const MSG_TEST_RPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_TEST_RPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST_RPC::IsInitialized() const {
  return true;
}

void MSG_TEST_RPC::InternalSwap(MSG_TEST_RPC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rpc_count_, other->rpc_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST_RPC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[10]);
}

// ===================================================================

class MSG_TEST_RPC_RES::_Internal {
 public:
};

MSG_TEST_RPC_RES::MSG_TEST_RPC_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TEST_RPC_RES)
}
MSG_TEST_RPC_RES::MSG_TEST_RPC_RES(const MSG_TEST_RPC_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TEST_RPC_RES)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TEST_RPC_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TEST_RPC_RES::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST_RPC_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[11]);
}

// ===================================================================

class MSG_LOGIN::_Internal {
 public:
};

MSG_LOGIN::MSG_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_LOGIN)
}
MSG_LOGIN::MSG_LOGIN(const MSG_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_range_) -
    reinterpret_cast<char*>(&id_)) + sizeof(view_range_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_LOGIN)
}

inline void MSG_LOGIN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&view_range_) -
    reinterpret_cast<char*>(&id_)) + sizeof(view_range_));
}

MSG_LOGIN::~MSG_LOGIN() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_LOGIN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_LOGIN::ArenaDtor(void* object) {
  MSG_LOGIN* _this = reinterpret_cast< MSG_LOGIN* >(object);
  (void)_this;
}
void MSG_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_range_) -
      reinterpret_cast<char*>(&id_)) + sizeof(view_range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float X = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float view_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // float X = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float Y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float view_range = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_view_range = this->_internal_view_range();
  uint32_t raw_view_range;
  memcpy(&raw_view_range, &tmp_view_range, sizeof(tmp_view_range));
  if (raw_view_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_view_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_LOGIN)
  return target;
}

size_t MSG_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // float X = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float Y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float view_range = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_view_range = this->_internal_view_range();
  uint32_t raw_view_range;
  memcpy(&raw_view_range, &tmp_view_range, sizeof(tmp_view_range));
  if (raw_view_range != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_LOGIN::GetClassData() const { return &_class_data_; }

void MSG_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_LOGIN *>(to)->MergeFrom(
      static_cast<const MSG_LOGIN &>(from));
}


void MSG_LOGIN::MergeFrom(const MSG_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_view_range = from._internal_view_range();
  uint32_t raw_view_range;
  memcpy(&raw_view_range, &tmp_view_range, sizeof(tmp_view_range));
  if (raw_view_range != 0) {
    _internal_set_view_range(from._internal_view_range());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_LOGIN::CopyFrom(const MSG_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LOGIN::IsInitialized() const {
  return true;
}

void MSG_LOGIN::InternalSwap(MSG_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_LOGIN, view_range_)
      + sizeof(MSG_LOGIN::view_range_)
      - PROTOBUF_FIELD_OFFSET(MSG_LOGIN, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[12]);
}

// ===================================================================

class MSG_LOGIN_RES::_Internal {
 public:
};

MSG_LOGIN_RES::MSG_LOGIN_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_LOGIN_RES)
}
MSG_LOGIN_RES::MSG_LOGIN_RES(const MSG_LOGIN_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&obj_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(obj_id_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_LOGIN_RES)
}

inline void MSG_LOGIN_RES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&obj_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(obj_id_));
}

MSG_LOGIN_RES::~MSG_LOGIN_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_LOGIN_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_LOGIN_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_LOGIN_RES::ArenaDtor(void* object) {
  MSG_LOGIN_RES* _this = reinterpret_cast< MSG_LOGIN_RES* >(object);
  (void)_this;
}
void MSG_LOGIN_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_LOGIN_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_LOGIN_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_LOGIN_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(obj_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_LOGIN_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 connect_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          connect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 obj_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          obj_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_LOGIN_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_LOGIN_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 connect_id = 2;
  if (this->_internal_connect_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_connect_id(), target);
  }

  // int64 fd = 3;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fd(), target);
  }

  // int64 obj_id = 4;
  if (this->_internal_obj_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_obj_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_LOGIN_RES)
  return target;
}

size_t MSG_LOGIN_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_LOGIN_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 connect_id = 2;
  if (this->_internal_connect_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_connect_id());
  }

  // int64 fd = 3;
  if (this->_internal_fd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_fd());
  }

  // int64 obj_id = 4;
  if (this->_internal_obj_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_obj_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_LOGIN_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_LOGIN_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_LOGIN_RES::GetClassData() const { return &_class_data_; }

void MSG_LOGIN_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_LOGIN_RES *>(to)->MergeFrom(
      static_cast<const MSG_LOGIN_RES &>(from));
}


void MSG_LOGIN_RES::MergeFrom(const MSG_LOGIN_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_LOGIN_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_connect_id() != 0) {
    _internal_set_connect_id(from._internal_connect_id());
  }
  if (from._internal_fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  if (from._internal_obj_id() != 0) {
    _internal_set_obj_id(from._internal_obj_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_LOGIN_RES::CopyFrom(const MSG_LOGIN_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_LOGIN_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LOGIN_RES::IsInitialized() const {
  return true;
}

void MSG_LOGIN_RES::InternalSwap(MSG_LOGIN_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_LOGIN_RES, obj_id_)
      + sizeof(MSG_LOGIN_RES::obj_id_)
      - PROTOBUF_FIELD_OFFSET(MSG_LOGIN_RES, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LOGIN_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[13]);
}

// ===================================================================

class MSG_TCP_STATIC::_Internal {
 public:
};

MSG_TCP_STATIC::MSG_TCP_STATIC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TCP_STATIC)
}
MSG_TCP_STATIC::MSG_TCP_STATIC(const MSG_TCP_STATIC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TCP_STATIC)
}

inline void MSG_TCP_STATIC::SharedCtor() {
seq_ = int64_t{0};
}

MSG_TCP_STATIC::~MSG_TCP_STATIC() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_TCP_STATIC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_TCP_STATIC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_TCP_STATIC::ArenaDtor(void* object) {
  MSG_TCP_STATIC* _this = reinterpret_cast< MSG_TCP_STATIC* >(object);
  (void)_this;
}
void MSG_TCP_STATIC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_TCP_STATIC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_TCP_STATIC::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_TCP_STATIC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_TCP_STATIC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_TCP_STATIC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_TCP_STATIC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_TCP_STATIC)
  return target;
}

size_t MSG_TCP_STATIC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_TCP_STATIC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TCP_STATIC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_TCP_STATIC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TCP_STATIC::GetClassData() const { return &_class_data_; }

void MSG_TCP_STATIC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_TCP_STATIC *>(to)->MergeFrom(
      static_cast<const MSG_TCP_STATIC &>(from));
}


void MSG_TCP_STATIC::MergeFrom(const MSG_TCP_STATIC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_TCP_STATIC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_TCP_STATIC::CopyFrom(const MSG_TCP_STATIC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_TCP_STATIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TCP_STATIC::IsInitialized() const {
  return true;
}

void MSG_TCP_STATIC::InternalSwap(MSG_TCP_STATIC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TCP_STATIC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[14]);
}

// ===================================================================

MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse() {}
MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::MergeFrom(const MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[15]);
}

// ===================================================================

class MSG_TCP_STATIC_RES::_Internal {
 public:
};

MSG_TCP_STATIC_RES::MSG_TCP_STATIC_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_static_msg_recv_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TCP_STATIC_RES)
}
MSG_TCP_STATIC_RES::MSG_TCP_STATIC_RES(const MSG_TCP_STATIC_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_static_msg_recv_.MergeFrom(from.map_static_msg_recv_);
  ::memcpy(&packet_count_, &from.packet_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&byte_send_) -
    reinterpret_cast<char*>(&packet_count_)) + sizeof(byte_send_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TCP_STATIC_RES)
}

inline void MSG_TCP_STATIC_RES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packet_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&byte_send_) -
    reinterpret_cast<char*>(&packet_count_)) + sizeof(byte_send_));
}

MSG_TCP_STATIC_RES::~MSG_TCP_STATIC_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_TCP_STATIC_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_TCP_STATIC_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_TCP_STATIC_RES::ArenaDtor(void* object) {
  MSG_TCP_STATIC_RES* _this = reinterpret_cast< MSG_TCP_STATIC_RES* >(object);
  (void)_this;
  _this->map_static_msg_recv_. ~MapField();
}
inline void MSG_TCP_STATIC_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MSG_TCP_STATIC_RES::ArenaDtor);
  }
}
void MSG_TCP_STATIC_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_TCP_STATIC_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_TCP_STATIC_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_static_msg_recv_.Clear();
  ::memset(&packet_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&byte_send_) -
      reinterpret_cast<char*>(&packet_count_)) + sizeof(byte_send_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_TCP_STATIC_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 packet_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 byte_recv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          byte_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 byte_proc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          byte_proc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 byte_send = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          byte_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, int64> map_static_msg_recv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_static_msg_recv_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_TCP_STATIC_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_TCP_STATIC_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 packet_count = 1;
  if (this->_internal_packet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_packet_count(), target);
  }

  // int64 byte_recv = 2;
  if (this->_internal_byte_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_byte_recv(), target);
  }

  // int64 byte_proc = 3;
  if (this->_internal_byte_proc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_byte_proc(), target);
  }

  // int64 byte_send = 4;
  if (this->_internal_byte_send() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_byte_send(), target);
  }

  // map<int32, int64> map_static_msg_recv = 5;
  if (!this->_internal_map_static_msg_recv().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_static_msg_recv().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_static_msg_recv().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >::const_iterator
          it = this->_internal_map_static_msg_recv().begin();
          it != this->_internal_map_static_msg_recv().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >::const_iterator
          it = this->_internal_map_static_msg_recv().begin();
          it != this->_internal_map_static_msg_recv().end(); ++it) {
        target = MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_TCP_STATIC_RES)
  return target;
}

size_t MSG_TCP_STATIC_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_TCP_STATIC_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int64> map_static_msg_recv = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_static_msg_recv_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >::const_iterator
      it = this->_internal_map_static_msg_recv().begin();
      it != this->_internal_map_static_msg_recv().end(); ++it) {
    total_size += MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 packet_count = 1;
  if (this->_internal_packet_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_packet_count());
  }

  // int64 byte_recv = 2;
  if (this->_internal_byte_recv() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_byte_recv());
  }

  // int64 byte_proc = 3;
  if (this->_internal_byte_proc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_byte_proc());
  }

  // int64 byte_send = 4;
  if (this->_internal_byte_send() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_byte_send());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TCP_STATIC_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_TCP_STATIC_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TCP_STATIC_RES::GetClassData() const { return &_class_data_; }

void MSG_TCP_STATIC_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_TCP_STATIC_RES *>(to)->MergeFrom(
      static_cast<const MSG_TCP_STATIC_RES &>(from));
}


void MSG_TCP_STATIC_RES::MergeFrom(const MSG_TCP_STATIC_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_TCP_STATIC_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_static_msg_recv_.MergeFrom(from.map_static_msg_recv_);
  if (from._internal_packet_count() != 0) {
    _internal_set_packet_count(from._internal_packet_count());
  }
  if (from._internal_byte_recv() != 0) {
    _internal_set_byte_recv(from._internal_byte_recv());
  }
  if (from._internal_byte_proc() != 0) {
    _internal_set_byte_proc(from._internal_byte_proc());
  }
  if (from._internal_byte_send() != 0) {
    _internal_set_byte_send(from._internal_byte_send());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_TCP_STATIC_RES::CopyFrom(const MSG_TCP_STATIC_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_TCP_STATIC_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TCP_STATIC_RES::IsInitialized() const {
  return true;
}

void MSG_TCP_STATIC_RES::InternalSwap(MSG_TCP_STATIC_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_static_msg_recv_.InternalSwap(&other->map_static_msg_recv_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_TCP_STATIC_RES, byte_send_)
      + sizeof(MSG_TCP_STATIC_RES::byte_send_)
      - PROTOBUF_FIELD_OFFSET(MSG_TCP_STATIC_RES, packet_count_)>(
          reinterpret_cast<char*>(&packet_count_),
          reinterpret_cast<char*>(&other->packet_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TCP_STATIC_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[16]);
}

// ===================================================================

class MSG_CLIENT_ENTER::_Internal {
 public:
};

MSG_CLIENT_ENTER::MSG_CLIENT_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_CLIENT_ENTER)
}
MSG_CLIENT_ENTER::MSG_CLIENT_ENTER(const MSG_CLIENT_ENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_ = from.client_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_CLIENT_ENTER)
}

inline void MSG_CLIENT_ENTER::SharedCtor() {
client_id_ = int64_t{0};
}

MSG_CLIENT_ENTER::~MSG_CLIENT_ENTER() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_CLIENT_ENTER)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_CLIENT_ENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_CLIENT_ENTER::ArenaDtor(void* object) {
  MSG_CLIENT_ENTER* _this = reinterpret_cast< MSG_CLIENT_ENTER* >(object);
  (void)_this;
}
void MSG_CLIENT_ENTER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_CLIENT_ENTER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_CLIENT_ENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_CLIENT_ENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_CLIENT_ENTER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_CLIENT_ENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_CLIENT_ENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_CLIENT_ENTER)
  return target;
}

size_t MSG_CLIENT_ENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_CLIENT_ENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_CLIENT_ENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_CLIENT_ENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_CLIENT_ENTER::GetClassData() const { return &_class_data_; }

void MSG_CLIENT_ENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_CLIENT_ENTER *>(to)->MergeFrom(
      static_cast<const MSG_CLIENT_ENTER &>(from));
}


void MSG_CLIENT_ENTER::MergeFrom(const MSG_CLIENT_ENTER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_CLIENT_ENTER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_CLIENT_ENTER::CopyFrom(const MSG_CLIENT_ENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_CLIENT_ENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CLIENT_ENTER::IsInitialized() const {
  return true;
}

void MSG_CLIENT_ENTER::InternalSwap(MSG_CLIENT_ENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_CLIENT_ENTER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[17]);
}

// ===================================================================

class MSG_CLIENT_ENTER_RES::_Internal {
 public:
};

MSG_CLIENT_ENTER_RES::MSG_CLIENT_ENTER_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_CLIENT_ENTER_RES)
}
MSG_CLIENT_ENTER_RES::MSG_CLIENT_ENTER_RES(const MSG_CLIENT_ENTER_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  redirect_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    redirect_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redirect_ip().empty()) {
    redirect_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redirect_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&redirect_port_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(redirect_port_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_CLIENT_ENTER_RES)
}

inline void MSG_CLIENT_ENTER_RES::SharedCtor() {
redirect_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  redirect_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&redirect_port_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(redirect_port_));
}

MSG_CLIENT_ENTER_RES::~MSG_CLIENT_ENTER_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_CLIENT_ENTER_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_CLIENT_ENTER_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  redirect_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_CLIENT_ENTER_RES::ArenaDtor(void* object) {
  MSG_CLIENT_ENTER_RES* _this = reinterpret_cast< MSG_CLIENT_ENTER_RES* >(object);
  (void)_this;
}
void MSG_CLIENT_ENTER_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_CLIENT_ENTER_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_CLIENT_ENTER_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_CLIENT_ENTER_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redirect_ip_.ClearToEmpty();
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redirect_port_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(redirect_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_CLIENT_ENTER_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.RESPONSE_CODE res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::msgpacket::RESPONSE_CODE>(val));
        } else
          goto handle_unusual;
        continue;
      // string redirect_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_redirect_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.MSG_CLIENT_ENTER_RES.redirect_ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 redirect_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          redirect_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_CLIENT_ENTER_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_CLIENT_ENTER_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_client_id(), target);
  }

  // .msgpacket.RESPONSE_CODE res = 2;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_res(), target);
  }

  // string redirect_ip = 4;
  if (!this->_internal_redirect_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redirect_ip().data(), static_cast<int>(this->_internal_redirect_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.MSG_CLIENT_ENTER_RES.redirect_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_redirect_ip(), target);
  }

  // int32 redirect_port = 5;
  if (this->_internal_redirect_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_redirect_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_CLIENT_ENTER_RES)
  return target;
}

size_t MSG_CLIENT_ENTER_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_CLIENT_ENTER_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string redirect_ip = 4;
  if (!this->_internal_redirect_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redirect_ip());
  }

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_client_id());
  }

  // .msgpacket.RESPONSE_CODE res = 2;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  // int32 redirect_port = 5;
  if (this->_internal_redirect_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_redirect_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_CLIENT_ENTER_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_CLIENT_ENTER_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_CLIENT_ENTER_RES::GetClassData() const { return &_class_data_; }

void MSG_CLIENT_ENTER_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_CLIENT_ENTER_RES *>(to)->MergeFrom(
      static_cast<const MSG_CLIENT_ENTER_RES &>(from));
}


void MSG_CLIENT_ENTER_RES::MergeFrom(const MSG_CLIENT_ENTER_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_CLIENT_ENTER_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_redirect_ip().empty()) {
    _internal_set_redirect_ip(from._internal_redirect_ip());
  }
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  if (from._internal_redirect_port() != 0) {
    _internal_set_redirect_port(from._internal_redirect_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_CLIENT_ENTER_RES::CopyFrom(const MSG_CLIENT_ENTER_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_CLIENT_ENTER_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CLIENT_ENTER_RES::IsInitialized() const {
  return true;
}

void MSG_CLIENT_ENTER_RES::InternalSwap(MSG_CLIENT_ENTER_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redirect_ip_, lhs_arena,
      &other->redirect_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_CLIENT_ENTER_RES, redirect_port_)
      + sizeof(MSG_CLIENT_ENTER_RES::redirect_port_)
      - PROTOBUF_FIELD_OFFSET(MSG_CLIENT_ENTER_RES, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_CLIENT_ENTER_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[18]);
}

// ===================================================================

class MSG_GET_MAP::_Internal {
 public:
};

MSG_GET_MAP::MSG_GET_MAP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_GET_MAP)
}
MSG_GET_MAP::MSG_GET_MAP(const MSG_GET_MAP& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_GET_MAP)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_GET_MAP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_GET_MAP::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MSG_GET_MAP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[19]);
}

// ===================================================================

class MSG_GET_MAP_RES::_Internal {
 public:
};

MSG_GET_MAP_RES::MSG_GET_MAP_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_GET_MAP_RES)
}
MSG_GET_MAP_RES::MSG_GET_MAP_RES(const MSG_GET_MAP_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_data().empty()) {
    map_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&map_wid_, &from.map_wid_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_pitch_) -
    reinterpret_cast<char*>(&map_wid_)) + sizeof(map_pitch_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_GET_MAP_RES)
}

inline void MSG_GET_MAP_RES::SharedCtor() {
map_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&map_wid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&map_pitch_) -
    reinterpret_cast<char*>(&map_wid_)) + sizeof(map_pitch_));
}

MSG_GET_MAP_RES::~MSG_GET_MAP_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_GET_MAP_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_GET_MAP_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_GET_MAP_RES::ArenaDtor(void* object) {
  MSG_GET_MAP_RES* _this = reinterpret_cast< MSG_GET_MAP_RES* >(object);
  (void)_this;
}
void MSG_GET_MAP_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_GET_MAP_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_GET_MAP_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_GET_MAP_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_data_.ClearToEmpty();
  ::memset(&map_wid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_pitch_) -
      reinterpret_cast<char*>(&map_wid_)) + sizeof(map_pitch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_GET_MAP_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 map_wid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          map_wid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          map_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          map_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes map_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_map_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_GET_MAP_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_GET_MAP_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_wid = 1;
  if (this->_internal_map_wid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_map_wid(), target);
  }

  // int32 map_high = 2;
  if (this->_internal_map_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_high(), target);
  }

  // int32 map_pitch = 3;
  if (this->_internal_map_pitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_map_pitch(), target);
  }

  // bytes map_data = 4;
  if (!this->_internal_map_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_map_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_GET_MAP_RES)
  return target;
}

size_t MSG_GET_MAP_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_GET_MAP_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes map_data = 4;
  if (!this->_internal_map_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_map_data());
  }

  // int32 map_wid = 1;
  if (this->_internal_map_wid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_map_wid());
  }

  // int32 map_high = 2;
  if (this->_internal_map_high() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_map_high());
  }

  // int32 map_pitch = 3;
  if (this->_internal_map_pitch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_map_pitch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_GET_MAP_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_GET_MAP_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_GET_MAP_RES::GetClassData() const { return &_class_data_; }

void MSG_GET_MAP_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_GET_MAP_RES *>(to)->MergeFrom(
      static_cast<const MSG_GET_MAP_RES &>(from));
}


void MSG_GET_MAP_RES::MergeFrom(const MSG_GET_MAP_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_GET_MAP_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_data().empty()) {
    _internal_set_map_data(from._internal_map_data());
  }
  if (from._internal_map_wid() != 0) {
    _internal_set_map_wid(from._internal_map_wid());
  }
  if (from._internal_map_high() != 0) {
    _internal_set_map_high(from._internal_map_high());
  }
  if (from._internal_map_pitch() != 0) {
    _internal_set_map_pitch(from._internal_map_pitch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_GET_MAP_RES::CopyFrom(const MSG_GET_MAP_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_GET_MAP_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_GET_MAP_RES::IsInitialized() const {
  return true;
}

void MSG_GET_MAP_RES::InternalSwap(MSG_GET_MAP_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_data_, lhs_arena,
      &other->map_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_GET_MAP_RES, map_pitch_)
      + sizeof(MSG_GET_MAP_RES::map_pitch_)
      - PROTOBUF_FIELD_OFFSET(MSG_GET_MAP_RES, map_wid_)>(
          reinterpret_cast<char*>(&map_wid_),
          reinterpret_cast<char*>(&other->map_wid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_GET_MAP_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[20]);
}

// ===================================================================

class MSG_PATH_SEARCH::_Internal {
 public:
  static const ::msgpacket::POS_T& pos_src(const MSG_PATH_SEARCH* msg);
  static const ::msgpacket::POS_T& pos_dst(const MSG_PATH_SEARCH* msg);
};

const ::msgpacket::POS_T&
MSG_PATH_SEARCH::_Internal::pos_src(const MSG_PATH_SEARCH* msg) {
  return *msg->pos_src_;
}
const ::msgpacket::POS_T&
MSG_PATH_SEARCH::_Internal::pos_dst(const MSG_PATH_SEARCH* msg) {
  return *msg->pos_dst_;
}
MSG_PATH_SEARCH::MSG_PATH_SEARCH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_PATH_SEARCH)
}
MSG_PATH_SEARCH::MSG_PATH_SEARCH(const MSG_PATH_SEARCH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_src()) {
    pos_src_ = new ::msgpacket::POS_T(*from.pos_src_);
  } else {
    pos_src_ = nullptr;
  }
  if (from._internal_has_pos_dst()) {
    pos_dst_ = new ::msgpacket::POS_T(*from.pos_dst_);
  } else {
    pos_dst_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_PATH_SEARCH)
}

inline void MSG_PATH_SEARCH::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_src_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_dst_) -
    reinterpret_cast<char*>(&pos_src_)) + sizeof(pos_dst_));
}

MSG_PATH_SEARCH::~MSG_PATH_SEARCH() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_PATH_SEARCH)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_PATH_SEARCH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pos_src_;
  if (this != internal_default_instance()) delete pos_dst_;
}

void MSG_PATH_SEARCH::ArenaDtor(void* object) {
  MSG_PATH_SEARCH* _this = reinterpret_cast< MSG_PATH_SEARCH* >(object);
  (void)_this;
}
void MSG_PATH_SEARCH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_PATH_SEARCH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_PATH_SEARCH::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_PATH_SEARCH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pos_src_ != nullptr) {
    delete pos_src_;
  }
  pos_src_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pos_dst_ != nullptr) {
    delete pos_dst_;
  }
  pos_dst_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_PATH_SEARCH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msgpacket.POS_T pos_src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_src(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.POS_T pos_dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_dst(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_PATH_SEARCH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_PATH_SEARCH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msgpacket.POS_T pos_src = 1;
  if (this->_internal_has_pos_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos_src(this), target, stream);
  }

  // .msgpacket.POS_T pos_dst = 2;
  if (this->_internal_has_pos_dst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos_dst(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_PATH_SEARCH)
  return target;
}

size_t MSG_PATH_SEARCH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_PATH_SEARCH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.POS_T pos_src = 1;
  if (this->_internal_has_pos_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_src_);
  }

  // .msgpacket.POS_T pos_dst = 2;
  if (this->_internal_has_pos_dst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_dst_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_PATH_SEARCH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_PATH_SEARCH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_PATH_SEARCH::GetClassData() const { return &_class_data_; }

void MSG_PATH_SEARCH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_PATH_SEARCH *>(to)->MergeFrom(
      static_cast<const MSG_PATH_SEARCH &>(from));
}


void MSG_PATH_SEARCH::MergeFrom(const MSG_PATH_SEARCH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_PATH_SEARCH)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_src()) {
    _internal_mutable_pos_src()->::msgpacket::POS_T::MergeFrom(from._internal_pos_src());
  }
  if (from._internal_has_pos_dst()) {
    _internal_mutable_pos_dst()->::msgpacket::POS_T::MergeFrom(from._internal_pos_dst());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_PATH_SEARCH::CopyFrom(const MSG_PATH_SEARCH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_PATH_SEARCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PATH_SEARCH::IsInitialized() const {
  return true;
}

void MSG_PATH_SEARCH::InternalSwap(MSG_PATH_SEARCH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_PATH_SEARCH, pos_dst_)
      + sizeof(MSG_PATH_SEARCH::pos_dst_)
      - PROTOBUF_FIELD_OFFSET(MSG_PATH_SEARCH, pos_src_)>(
          reinterpret_cast<char*>(&pos_src_),
          reinterpret_cast<char*>(&other->pos_src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PATH_SEARCH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[21]);
}

// ===================================================================

class MSG_PATH_SEARCH_RES::_Internal {
 public:
  static const ::msgpacket::POS_T& pos_src(const MSG_PATH_SEARCH_RES* msg);
  static const ::msgpacket::POS_T& pos_dst(const MSG_PATH_SEARCH_RES* msg);
};

const ::msgpacket::POS_T&
MSG_PATH_SEARCH_RES::_Internal::pos_src(const MSG_PATH_SEARCH_RES* msg) {
  return *msg->pos_src_;
}
const ::msgpacket::POS_T&
MSG_PATH_SEARCH_RES::_Internal::pos_dst(const MSG_PATH_SEARCH_RES* msg) {
  return *msg->pos_dst_;
}
MSG_PATH_SEARCH_RES::MSG_PATH_SEARCH_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  path_pos_(arena),
  path_key_pos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_PATH_SEARCH_RES)
}
MSG_PATH_SEARCH_RES::MSG_PATH_SEARCH_RES(const MSG_PATH_SEARCH_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_pos_(from.path_pos_),
      path_key_pos_(from.path_key_pos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_src()) {
    pos_src_ = new ::msgpacket::POS_T(*from.pos_src_);
  } else {
    pos_src_ = nullptr;
  }
  if (from._internal_has_pos_dst()) {
    pos_dst_ = new ::msgpacket::POS_T(*from.pos_dst_);
  } else {
    pos_dst_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_PATH_SEARCH_RES)
}

inline void MSG_PATH_SEARCH_RES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_src_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_dst_) -
    reinterpret_cast<char*>(&pos_src_)) + sizeof(pos_dst_));
}

MSG_PATH_SEARCH_RES::~MSG_PATH_SEARCH_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_PATH_SEARCH_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_PATH_SEARCH_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pos_src_;
  if (this != internal_default_instance()) delete pos_dst_;
}

void MSG_PATH_SEARCH_RES::ArenaDtor(void* object) {
  MSG_PATH_SEARCH_RES* _this = reinterpret_cast< MSG_PATH_SEARCH_RES* >(object);
  (void)_this;
}
void MSG_PATH_SEARCH_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_PATH_SEARCH_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_PATH_SEARCH_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_PATH_SEARCH_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_pos_.Clear();
  path_key_pos_.Clear();
  if (GetArenaForAllocation() == nullptr && pos_src_ != nullptr) {
    delete pos_src_;
  }
  pos_src_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pos_dst_ != nullptr) {
    delete pos_dst_;
  }
  pos_dst_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_PATH_SEARCH_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msgpacket.POS_T pos_src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_src(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.POS_T pos_dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_dst(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msgpacket.POS_T path_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msgpacket.POS_T path_key_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_key_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_PATH_SEARCH_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_PATH_SEARCH_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msgpacket.POS_T pos_src = 1;
  if (this->_internal_has_pos_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos_src(this), target, stream);
  }

  // .msgpacket.POS_T pos_dst = 2;
  if (this->_internal_has_pos_dst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos_dst(this), target, stream);
  }

  // repeated .msgpacket.POS_T path_pos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_pos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_path_pos(i), target, stream);
  }

  // repeated .msgpacket.POS_T path_key_pos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_key_pos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_path_key_pos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_PATH_SEARCH_RES)
  return target;
}

size_t MSG_PATH_SEARCH_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_PATH_SEARCH_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msgpacket.POS_T path_pos = 3;
  total_size += 1UL * this->_internal_path_pos_size();
  for (const auto& msg : this->path_pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msgpacket.POS_T path_key_pos = 4;
  total_size += 1UL * this->_internal_path_key_pos_size();
  for (const auto& msg : this->path_key_pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .msgpacket.POS_T pos_src = 1;
  if (this->_internal_has_pos_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_src_);
  }

  // .msgpacket.POS_T pos_dst = 2;
  if (this->_internal_has_pos_dst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_dst_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_PATH_SEARCH_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_PATH_SEARCH_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_PATH_SEARCH_RES::GetClassData() const { return &_class_data_; }

void MSG_PATH_SEARCH_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_PATH_SEARCH_RES *>(to)->MergeFrom(
      static_cast<const MSG_PATH_SEARCH_RES &>(from));
}


void MSG_PATH_SEARCH_RES::MergeFrom(const MSG_PATH_SEARCH_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_PATH_SEARCH_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  path_pos_.MergeFrom(from.path_pos_);
  path_key_pos_.MergeFrom(from.path_key_pos_);
  if (from._internal_has_pos_src()) {
    _internal_mutable_pos_src()->::msgpacket::POS_T::MergeFrom(from._internal_pos_src());
  }
  if (from._internal_has_pos_dst()) {
    _internal_mutable_pos_dst()->::msgpacket::POS_T::MergeFrom(from._internal_pos_dst());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_PATH_SEARCH_RES::CopyFrom(const MSG_PATH_SEARCH_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_PATH_SEARCH_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_PATH_SEARCH_RES::IsInitialized() const {
  return true;
}

void MSG_PATH_SEARCH_RES::InternalSwap(MSG_PATH_SEARCH_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  path_pos_.InternalSwap(&other->path_pos_);
  path_key_pos_.InternalSwap(&other->path_key_pos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_PATH_SEARCH_RES, pos_dst_)
      + sizeof(MSG_PATH_SEARCH_RES::pos_dst_)
      - PROTOBUF_FIELD_OFFSET(MSG_PATH_SEARCH_RES, pos_src_)>(
          reinterpret_cast<char*>(&pos_src_),
          reinterpret_cast<char*>(&other->pos_src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_PATH_SEARCH_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[22]);
}

// ===================================================================

class MSG_NAV_SEARCH::_Internal {
 public:
  static const ::msgpacket::PROTO_VEC_3F& pos_src(const MSG_NAV_SEARCH* msg);
  static const ::msgpacket::PROTO_VEC_3F& pos_dst(const MSG_NAV_SEARCH* msg);
};

const ::msgpacket::PROTO_VEC_3F&
MSG_NAV_SEARCH::_Internal::pos_src(const MSG_NAV_SEARCH* msg) {
  return *msg->pos_src_;
}
const ::msgpacket::PROTO_VEC_3F&
MSG_NAV_SEARCH::_Internal::pos_dst(const MSG_NAV_SEARCH* msg) {
  return *msg->pos_dst_;
}
MSG_NAV_SEARCH::MSG_NAV_SEARCH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_NAV_SEARCH)
}
MSG_NAV_SEARCH::MSG_NAV_SEARCH(const MSG_NAV_SEARCH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_src()) {
    pos_src_ = new ::msgpacket::PROTO_VEC_3F(*from.pos_src_);
  } else {
    pos_src_ = nullptr;
  }
  if (from._internal_has_pos_dst()) {
    pos_dst_ = new ::msgpacket::PROTO_VEC_3F(*from.pos_dst_);
  } else {
    pos_dst_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_NAV_SEARCH)
}

inline void MSG_NAV_SEARCH::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_src_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_dst_) -
    reinterpret_cast<char*>(&pos_src_)) + sizeof(pos_dst_));
}

MSG_NAV_SEARCH::~MSG_NAV_SEARCH() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_NAV_SEARCH)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_NAV_SEARCH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pos_src_;
  if (this != internal_default_instance()) delete pos_dst_;
}

void MSG_NAV_SEARCH::ArenaDtor(void* object) {
  MSG_NAV_SEARCH* _this = reinterpret_cast< MSG_NAV_SEARCH* >(object);
  (void)_this;
}
void MSG_NAV_SEARCH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_NAV_SEARCH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_NAV_SEARCH::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_NAV_SEARCH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pos_src_ != nullptr) {
    delete pos_src_;
  }
  pos_src_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pos_dst_ != nullptr) {
    delete pos_dst_;
  }
  pos_dst_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_NAV_SEARCH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msgpacket.PROTO_VEC_3F pos_src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_src(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PROTO_VEC_3F pos_dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_dst(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_NAV_SEARCH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_NAV_SEARCH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msgpacket.PROTO_VEC_3F pos_src = 1;
  if (this->_internal_has_pos_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos_src(this), target, stream);
  }

  // .msgpacket.PROTO_VEC_3F pos_dst = 2;
  if (this->_internal_has_pos_dst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos_dst(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_NAV_SEARCH)
  return target;
}

size_t MSG_NAV_SEARCH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_NAV_SEARCH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.PROTO_VEC_3F pos_src = 1;
  if (this->_internal_has_pos_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_src_);
  }

  // .msgpacket.PROTO_VEC_3F pos_dst = 2;
  if (this->_internal_has_pos_dst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_dst_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_NAV_SEARCH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_NAV_SEARCH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_NAV_SEARCH::GetClassData() const { return &_class_data_; }

void MSG_NAV_SEARCH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_NAV_SEARCH *>(to)->MergeFrom(
      static_cast<const MSG_NAV_SEARCH &>(from));
}


void MSG_NAV_SEARCH::MergeFrom(const MSG_NAV_SEARCH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_NAV_SEARCH)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_src()) {
    _internal_mutable_pos_src()->::msgpacket::PROTO_VEC_3F::MergeFrom(from._internal_pos_src());
  }
  if (from._internal_has_pos_dst()) {
    _internal_mutable_pos_dst()->::msgpacket::PROTO_VEC_3F::MergeFrom(from._internal_pos_dst());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_NAV_SEARCH::CopyFrom(const MSG_NAV_SEARCH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_NAV_SEARCH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NAV_SEARCH::IsInitialized() const {
  return true;
}

void MSG_NAV_SEARCH::InternalSwap(MSG_NAV_SEARCH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_NAV_SEARCH, pos_dst_)
      + sizeof(MSG_NAV_SEARCH::pos_dst_)
      - PROTOBUF_FIELD_OFFSET(MSG_NAV_SEARCH, pos_src_)>(
          reinterpret_cast<char*>(&pos_src_),
          reinterpret_cast<char*>(&other->pos_src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NAV_SEARCH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[23]);
}

// ===================================================================

class MSG_NAV_SEARCH_RES::_Internal {
 public:
};

MSG_NAV_SEARCH_RES::MSG_NAV_SEARCH_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  path_pos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_NAV_SEARCH_RES)
}
MSG_NAV_SEARCH_RES::MSG_NAV_SEARCH_RES(const MSG_NAV_SEARCH_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_pos_(from.path_pos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_NAV_SEARCH_RES)
}

inline void MSG_NAV_SEARCH_RES::SharedCtor() {
}

MSG_NAV_SEARCH_RES::~MSG_NAV_SEARCH_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_NAV_SEARCH_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_NAV_SEARCH_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_NAV_SEARCH_RES::ArenaDtor(void* object) {
  MSG_NAV_SEARCH_RES* _this = reinterpret_cast< MSG_NAV_SEARCH_RES* >(object);
  (void)_this;
}
void MSG_NAV_SEARCH_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_NAV_SEARCH_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_NAV_SEARCH_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_NAV_SEARCH_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_pos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_NAV_SEARCH_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msgpacket.PROTO_VEC_3F path_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_NAV_SEARCH_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_NAV_SEARCH_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msgpacket.PROTO_VEC_3F path_pos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_pos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_path_pos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_NAV_SEARCH_RES)
  return target;
}

size_t MSG_NAV_SEARCH_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_NAV_SEARCH_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msgpacket.PROTO_VEC_3F path_pos = 1;
  total_size += 1UL * this->_internal_path_pos_size();
  for (const auto& msg : this->path_pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_NAV_SEARCH_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_NAV_SEARCH_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_NAV_SEARCH_RES::GetClassData() const { return &_class_data_; }

void MSG_NAV_SEARCH_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_NAV_SEARCH_RES *>(to)->MergeFrom(
      static_cast<const MSG_NAV_SEARCH_RES &>(from));
}


void MSG_NAV_SEARCH_RES::MergeFrom(const MSG_NAV_SEARCH_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_NAV_SEARCH_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  path_pos_.MergeFrom(from.path_pos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_NAV_SEARCH_RES::CopyFrom(const MSG_NAV_SEARCH_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_NAV_SEARCH_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NAV_SEARCH_RES::IsInitialized() const {
  return true;
}

void MSG_NAV_SEARCH_RES::InternalSwap(MSG_NAV_SEARCH_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  path_pos_.InternalSwap(&other->path_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NAV_SEARCH_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[24]);
}

// ===================================================================

class NAV_OBSTACLE::_Internal {
 public:
  static const ::msgpacket::PROTO_VEC_3F& center(const NAV_OBSTACLE* msg);
  static const ::msgpacket::PROTO_VEC_3F& half_ext(const NAV_OBSTACLE* msg);
};

const ::msgpacket::PROTO_VEC_3F&
NAV_OBSTACLE::_Internal::center(const NAV_OBSTACLE* msg) {
  return *msg->center_;
}
const ::msgpacket::PROTO_VEC_3F&
NAV_OBSTACLE::_Internal::half_ext(const NAV_OBSTACLE* msg) {
  return *msg->half_ext_;
}
NAV_OBSTACLE::NAV_OBSTACLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.NAV_OBSTACLE)
}
NAV_OBSTACLE::NAV_OBSTACLE(const NAV_OBSTACLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::msgpacket::PROTO_VEC_3F(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_half_ext()) {
    half_ext_ = new ::msgpacket::PROTO_VEC_3F(*from.half_ext_);
  } else {
    half_ext_ = nullptr;
  }
  ::memcpy(&obstacle_id_, &from.obstacle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_radian_) -
    reinterpret_cast<char*>(&obstacle_id_)) + sizeof(y_radian_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.NAV_OBSTACLE)
}

inline void NAV_OBSTACLE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_radian_) -
    reinterpret_cast<char*>(&center_)) + sizeof(y_radian_));
}

NAV_OBSTACLE::~NAV_OBSTACLE() {
  // @@protoc_insertion_point(destructor:msgpacket.NAV_OBSTACLE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NAV_OBSTACLE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete half_ext_;
}

void NAV_OBSTACLE::ArenaDtor(void* object) {
  NAV_OBSTACLE* _this = reinterpret_cast< NAV_OBSTACLE* >(object);
  (void)_this;
}
void NAV_OBSTACLE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NAV_OBSTACLE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NAV_OBSTACLE::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.NAV_OBSTACLE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArenaForAllocation() == nullptr && half_ext_ != nullptr) {
    delete half_ext_;
  }
  half_ext_ = nullptr;
  ::memset(&obstacle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_radian_) -
      reinterpret_cast<char*>(&obstacle_id_)) + sizeof(y_radian_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NAV_OBSTACLE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 obstacle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          obstacle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PROTO_VEC_3F center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.PROTO_VEC_3F half_ext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_half_ext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float y_radian = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          y_radian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NAV_OBSTACLE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.NAV_OBSTACLE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obstacle_id = 1;
  if (this->_internal_obstacle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_obstacle_id(), target);
  }

  // .msgpacket.PROTO_VEC_3F center = 2;
  if (this->_internal_has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::center(this), target, stream);
  }

  // .msgpacket.PROTO_VEC_3F half_ext = 3;
  if (this->_internal_has_half_ext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::half_ext(this), target, stream);
  }

  // float y_radian = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_radian = this->_internal_y_radian();
  uint32_t raw_y_radian;
  memcpy(&raw_y_radian, &tmp_y_radian, sizeof(tmp_y_radian));
  if (raw_y_radian != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y_radian(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.NAV_OBSTACLE)
  return target;
}

size_t NAV_OBSTACLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.NAV_OBSTACLE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.PROTO_VEC_3F center = 2;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .msgpacket.PROTO_VEC_3F half_ext = 3;
  if (this->_internal_has_half_ext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *half_ext_);
  }

  // uint32 obstacle_id = 1;
  if (this->_internal_obstacle_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_obstacle_id());
  }

  // float y_radian = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_radian = this->_internal_y_radian();
  uint32_t raw_y_radian;
  memcpy(&raw_y_radian, &tmp_y_radian, sizeof(tmp_y_radian));
  if (raw_y_radian != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NAV_OBSTACLE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NAV_OBSTACLE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NAV_OBSTACLE::GetClassData() const { return &_class_data_; }

void NAV_OBSTACLE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NAV_OBSTACLE *>(to)->MergeFrom(
      static_cast<const NAV_OBSTACLE &>(from));
}


void NAV_OBSTACLE::MergeFrom(const NAV_OBSTACLE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.NAV_OBSTACLE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_center()) {
    _internal_mutable_center()->::msgpacket::PROTO_VEC_3F::MergeFrom(from._internal_center());
  }
  if (from._internal_has_half_ext()) {
    _internal_mutable_half_ext()->::msgpacket::PROTO_VEC_3F::MergeFrom(from._internal_half_ext());
  }
  if (from._internal_obstacle_id() != 0) {
    _internal_set_obstacle_id(from._internal_obstacle_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_radian = from._internal_y_radian();
  uint32_t raw_y_radian;
  memcpy(&raw_y_radian, &tmp_y_radian, sizeof(tmp_y_radian));
  if (raw_y_radian != 0) {
    _internal_set_y_radian(from._internal_y_radian());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NAV_OBSTACLE::CopyFrom(const NAV_OBSTACLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.NAV_OBSTACLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NAV_OBSTACLE::IsInitialized() const {
  return true;
}

void NAV_OBSTACLE::InternalSwap(NAV_OBSTACLE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NAV_OBSTACLE, y_radian_)
      + sizeof(NAV_OBSTACLE::y_radian_)
      - PROTOBUF_FIELD_OFFSET(NAV_OBSTACLE, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NAV_OBSTACLE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[25]);
}

// ===================================================================

class MSG_NAV_ADD_OBSTACLE::_Internal {
 public:
  static const ::msgpacket::NAV_OBSTACLE& obstacle(const MSG_NAV_ADD_OBSTACLE* msg);
};

const ::msgpacket::NAV_OBSTACLE&
MSG_NAV_ADD_OBSTACLE::_Internal::obstacle(const MSG_NAV_ADD_OBSTACLE* msg) {
  return *msg->obstacle_;
}
MSG_NAV_ADD_OBSTACLE::MSG_NAV_ADD_OBSTACLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_NAV_ADD_OBSTACLE)
}
MSG_NAV_ADD_OBSTACLE::MSG_NAV_ADD_OBSTACLE(const MSG_NAV_ADD_OBSTACLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obstacle()) {
    obstacle_ = new ::msgpacket::NAV_OBSTACLE(*from.obstacle_);
  } else {
    obstacle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_NAV_ADD_OBSTACLE)
}

inline void MSG_NAV_ADD_OBSTACLE::SharedCtor() {
obstacle_ = nullptr;
}

MSG_NAV_ADD_OBSTACLE::~MSG_NAV_ADD_OBSTACLE() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_NAV_ADD_OBSTACLE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_NAV_ADD_OBSTACLE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete obstacle_;
}

void MSG_NAV_ADD_OBSTACLE::ArenaDtor(void* object) {
  MSG_NAV_ADD_OBSTACLE* _this = reinterpret_cast< MSG_NAV_ADD_OBSTACLE* >(object);
  (void)_this;
}
void MSG_NAV_ADD_OBSTACLE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_NAV_ADD_OBSTACLE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_NAV_ADD_OBSTACLE::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_NAV_ADD_OBSTACLE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && obstacle_ != nullptr) {
    delete obstacle_;
  }
  obstacle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_NAV_ADD_OBSTACLE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msgpacket.NAV_OBSTACLE obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_NAV_ADD_OBSTACLE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_NAV_ADD_OBSTACLE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msgpacket.NAV_OBSTACLE obstacle = 1;
  if (this->_internal_has_obstacle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::obstacle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_NAV_ADD_OBSTACLE)
  return target;
}

size_t MSG_NAV_ADD_OBSTACLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_NAV_ADD_OBSTACLE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.NAV_OBSTACLE obstacle = 1;
  if (this->_internal_has_obstacle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obstacle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_NAV_ADD_OBSTACLE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_NAV_ADD_OBSTACLE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_NAV_ADD_OBSTACLE::GetClassData() const { return &_class_data_; }

void MSG_NAV_ADD_OBSTACLE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_NAV_ADD_OBSTACLE *>(to)->MergeFrom(
      static_cast<const MSG_NAV_ADD_OBSTACLE &>(from));
}


void MSG_NAV_ADD_OBSTACLE::MergeFrom(const MSG_NAV_ADD_OBSTACLE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_NAV_ADD_OBSTACLE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_obstacle()) {
    _internal_mutable_obstacle()->::msgpacket::NAV_OBSTACLE::MergeFrom(from._internal_obstacle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_NAV_ADD_OBSTACLE::CopyFrom(const MSG_NAV_ADD_OBSTACLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_NAV_ADD_OBSTACLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NAV_ADD_OBSTACLE::IsInitialized() const {
  return true;
}

void MSG_NAV_ADD_OBSTACLE::InternalSwap(MSG_NAV_ADD_OBSTACLE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(obstacle_, other->obstacle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NAV_ADD_OBSTACLE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[26]);
}

// ===================================================================

class MSG_NAV_ADD_OBSTACLE_RES::_Internal {
 public:
  static const ::msgpacket::NAV_OBSTACLE& obstacle(const MSG_NAV_ADD_OBSTACLE_RES* msg);
};

const ::msgpacket::NAV_OBSTACLE&
MSG_NAV_ADD_OBSTACLE_RES::_Internal::obstacle(const MSG_NAV_ADD_OBSTACLE_RES* msg) {
  return *msg->obstacle_;
}
MSG_NAV_ADD_OBSTACLE_RES::MSG_NAV_ADD_OBSTACLE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_NAV_ADD_OBSTACLE_RES)
}
MSG_NAV_ADD_OBSTACLE_RES::MSG_NAV_ADD_OBSTACLE_RES(const MSG_NAV_ADD_OBSTACLE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obstacle()) {
    obstacle_ = new ::msgpacket::NAV_OBSTACLE(*from.obstacle_);
  } else {
    obstacle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_NAV_ADD_OBSTACLE_RES)
}

inline void MSG_NAV_ADD_OBSTACLE_RES::SharedCtor() {
obstacle_ = nullptr;
}

MSG_NAV_ADD_OBSTACLE_RES::~MSG_NAV_ADD_OBSTACLE_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_NAV_ADD_OBSTACLE_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_NAV_ADD_OBSTACLE_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete obstacle_;
}

void MSG_NAV_ADD_OBSTACLE_RES::ArenaDtor(void* object) {
  MSG_NAV_ADD_OBSTACLE_RES* _this = reinterpret_cast< MSG_NAV_ADD_OBSTACLE_RES* >(object);
  (void)_this;
}
void MSG_NAV_ADD_OBSTACLE_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_NAV_ADD_OBSTACLE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_NAV_ADD_OBSTACLE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_NAV_ADD_OBSTACLE_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && obstacle_ != nullptr) {
    delete obstacle_;
  }
  obstacle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_NAV_ADD_OBSTACLE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msgpacket.NAV_OBSTACLE obstacle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_NAV_ADD_OBSTACLE_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_NAV_ADD_OBSTACLE_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msgpacket.NAV_OBSTACLE obstacle = 2;
  if (this->_internal_has_obstacle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::obstacle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_NAV_ADD_OBSTACLE_RES)
  return target;
}

size_t MSG_NAV_ADD_OBSTACLE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_NAV_ADD_OBSTACLE_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.NAV_OBSTACLE obstacle = 2;
  if (this->_internal_has_obstacle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obstacle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_NAV_ADD_OBSTACLE_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_NAV_ADD_OBSTACLE_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_NAV_ADD_OBSTACLE_RES::GetClassData() const { return &_class_data_; }

void MSG_NAV_ADD_OBSTACLE_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_NAV_ADD_OBSTACLE_RES *>(to)->MergeFrom(
      static_cast<const MSG_NAV_ADD_OBSTACLE_RES &>(from));
}


void MSG_NAV_ADD_OBSTACLE_RES::MergeFrom(const MSG_NAV_ADD_OBSTACLE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_NAV_ADD_OBSTACLE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_obstacle()) {
    _internal_mutable_obstacle()->::msgpacket::NAV_OBSTACLE::MergeFrom(from._internal_obstacle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_NAV_ADD_OBSTACLE_RES::CopyFrom(const MSG_NAV_ADD_OBSTACLE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_NAV_ADD_OBSTACLE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NAV_ADD_OBSTACLE_RES::IsInitialized() const {
  return true;
}

void MSG_NAV_ADD_OBSTACLE_RES::InternalSwap(MSG_NAV_ADD_OBSTACLE_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(obstacle_, other->obstacle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NAV_ADD_OBSTACLE_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[27]);
}

// ===================================================================

class MSG_NAV_DEL_OBSTACLE::_Internal {
 public:
};

MSG_NAV_DEL_OBSTACLE::MSG_NAV_DEL_OBSTACLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_NAV_DEL_OBSTACLE)
}
MSG_NAV_DEL_OBSTACLE::MSG_NAV_DEL_OBSTACLE(const MSG_NAV_DEL_OBSTACLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obstacle_id_ = from.obstacle_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_NAV_DEL_OBSTACLE)
}

inline void MSG_NAV_DEL_OBSTACLE::SharedCtor() {
obstacle_id_ = 0u;
}

MSG_NAV_DEL_OBSTACLE::~MSG_NAV_DEL_OBSTACLE() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_NAV_DEL_OBSTACLE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_NAV_DEL_OBSTACLE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_NAV_DEL_OBSTACLE::ArenaDtor(void* object) {
  MSG_NAV_DEL_OBSTACLE* _this = reinterpret_cast< MSG_NAV_DEL_OBSTACLE* >(object);
  (void)_this;
}
void MSG_NAV_DEL_OBSTACLE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_NAV_DEL_OBSTACLE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_NAV_DEL_OBSTACLE::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_NAV_DEL_OBSTACLE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_NAV_DEL_OBSTACLE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 obstacle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          obstacle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_NAV_DEL_OBSTACLE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_NAV_DEL_OBSTACLE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obstacle_id = 1;
  if (this->_internal_obstacle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_obstacle_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_NAV_DEL_OBSTACLE)
  return target;
}

size_t MSG_NAV_DEL_OBSTACLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_NAV_DEL_OBSTACLE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 obstacle_id = 1;
  if (this->_internal_obstacle_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_obstacle_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_NAV_DEL_OBSTACLE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_NAV_DEL_OBSTACLE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_NAV_DEL_OBSTACLE::GetClassData() const { return &_class_data_; }

void MSG_NAV_DEL_OBSTACLE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_NAV_DEL_OBSTACLE *>(to)->MergeFrom(
      static_cast<const MSG_NAV_DEL_OBSTACLE &>(from));
}


void MSG_NAV_DEL_OBSTACLE::MergeFrom(const MSG_NAV_DEL_OBSTACLE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_NAV_DEL_OBSTACLE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_obstacle_id() != 0) {
    _internal_set_obstacle_id(from._internal_obstacle_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_NAV_DEL_OBSTACLE::CopyFrom(const MSG_NAV_DEL_OBSTACLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_NAV_DEL_OBSTACLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NAV_DEL_OBSTACLE::IsInitialized() const {
  return true;
}

void MSG_NAV_DEL_OBSTACLE::InternalSwap(MSG_NAV_DEL_OBSTACLE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(obstacle_id_, other->obstacle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NAV_DEL_OBSTACLE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[28]);
}

// ===================================================================

class MSG_NAV_DEL_OBSTACLE_RES::_Internal {
 public:
};

MSG_NAV_DEL_OBSTACLE_RES::MSG_NAV_DEL_OBSTACLE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_NAV_DEL_OBSTACLE_RES)
}
MSG_NAV_DEL_OBSTACLE_RES::MSG_NAV_DEL_OBSTACLE_RES(const MSG_NAV_DEL_OBSTACLE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obstacle_id_ = from.obstacle_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_NAV_DEL_OBSTACLE_RES)
}

inline void MSG_NAV_DEL_OBSTACLE_RES::SharedCtor() {
obstacle_id_ = 0u;
}

MSG_NAV_DEL_OBSTACLE_RES::~MSG_NAV_DEL_OBSTACLE_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_NAV_DEL_OBSTACLE_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_NAV_DEL_OBSTACLE_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_NAV_DEL_OBSTACLE_RES::ArenaDtor(void* object) {
  MSG_NAV_DEL_OBSTACLE_RES* _this = reinterpret_cast< MSG_NAV_DEL_OBSTACLE_RES* >(object);
  (void)_this;
}
void MSG_NAV_DEL_OBSTACLE_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_NAV_DEL_OBSTACLE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_NAV_DEL_OBSTACLE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_NAV_DEL_OBSTACLE_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_NAV_DEL_OBSTACLE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 obstacle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          obstacle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_NAV_DEL_OBSTACLE_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_NAV_DEL_OBSTACLE_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obstacle_id = 1;
  if (this->_internal_obstacle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_obstacle_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_NAV_DEL_OBSTACLE_RES)
  return target;
}

size_t MSG_NAV_DEL_OBSTACLE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_NAV_DEL_OBSTACLE_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 obstacle_id = 1;
  if (this->_internal_obstacle_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_obstacle_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_NAV_DEL_OBSTACLE_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_NAV_DEL_OBSTACLE_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_NAV_DEL_OBSTACLE_RES::GetClassData() const { return &_class_data_; }

void MSG_NAV_DEL_OBSTACLE_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_NAV_DEL_OBSTACLE_RES *>(to)->MergeFrom(
      static_cast<const MSG_NAV_DEL_OBSTACLE_RES &>(from));
}


void MSG_NAV_DEL_OBSTACLE_RES::MergeFrom(const MSG_NAV_DEL_OBSTACLE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_NAV_DEL_OBSTACLE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_obstacle_id() != 0) {
    _internal_set_obstacle_id(from._internal_obstacle_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_NAV_DEL_OBSTACLE_RES::CopyFrom(const MSG_NAV_DEL_OBSTACLE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_NAV_DEL_OBSTACLE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NAV_DEL_OBSTACLE_RES::IsInitialized() const {
  return true;
}

void MSG_NAV_DEL_OBSTACLE_RES::InternalSwap(MSG_NAV_DEL_OBSTACLE_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(obstacle_id_, other->obstacle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NAV_DEL_OBSTACLE_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[29]);
}

// ===================================================================

class MSG_NAV_GET_ALL_OBSTACLE::_Internal {
 public:
};

MSG_NAV_GET_ALL_OBSTACLE::MSG_NAV_GET_ALL_OBSTACLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_NAV_GET_ALL_OBSTACLE)
}
MSG_NAV_GET_ALL_OBSTACLE::MSG_NAV_GET_ALL_OBSTACLE(const MSG_NAV_GET_ALL_OBSTACLE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_NAV_GET_ALL_OBSTACLE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_NAV_GET_ALL_OBSTACLE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_NAV_GET_ALL_OBSTACLE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MSG_NAV_GET_ALL_OBSTACLE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[30]);
}

// ===================================================================

class MSG_NAV_GET_ALL_OBSTACLE_RES::_Internal {
 public:
};

MSG_NAV_GET_ALL_OBSTACLE_RES::MSG_NAV_GET_ALL_OBSTACLE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  obstacle_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES)
}
MSG_NAV_GET_ALL_OBSTACLE_RES::MSG_NAV_GET_ALL_OBSTACLE_RES(const MSG_NAV_GET_ALL_OBSTACLE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      obstacle_(from.obstacle_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES)
}

inline void MSG_NAV_GET_ALL_OBSTACLE_RES::SharedCtor() {
}

MSG_NAV_GET_ALL_OBSTACLE_RES::~MSG_NAV_GET_ALL_OBSTACLE_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_NAV_GET_ALL_OBSTACLE_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_NAV_GET_ALL_OBSTACLE_RES::ArenaDtor(void* object) {
  MSG_NAV_GET_ALL_OBSTACLE_RES* _this = reinterpret_cast< MSG_NAV_GET_ALL_OBSTACLE_RES* >(object);
  (void)_this;
}
void MSG_NAV_GET_ALL_OBSTACLE_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_NAV_GET_ALL_OBSTACLE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_NAV_GET_ALL_OBSTACLE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_NAV_GET_ALL_OBSTACLE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msgpacket.NAV_OBSTACLE obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_NAV_GET_ALL_OBSTACLE_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msgpacket.NAV_OBSTACLE obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_obstacle(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES)
  return target;
}

size_t MSG_NAV_GET_ALL_OBSTACLE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msgpacket.NAV_OBSTACLE obstacle = 1;
  total_size += 1UL * this->_internal_obstacle_size();
  for (const auto& msg : this->obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_NAV_GET_ALL_OBSTACLE_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_NAV_GET_ALL_OBSTACLE_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_NAV_GET_ALL_OBSTACLE_RES::GetClassData() const { return &_class_data_; }

void MSG_NAV_GET_ALL_OBSTACLE_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_NAV_GET_ALL_OBSTACLE_RES *>(to)->MergeFrom(
      static_cast<const MSG_NAV_GET_ALL_OBSTACLE_RES &>(from));
}


void MSG_NAV_GET_ALL_OBSTACLE_RES::MergeFrom(const MSG_NAV_GET_ALL_OBSTACLE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_.MergeFrom(from.obstacle_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_NAV_GET_ALL_OBSTACLE_RES::CopyFrom(const MSG_NAV_GET_ALL_OBSTACLE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NAV_GET_ALL_OBSTACLE_RES::IsInitialized() const {
  return true;
}

void MSG_NAV_GET_ALL_OBSTACLE_RES::InternalSwap(MSG_NAV_GET_ALL_OBSTACLE_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  obstacle_.InternalSwap(&other->obstacle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NAV_GET_ALL_OBSTACLE_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[31]);
}

// ===================================================================

class MSG_UPDATE_POS::_Internal {
 public:
  static const ::msgpacket::PROTO_VEC_3F& new_pos(const MSG_UPDATE_POS* msg);
};

const ::msgpacket::PROTO_VEC_3F&
MSG_UPDATE_POS::_Internal::new_pos(const MSG_UPDATE_POS* msg) {
  return *msg->new_pos_;
}
MSG_UPDATE_POS::MSG_UPDATE_POS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_UPDATE_POS)
}
MSG_UPDATE_POS::MSG_UPDATE_POS(const MSG_UPDATE_POS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_new_pos()) {
    new_pos_ = new ::msgpacket::PROTO_VEC_3F(*from.new_pos_);
  } else {
    new_pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_UPDATE_POS)
}

inline void MSG_UPDATE_POS::SharedCtor() {
new_pos_ = nullptr;
}

MSG_UPDATE_POS::~MSG_UPDATE_POS() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_UPDATE_POS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_UPDATE_POS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete new_pos_;
}

void MSG_UPDATE_POS::ArenaDtor(void* object) {
  MSG_UPDATE_POS* _this = reinterpret_cast< MSG_UPDATE_POS* >(object);
  (void)_this;
}
void MSG_UPDATE_POS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_UPDATE_POS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_UPDATE_POS::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_UPDATE_POS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && new_pos_ != nullptr) {
    delete new_pos_;
  }
  new_pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_UPDATE_POS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msgpacket.PROTO_VEC_3F new_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_UPDATE_POS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_UPDATE_POS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msgpacket.PROTO_VEC_3F new_pos = 1;
  if (this->_internal_has_new_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::new_pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_UPDATE_POS)
  return target;
}

size_t MSG_UPDATE_POS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_UPDATE_POS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.PROTO_VEC_3F new_pos = 1;
  if (this->_internal_has_new_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_UPDATE_POS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_UPDATE_POS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_UPDATE_POS::GetClassData() const { return &_class_data_; }

void MSG_UPDATE_POS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_UPDATE_POS *>(to)->MergeFrom(
      static_cast<const MSG_UPDATE_POS &>(from));
}


void MSG_UPDATE_POS::MergeFrom(const MSG_UPDATE_POS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_UPDATE_POS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_new_pos()) {
    _internal_mutable_new_pos()->::msgpacket::PROTO_VEC_3F::MergeFrom(from._internal_new_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_UPDATE_POS::CopyFrom(const MSG_UPDATE_POS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_UPDATE_POS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UPDATE_POS::IsInitialized() const {
  return true;
}

void MSG_UPDATE_POS::InternalSwap(MSG_UPDATE_POS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(new_pos_, other->new_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UPDATE_POS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[32]);
}

// ===================================================================

class MSG_UPDATE_POS_RES::_Internal {
 public:
  static const ::msgpacket::PROTO_VEC_3F& new_pos(const MSG_UPDATE_POS_RES* msg);
};

const ::msgpacket::PROTO_VEC_3F&
MSG_UPDATE_POS_RES::_Internal::new_pos(const MSG_UPDATE_POS_RES* msg) {
  return *msg->new_pos_;
}
MSG_UPDATE_POS_RES::MSG_UPDATE_POS_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_UPDATE_POS_RES)
}
MSG_UPDATE_POS_RES::MSG_UPDATE_POS_RES(const MSG_UPDATE_POS_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_new_pos()) {
    new_pos_ = new ::msgpacket::PROTO_VEC_3F(*from.new_pos_);
  } else {
    new_pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_UPDATE_POS_RES)
}

inline void MSG_UPDATE_POS_RES::SharedCtor() {
new_pos_ = nullptr;
}

MSG_UPDATE_POS_RES::~MSG_UPDATE_POS_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_UPDATE_POS_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_UPDATE_POS_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete new_pos_;
}

void MSG_UPDATE_POS_RES::ArenaDtor(void* object) {
  MSG_UPDATE_POS_RES* _this = reinterpret_cast< MSG_UPDATE_POS_RES* >(object);
  (void)_this;
}
void MSG_UPDATE_POS_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_UPDATE_POS_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_UPDATE_POS_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_UPDATE_POS_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && new_pos_ != nullptr) {
    delete new_pos_;
  }
  new_pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_UPDATE_POS_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msgpacket.PROTO_VEC_3F new_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_UPDATE_POS_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_UPDATE_POS_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msgpacket.PROTO_VEC_3F new_pos = 1;
  if (this->_internal_has_new_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::new_pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_UPDATE_POS_RES)
  return target;
}

size_t MSG_UPDATE_POS_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_UPDATE_POS_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msgpacket.PROTO_VEC_3F new_pos = 1;
  if (this->_internal_has_new_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_UPDATE_POS_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_UPDATE_POS_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_UPDATE_POS_RES::GetClassData() const { return &_class_data_; }

void MSG_UPDATE_POS_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_UPDATE_POS_RES *>(to)->MergeFrom(
      static_cast<const MSG_UPDATE_POS_RES &>(from));
}


void MSG_UPDATE_POS_RES::MergeFrom(const MSG_UPDATE_POS_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_UPDATE_POS_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_new_pos()) {
    _internal_mutable_new_pos()->::msgpacket::PROTO_VEC_3F::MergeFrom(from._internal_new_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_UPDATE_POS_RES::CopyFrom(const MSG_UPDATE_POS_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_UPDATE_POS_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UPDATE_POS_RES::IsInitialized() const {
  return true;
}

void MSG_UPDATE_POS_RES::InternalSwap(MSG_UPDATE_POS_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(new_pos_, other->new_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UPDATE_POS_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[33]);
}

// ===================================================================

class MSG_NTF_IN_VIEW::_Internal {
 public:
};

MSG_NTF_IN_VIEW::MSG_NTF_IN_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_NTF_IN_VIEW)
}
MSG_NTF_IN_VIEW::MSG_NTF_IN_VIEW(const MSG_NTF_IN_VIEW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obj_id_ = from.obj_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_NTF_IN_VIEW)
}

inline void MSG_NTF_IN_VIEW::SharedCtor() {
obj_id_ = int64_t{0};
}

MSG_NTF_IN_VIEW::~MSG_NTF_IN_VIEW() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_NTF_IN_VIEW)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_NTF_IN_VIEW::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_NTF_IN_VIEW::ArenaDtor(void* object) {
  MSG_NTF_IN_VIEW* _this = reinterpret_cast< MSG_NTF_IN_VIEW* >(object);
  (void)_this;
}
void MSG_NTF_IN_VIEW::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_NTF_IN_VIEW::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_NTF_IN_VIEW::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_NTF_IN_VIEW)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obj_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_NTF_IN_VIEW::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          obj_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_NTF_IN_VIEW::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_NTF_IN_VIEW)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 obj_id = 1;
  if (this->_internal_obj_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_obj_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_NTF_IN_VIEW)
  return target;
}

size_t MSG_NTF_IN_VIEW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_NTF_IN_VIEW)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 obj_id = 1;
  if (this->_internal_obj_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_obj_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_NTF_IN_VIEW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_NTF_IN_VIEW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_NTF_IN_VIEW::GetClassData() const { return &_class_data_; }

void MSG_NTF_IN_VIEW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_NTF_IN_VIEW *>(to)->MergeFrom(
      static_cast<const MSG_NTF_IN_VIEW &>(from));
}


void MSG_NTF_IN_VIEW::MergeFrom(const MSG_NTF_IN_VIEW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_NTF_IN_VIEW)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_obj_id() != 0) {
    _internal_set_obj_id(from._internal_obj_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_NTF_IN_VIEW::CopyFrom(const MSG_NTF_IN_VIEW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_NTF_IN_VIEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NTF_IN_VIEW::IsInitialized() const {
  return true;
}

void MSG_NTF_IN_VIEW::InternalSwap(MSG_NTF_IN_VIEW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(obj_id_, other->obj_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NTF_IN_VIEW::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[34]);
}

// ===================================================================

class MSG_NTF_OUT_VIEW::_Internal {
 public:
};

MSG_NTF_OUT_VIEW::MSG_NTF_OUT_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_NTF_OUT_VIEW)
}
MSG_NTF_OUT_VIEW::MSG_NTF_OUT_VIEW(const MSG_NTF_OUT_VIEW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obj_id_ = from.obj_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_NTF_OUT_VIEW)
}

inline void MSG_NTF_OUT_VIEW::SharedCtor() {
obj_id_ = int64_t{0};
}

MSG_NTF_OUT_VIEW::~MSG_NTF_OUT_VIEW() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_NTF_OUT_VIEW)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_NTF_OUT_VIEW::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_NTF_OUT_VIEW::ArenaDtor(void* object) {
  MSG_NTF_OUT_VIEW* _this = reinterpret_cast< MSG_NTF_OUT_VIEW* >(object);
  (void)_this;
}
void MSG_NTF_OUT_VIEW::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_NTF_OUT_VIEW::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_NTF_OUT_VIEW::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_NTF_OUT_VIEW)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obj_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_NTF_OUT_VIEW::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          obj_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_NTF_OUT_VIEW::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_NTF_OUT_VIEW)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 obj_id = 1;
  if (this->_internal_obj_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_obj_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_NTF_OUT_VIEW)
  return target;
}

size_t MSG_NTF_OUT_VIEW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_NTF_OUT_VIEW)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 obj_id = 1;
  if (this->_internal_obj_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_obj_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_NTF_OUT_VIEW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_NTF_OUT_VIEW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_NTF_OUT_VIEW::GetClassData() const { return &_class_data_; }

void MSG_NTF_OUT_VIEW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_NTF_OUT_VIEW *>(to)->MergeFrom(
      static_cast<const MSG_NTF_OUT_VIEW &>(from));
}


void MSG_NTF_OUT_VIEW::MergeFrom(const MSG_NTF_OUT_VIEW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_NTF_OUT_VIEW)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_obj_id() != 0) {
    _internal_set_obj_id(from._internal_obj_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_NTF_OUT_VIEW::CopyFrom(const MSG_NTF_OUT_VIEW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_NTF_OUT_VIEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NTF_OUT_VIEW::IsInitialized() const {
  return true;
}

void MSG_NTF_OUT_VIEW::InternalSwap(MSG_NTF_OUT_VIEW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(obj_id_, other->obj_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NTF_OUT_VIEW::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msgpacket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msgpacket::POS_T* Arena::CreateMaybeMessage< ::msgpacket::POS_T >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::POS_T >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::PROTO_VEC_3F* Arena::CreateMaybeMessage< ::msgpacket::PROTO_VEC_3F >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::PROTO_VEC_3F >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_RPC* Arena::CreateMaybeMessage< ::msgpacket::MSG_RPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_RPC >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_RPC_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_RPC_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_RPC_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_SRV_REPORT* Arena::CreateMaybeMessage< ::msgpacket::MSG_SRV_REPORT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_SRV_REPORT >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_SRV_REPORT_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_SRV_REPORT_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_SRV_REPORT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_HEARTBEAT* Arena::CreateMaybeMessage< ::msgpacket::MSG_HEARTBEAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_HEARTBEAT_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_HEARTBEAT_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_HEARTBEAT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TEST* Arena::CreateMaybeMessage< ::msgpacket::MSG_TEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TEST >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TEST_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_TEST_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TEST_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TEST_RPC* Arena::CreateMaybeMessage< ::msgpacket::MSG_TEST_RPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TEST_RPC >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TEST_RPC_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_TEST_RPC_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TEST_RPC_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_LOGIN* Arena::CreateMaybeMessage< ::msgpacket::MSG_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_LOGIN_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_LOGIN_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_LOGIN_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TCP_STATIC* Arena::CreateMaybeMessage< ::msgpacket::MSG_TCP_STATIC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TCP_STATIC >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse* Arena::CreateMaybeMessage< ::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TCP_STATIC_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_TCP_STATIC_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TCP_STATIC_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_CLIENT_ENTER* Arena::CreateMaybeMessage< ::msgpacket::MSG_CLIENT_ENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_CLIENT_ENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_CLIENT_ENTER_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_CLIENT_ENTER_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_CLIENT_ENTER_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_GET_MAP* Arena::CreateMaybeMessage< ::msgpacket::MSG_GET_MAP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_GET_MAP >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_GET_MAP_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_GET_MAP_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_GET_MAP_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_PATH_SEARCH* Arena::CreateMaybeMessage< ::msgpacket::MSG_PATH_SEARCH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_PATH_SEARCH >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_PATH_SEARCH_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_PATH_SEARCH_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_PATH_SEARCH_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_NAV_SEARCH* Arena::CreateMaybeMessage< ::msgpacket::MSG_NAV_SEARCH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_NAV_SEARCH >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_NAV_SEARCH_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_NAV_SEARCH_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_NAV_SEARCH_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::NAV_OBSTACLE* Arena::CreateMaybeMessage< ::msgpacket::NAV_OBSTACLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::NAV_OBSTACLE >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_NAV_ADD_OBSTACLE* Arena::CreateMaybeMessage< ::msgpacket::MSG_NAV_ADD_OBSTACLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_NAV_ADD_OBSTACLE >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_NAV_ADD_OBSTACLE_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_NAV_ADD_OBSTACLE_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_NAV_ADD_OBSTACLE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_NAV_DEL_OBSTACLE* Arena::CreateMaybeMessage< ::msgpacket::MSG_NAV_DEL_OBSTACLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_NAV_DEL_OBSTACLE >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_NAV_DEL_OBSTACLE_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_NAV_DEL_OBSTACLE_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_NAV_DEL_OBSTACLE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_NAV_GET_ALL_OBSTACLE* Arena::CreateMaybeMessage< ::msgpacket::MSG_NAV_GET_ALL_OBSTACLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_NAV_GET_ALL_OBSTACLE >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_NAV_GET_ALL_OBSTACLE_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_NAV_GET_ALL_OBSTACLE_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_NAV_GET_ALL_OBSTACLE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_UPDATE_POS* Arena::CreateMaybeMessage< ::msgpacket::MSG_UPDATE_POS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_UPDATE_POS >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_UPDATE_POS_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_UPDATE_POS_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_UPDATE_POS_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_NTF_IN_VIEW* Arena::CreateMaybeMessage< ::msgpacket::MSG_NTF_IN_VIEW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_NTF_IN_VIEW >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_NTF_OUT_VIEW* Arena::CreateMaybeMessage< ::msgpacket::MSG_NTF_OUT_VIEW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_NTF_OUT_VIEW >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
