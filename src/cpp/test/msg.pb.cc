// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace msgpacket {
constexpr MSG_RPC::MSG_RPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_bin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_id_(int64_t{0})
  , timestamp_(int64_t{0})
  , timestamp_arrive_(int64_t{0})
  , timeout_wait_(int64_t{0})
  , msg_type_(0){}
struct MSG_RPCDefaultTypeInternal {
  constexpr MSG_RPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_RPCDefaultTypeInternal() {}
  union {
    MSG_RPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_RPCDefaultTypeInternal _MSG_RPC_default_instance_;
constexpr MSG_RPC_RES::MSG_RPC_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_bin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_id_(int64_t{0})
  , msg_type_(0)
  , res_code_(0)

  , timestamp_(int64_t{0})
  , timestamp_arrive_(int64_t{0})
  , timestamp_process_(int64_t{0}){}
struct MSG_RPC_RESDefaultTypeInternal {
  constexpr MSG_RPC_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_RPC_RESDefaultTypeInternal() {}
  union {
    MSG_RPC_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_RPC_RESDefaultTypeInternal _MSG_RPC_RES_default_instance_;
constexpr MSG_SRV_REPORT::MSG_SRV_REPORT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_id_(int64_t{0})
  , tcp_conn_id_(int64_t{0}){}
struct MSG_SRV_REPORTDefaultTypeInternal {
  constexpr MSG_SRV_REPORTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_SRV_REPORTDefaultTypeInternal() {}
  union {
    MSG_SRV_REPORT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_SRV_REPORTDefaultTypeInternal _MSG_SRV_REPORT_default_instance_;
constexpr MSG_SRV_REPORT_RES::MSG_SRV_REPORT_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : srv_id_(int64_t{0})
  , tcp_conn_id_(int64_t{0}){}
struct MSG_SRV_REPORT_RESDefaultTypeInternal {
  constexpr MSG_SRV_REPORT_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_SRV_REPORT_RESDefaultTypeInternal() {}
  union {
    MSG_SRV_REPORT_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_SRV_REPORT_RESDefaultTypeInternal _MSG_SRV_REPORT_RES_default_instance_;
constexpr MSG_HEARTBEAT::MSG_HEARTBEAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct MSG_HEARTBEATDefaultTypeInternal {
  constexpr MSG_HEARTBEATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_HEARTBEATDefaultTypeInternal() {}
  union {
    MSG_HEARTBEAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_HEARTBEATDefaultTypeInternal _MSG_HEARTBEAT_default_instance_;
constexpr MSG_HEARTBEAT_RES::MSG_HEARTBEAT_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct MSG_HEARTBEAT_RESDefaultTypeInternal {
  constexpr MSG_HEARTBEAT_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_HEARTBEAT_RESDefaultTypeInternal() {}
  union {
    MSG_HEARTBEAT_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_HEARTBEAT_RESDefaultTypeInternal _MSG_HEARTBEAT_RES_default_instance_;
constexpr MSG_TEST::MSG_TEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , seq_(int64_t{0})
  , timestamp_(int64_t{0})
  , timestamp_arrive_(int64_t{0}){}
struct MSG_TESTDefaultTypeInternal {
  constexpr MSG_TESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TESTDefaultTypeInternal() {}
  union {
    MSG_TEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TESTDefaultTypeInternal _MSG_TEST_default_instance_;
constexpr MSG_TEST_RES::MSG_TEST_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , seq_(int64_t{0})
  , timestamp_(int64_t{0})
  , timestamp_arrive_(int64_t{0})
  , timestamp_process_(int64_t{0}){}
struct MSG_TEST_RESDefaultTypeInternal {
  constexpr MSG_TEST_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TEST_RESDefaultTypeInternal() {}
  union {
    MSG_TEST_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TEST_RESDefaultTypeInternal _MSG_TEST_RES_default_instance_;
constexpr MSG_TEST_RPC::MSG_TEST_RPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rpc_count_(int64_t{0}){}
struct MSG_TEST_RPCDefaultTypeInternal {
  constexpr MSG_TEST_RPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TEST_RPCDefaultTypeInternal() {}
  union {
    MSG_TEST_RPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TEST_RPCDefaultTypeInternal _MSG_TEST_RPC_default_instance_;
constexpr MSG_TEST_RPC_RES::MSG_TEST_RPC_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MSG_TEST_RPC_RESDefaultTypeInternal {
  constexpr MSG_TEST_RPC_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TEST_RPC_RESDefaultTypeInternal() {}
  union {
    MSG_TEST_RPC_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TEST_RPC_RESDefaultTypeInternal _MSG_TEST_RPC_RES_default_instance_;
constexpr MSG_LOGIN::MSG_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct MSG_LOGINDefaultTypeInternal {
  constexpr MSG_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_LOGINDefaultTypeInternal() {}
  union {
    MSG_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_LOGINDefaultTypeInternal _MSG_LOGIN_default_instance_;
constexpr MSG_LOGIN_RES::MSG_LOGIN_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0})
  , connect_id_(int64_t{0})
  , fd_(int64_t{0}){}
struct MSG_LOGIN_RESDefaultTypeInternal {
  constexpr MSG_LOGIN_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_LOGIN_RESDefaultTypeInternal() {}
  union {
    MSG_LOGIN_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_LOGIN_RESDefaultTypeInternal _MSG_LOGIN_RES_default_instance_;
constexpr MSG_TCP_STATIC::MSG_TCP_STATIC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seq_(int64_t{0}){}
struct MSG_TCP_STATICDefaultTypeInternal {
  constexpr MSG_TCP_STATICDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TCP_STATICDefaultTypeInternal() {}
  union {
    MSG_TCP_STATIC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TCP_STATICDefaultTypeInternal _MSG_TCP_STATIC_default_instance_;
constexpr MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUseDefaultTypeInternal {
  constexpr MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUseDefaultTypeInternal _MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse_default_instance_;
constexpr MSG_TCP_STATIC_RES::MSG_TCP_STATIC_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_static_msg_recv_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , packet_count_(int64_t{0})
  , byte_recv_(int64_t{0})
  , byte_proc_(int64_t{0})
  , byte_send_(int64_t{0}){}
struct MSG_TCP_STATIC_RESDefaultTypeInternal {
  constexpr MSG_TCP_STATIC_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_TCP_STATIC_RESDefaultTypeInternal() {}
  union {
    MSG_TCP_STATIC_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_TCP_STATIC_RESDefaultTypeInternal _MSG_TCP_STATIC_RES_default_instance_;
constexpr MSG_CLIENT_ENTER::MSG_CLIENT_ENTER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(int64_t{0}){}
struct MSG_CLIENT_ENTERDefaultTypeInternal {
  constexpr MSG_CLIENT_ENTERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_CLIENT_ENTERDefaultTypeInternal() {}
  union {
    MSG_CLIENT_ENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_CLIENT_ENTERDefaultTypeInternal _MSG_CLIENT_ENTER_default_instance_;
constexpr MSG_CLIENT_ENTER_RES::MSG_CLIENT_ENTER_RES(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : redirect_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_id_(int64_t{0})
  , res_(0)

  , redirect_port_(0){}
struct MSG_CLIENT_ENTER_RESDefaultTypeInternal {
  constexpr MSG_CLIENT_ENTER_RESDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MSG_CLIENT_ENTER_RESDefaultTypeInternal() {}
  union {
    MSG_CLIENT_ENTER_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MSG_CLIENT_ENTER_RESDefaultTypeInternal _MSG_CLIENT_ENTER_RES_default_instance_;
}  // namespace msgpacket
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, msg_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, msg_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, msg_bin_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, timestamp_arrive_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC, timeout_wait_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, msg_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, msg_type_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, res_code_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, msg_bin_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, timestamp_arrive_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_RPC_RES, timestamp_process_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT, srv_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT, tcp_conn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT_RES, srv_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_SRV_REPORT_RES, tcp_conn_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_HEARTBEAT, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_HEARTBEAT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_HEARTBEAT_RES, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, str_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, seq_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST, timestamp_arrive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, str_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, seq_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, timestamp_arrive_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RES, timestamp_process_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RPC, rpc_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TEST_RPC_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN_RES, id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN_RES, connect_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_LOGIN_RES, fd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC, seq_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, packet_count_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, byte_recv_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, byte_proc_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, byte_send_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_TCP_STATIC_RES, map_static_msg_recv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER_RES, client_id_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER_RES, res_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER_RES, redirect_ip_),
  PROTOBUF_FIELD_OFFSET(::msgpacket::MSG_CLIENT_ENTER_RES, redirect_port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msgpacket::MSG_RPC)},
  { 12, -1, -1, sizeof(::msgpacket::MSG_RPC_RES)},
  { 25, -1, -1, sizeof(::msgpacket::MSG_SRV_REPORT)},
  { 33, -1, -1, sizeof(::msgpacket::MSG_SRV_REPORT_RES)},
  { 41, -1, -1, sizeof(::msgpacket::MSG_HEARTBEAT)},
  { 48, -1, -1, sizeof(::msgpacket::MSG_HEARTBEAT_RES)},
  { 55, -1, -1, sizeof(::msgpacket::MSG_TEST)},
  { 66, -1, -1, sizeof(::msgpacket::MSG_TEST_RES)},
  { 78, -1, -1, sizeof(::msgpacket::MSG_TEST_RPC)},
  { 85, -1, -1, sizeof(::msgpacket::MSG_TEST_RPC_RES)},
  { 91, -1, -1, sizeof(::msgpacket::MSG_LOGIN)},
  { 98, -1, -1, sizeof(::msgpacket::MSG_LOGIN_RES)},
  { 107, -1, -1, sizeof(::msgpacket::MSG_TCP_STATIC)},
  { 114, 122, -1, sizeof(::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse)},
  { 124, -1, -1, sizeof(::msgpacket::MSG_TCP_STATIC_RES)},
  { 135, -1, -1, sizeof(::msgpacket::MSG_CLIENT_ENTER)},
  { 142, -1, -1, sizeof(::msgpacket::MSG_CLIENT_ENTER_RES)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_RPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_RPC_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_SRV_REPORT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_SRV_REPORT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_HEARTBEAT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TEST_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TEST_RPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TEST_RPC_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_LOGIN_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TCP_STATIC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_TCP_STATIC_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_CLIENT_ENTER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msgpacket::_MSG_CLIENT_ENTER_RES_default_instance_),
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\tmsgpacket\"\177\n\007MSG_RPC\022\016\n\006msg"
  "_id\030\001 \001(\003\022\020\n\010msg_type\030\002 \001(\005\022\017\n\007msg_bin\030\003"
  " \001(\014\022\021\n\ttimestamp\030\004 \001(\003\022\030\n\020timestamp_arr"
  "ive\030\005 \001(\003\022\024\n\014timeout_wait\030\006 \001(\003\"\264\001\n\013MSG_"
  "RPC_RES\022\016\n\006msg_id\030\001 \001(\003\022\020\n\010msg_type\030\002 \001("
  "\005\022*\n\010res_code\030\003 \001(\0162\030.msgpacket.RESPONSE"
  "_CODE\022\017\n\007msg_bin\030\004 \001(\014\022\021\n\ttimestamp\030\005 \001("
  "\003\022\030\n\020timestamp_arrive\030\006 \001(\003\022\031\n\021timestamp"
  "_process\030\007 \001(\003\"5\n\016MSG_SRV_REPORT\022\016\n\006srv_"
  "id\030\001 \001(\003\022\023\n\013tcp_conn_id\030\002 \001(\003\"9\n\022MSG_SRV"
  "_REPORT_RES\022\016\n\006srv_id\030\001 \001(\003\022\023\n\013tcp_conn_"
  "id\030\002 \001(\003\"\033\n\rMSG_HEARTBEAT\022\n\n\002id\030\001 \001(\003\"\037\n"
  "\021MSG_HEARTBEAT_RES\022\n\n\002id\030\001 \001(\003\"]\n\010MSG_TE"
  "ST\022\n\n\002id\030\001 \001(\003\022\013\n\003str\030\002 \001(\t\022\013\n\003seq\030\003 \001(\003"
  "\022\021\n\ttimestamp\030\004 \001(\003\022\030\n\020timestamp_arrive\030"
  "\005 \001(\003\"|\n\014MSG_TEST_RES\022\n\n\002id\030\001 \001(\003\022\013\n\003str"
  "\030\002 \001(\t\022\013\n\003seq\030\003 \001(\003\022\021\n\ttimestamp\030\004 \001(\003\022\030"
  "\n\020timestamp_arrive\030\005 \001(\003\022\031\n\021timestamp_pr"
  "ocess\030\006 \001(\003\"!\n\014MSG_TEST_RPC\022\021\n\trpc_count"
  "\030\001 \001(\003\"\022\n\020MSG_TEST_RPC_RES\"\027\n\tMSG_LOGIN\022"
  "\n\n\002id\030\001 \001(\003\";\n\rMSG_LOGIN_RES\022\n\n\002id\030\001 \001(\003"
  "\022\022\n\nconnect_id\030\002 \001(\003\022\n\n\002fd\030\003 \001(\003\"\035\n\016MSG_"
  "TCP_STATIC\022\013\n\003seq\030\001 \001(\003\"\356\001\n\022MSG_TCP_STAT"
  "IC_RES\022\024\n\014packet_count\030\001 \001(\003\022\021\n\tbyte_rec"
  "v\030\002 \001(\003\022\021\n\tbyte_proc\030\003 \001(\003\022\021\n\tbyte_send\030"
  "\004 \001(\003\022P\n\023map_static_msg_recv\030\005 \003(\01323.msg"
  "packet.MSG_TCP_STATIC_RES.MapStaticMsgRe"
  "cvEntry\0327\n\025MapStaticMsgRecvEntry\022\013\n\003key\030"
  "\001 \001(\005\022\r\n\005value\030\002 \001(\003:\0028\001\"%\n\020MSG_CLIENT_E"
  "NTER\022\021\n\tclient_id\030\001 \001(\003\"|\n\024MSG_CLIENT_EN"
  "TER_RES\022\021\n\tclient_id\030\001 \001(\003\022%\n\003res\030\002 \001(\0162"
  "\030.msgpacket.RESPONSE_CODE\022\023\n\013redirect_ip"
  "\030\004 \001(\t\022\025\n\rredirect_port\030\005 \001(\005*\211\003\n\010MSG_TY"
  "PE\022\r\n\t_MSG_NULL\020\000\022\014\n\010_MSG_RPC\020\001\022\020\n\014_MSG_"
  "RPC_RES\020\002\022\023\n\017_MSG_SRV_REPORT\020\003\022\027\n\023_MSG_S"
  "RV_REPORT_RES\020\004\022\022\n\016_MSG_HEARTBEAT\020\005\022\026\n\022_"
  "MSG_HEARTBEAT_RES\020\006\022\023\n\017_MSG_TCP_STATIC\020\007"
  "\022\027\n\023_MSG_TCP_STATIC_RES\020\010\022\014\n\010_MSG_MAX\020d\022"
  "\r\n\t_MSG_TEST\020e\022\021\n\r_MSG_TEST_RES\020f\022\016\n\n_MS"
  "G_LOGIN\020g\022\022\n\016_MSG_LOGIN_RES\020h\022\021\n\r_MSG_TE"
  "ST_RPC\020i\022\025\n\021_MSG_TEST_RPC_RES\020j\022\024\n\017_MSG_"
  "SERVER_MAX\020\350\007\022\026\n\021_MSG_CLIENT_ENTER\020\351\007\022\032\n"
  "\025_MSG_CLIENT_ENTER_RES\020\352\007*{\n\rRESPONSE_CO"
  "DE\022\026\n\022RESPONSE_CODE_Fail\020\000\022\024\n\020RESPONSE_C"
  "ODE_OK\020\001\022 \n\034RESPONSE_CODE_Rpc_not_accept"
  "\020\002\022\032\n\026RESPONSE_CODE_redirect\020\003B\016Z\014./;msg"
  "packetb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto = {
  false, false, 1854, descriptor_table_protodef_msg_2eproto, "msg.proto", 
  &descriptor_table_msg_2eproto_once, nullptr, 0, 17,
  schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
  file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto, file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace msgpacket {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool MSG_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 1000:
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RESPONSE_CODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[1];
}
bool RESPONSE_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MSG_RPC::_Internal {
 public:
};

MSG_RPC::MSG_RPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_RPC)
}
MSG_RPC::MSG_RPC(const MSG_RPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_bin().empty()) {
    msg_bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_bin(), 
      GetArenaForAllocation());
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_RPC)
}

inline void MSG_RPC::SharedCtor() {
msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_type_));
}

MSG_RPC::~MSG_RPC() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_RPC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_RPC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_bin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RPC::ArenaDtor(void* object) {
  MSG_RPC* _this = reinterpret_cast< MSG_RPC* >(object);
  (void)_this;
}
void MSG_RPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_RPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_RPC::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_RPC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_bin_.ClearToEmpty();
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_RPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes msg_bin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg_bin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_arrive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeout_wait = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          timeout_wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_RPC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_RPC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_msg_id(), target);
  }

  // int32 msg_type = 2;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_type(), target);
  }

  // bytes msg_bin = 3;
  if (!this->_internal_msg_bin().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_bin(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp_arrive(), target);
  }

  // int64 timeout_wait = 6;
  if (this->_internal_timeout_wait() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timeout_wait(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_RPC)
  return target;
}

size_t MSG_RPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_RPC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_bin = 3;
  if (!this->_internal_msg_bin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_bin());
  }

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msg_id());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_arrive());
  }

  // int64 timeout_wait = 6;
  if (this->_internal_timeout_wait() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timeout_wait());
  }

  // int32 msg_type = 2;
  if (this->_internal_msg_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_RPC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_RPC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_RPC::GetClassData() const { return &_class_data_; }

void MSG_RPC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_RPC *>(to)->MergeFrom(
      static_cast<const MSG_RPC &>(from));
}


void MSG_RPC::MergeFrom(const MSG_RPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_RPC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_bin().empty()) {
    _internal_set_msg_bin(from._internal_msg_bin());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timestamp_arrive() != 0) {
    _internal_set_timestamp_arrive(from._internal_timestamp_arrive());
  }
  if (from._internal_timeout_wait() != 0) {
    _internal_set_timeout_wait(from._internal_timeout_wait());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_RPC::CopyFrom(const MSG_RPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_RPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RPC::IsInitialized() const {
  return true;
}

void MSG_RPC::InternalSwap(MSG_RPC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_bin_, lhs_arena,
      &other->msg_bin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_RPC, msg_type_)
      + sizeof(MSG_RPC::msg_type_)
      - PROTOBUF_FIELD_OFFSET(MSG_RPC, msg_id_)>(
          reinterpret_cast<char*>(&msg_id_),
          reinterpret_cast<char*>(&other->msg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RPC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class MSG_RPC_RES::_Internal {
 public:
};

MSG_RPC_RES::MSG_RPC_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_RPC_RES)
}
MSG_RPC_RES::MSG_RPC_RES(const MSG_RPC_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_bin().empty()) {
    msg_bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_bin(), 
      GetArenaForAllocation());
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_process_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(timestamp_process_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_RPC_RES)
}

inline void MSG_RPC_RES::SharedCtor() {
msg_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_process_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(timestamp_process_));
}

MSG_RPC_RES::~MSG_RPC_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_RPC_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_RPC_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_bin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RPC_RES::ArenaDtor(void* object) {
  MSG_RPC_RES* _this = reinterpret_cast< MSG_RPC_RES* >(object);
  (void)_this;
}
void MSG_RPC_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_RPC_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_RPC_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_RPC_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_bin_.ClearToEmpty();
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_process_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(timestamp_process_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_RPC_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.RESPONSE_CODE res_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res_code(static_cast<::msgpacket::RESPONSE_CODE>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes msg_bin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg_bin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_arrive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          timestamp_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_process = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          timestamp_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_RPC_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_RPC_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_msg_id(), target);
  }

  // int32 msg_type = 2;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_type(), target);
  }

  // .msgpacket.RESPONSE_CODE res_code = 3;
  if (this->_internal_res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_res_code(), target);
  }

  // bytes msg_bin = 4;
  if (!this->_internal_msg_bin().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_msg_bin(), target);
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // int64 timestamp_arrive = 6;
  if (this->_internal_timestamp_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp_arrive(), target);
  }

  // int64 timestamp_process = 7;
  if (this->_internal_timestamp_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_timestamp_process(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_RPC_RES)
  return target;
}

size_t MSG_RPC_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_RPC_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_bin = 4;
  if (!this->_internal_msg_bin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_bin());
  }

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_msg_id());
  }

  // int32 msg_type = 2;
  if (this->_internal_msg_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_type());
  }

  // .msgpacket.RESPONSE_CODE res_code = 3;
  if (this->_internal_res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res_code());
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 timestamp_arrive = 6;
  if (this->_internal_timestamp_arrive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_arrive());
  }

  // int64 timestamp_process = 7;
  if (this->_internal_timestamp_process() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_process());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_RPC_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_RPC_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_RPC_RES::GetClassData() const { return &_class_data_; }

void MSG_RPC_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_RPC_RES *>(to)->MergeFrom(
      static_cast<const MSG_RPC_RES &>(from));
}


void MSG_RPC_RES::MergeFrom(const MSG_RPC_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_RPC_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_bin().empty()) {
    _internal_set_msg_bin(from._internal_msg_bin());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timestamp_arrive() != 0) {
    _internal_set_timestamp_arrive(from._internal_timestamp_arrive());
  }
  if (from._internal_timestamp_process() != 0) {
    _internal_set_timestamp_process(from._internal_timestamp_process());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_RPC_RES::CopyFrom(const MSG_RPC_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_RPC_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RPC_RES::IsInitialized() const {
  return true;
}

void MSG_RPC_RES::InternalSwap(MSG_RPC_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_bin_, lhs_arena,
      &other->msg_bin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_RPC_RES, timestamp_process_)
      + sizeof(MSG_RPC_RES::timestamp_process_)
      - PROTOBUF_FIELD_OFFSET(MSG_RPC_RES, msg_id_)>(
          reinterpret_cast<char*>(&msg_id_),
          reinterpret_cast<char*>(&other->msg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RPC_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class MSG_SRV_REPORT::_Internal {
 public:
};

MSG_SRV_REPORT::MSG_SRV_REPORT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_SRV_REPORT)
}
MSG_SRV_REPORT::MSG_SRV_REPORT(const MSG_SRV_REPORT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srv_id_, &from.srv_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_conn_id_) -
    reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_SRV_REPORT)
}

inline void MSG_SRV_REPORT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tcp_conn_id_) -
    reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
}

MSG_SRV_REPORT::~MSG_SRV_REPORT() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_SRV_REPORT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_SRV_REPORT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_SRV_REPORT::ArenaDtor(void* object) {
  MSG_SRV_REPORT* _this = reinterpret_cast< MSG_SRV_REPORT* >(object);
  (void)_this;
}
void MSG_SRV_REPORT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_SRV_REPORT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_SRV_REPORT::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_SRV_REPORT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srv_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_conn_id_) -
      reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_SRV_REPORT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 tcp_conn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          tcp_conn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_SRV_REPORT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_SRV_REPORT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_id = 1;
  if (this->_internal_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_id(), target);
  }

  // int64 tcp_conn_id = 2;
  if (this->_internal_tcp_conn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_tcp_conn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_SRV_REPORT)
  return target;
}

size_t MSG_SRV_REPORT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_SRV_REPORT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srv_id = 1;
  if (this->_internal_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_id());
  }

  // int64 tcp_conn_id = 2;
  if (this->_internal_tcp_conn_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_tcp_conn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_SRV_REPORT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_SRV_REPORT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_SRV_REPORT::GetClassData() const { return &_class_data_; }

void MSG_SRV_REPORT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_SRV_REPORT *>(to)->MergeFrom(
      static_cast<const MSG_SRV_REPORT &>(from));
}


void MSG_SRV_REPORT::MergeFrom(const MSG_SRV_REPORT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_SRV_REPORT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_id() != 0) {
    _internal_set_srv_id(from._internal_srv_id());
  }
  if (from._internal_tcp_conn_id() != 0) {
    _internal_set_tcp_conn_id(from._internal_tcp_conn_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_SRV_REPORT::CopyFrom(const MSG_SRV_REPORT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_SRV_REPORT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SRV_REPORT::IsInitialized() const {
  return true;
}

void MSG_SRV_REPORT::InternalSwap(MSG_SRV_REPORT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_SRV_REPORT, tcp_conn_id_)
      + sizeof(MSG_SRV_REPORT::tcp_conn_id_)
      - PROTOBUF_FIELD_OFFSET(MSG_SRV_REPORT, srv_id_)>(
          reinterpret_cast<char*>(&srv_id_),
          reinterpret_cast<char*>(&other->srv_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SRV_REPORT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class MSG_SRV_REPORT_RES::_Internal {
 public:
};

MSG_SRV_REPORT_RES::MSG_SRV_REPORT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_SRV_REPORT_RES)
}
MSG_SRV_REPORT_RES::MSG_SRV_REPORT_RES(const MSG_SRV_REPORT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&srv_id_, &from.srv_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_conn_id_) -
    reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_SRV_REPORT_RES)
}

inline void MSG_SRV_REPORT_RES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&srv_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tcp_conn_id_) -
    reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
}

MSG_SRV_REPORT_RES::~MSG_SRV_REPORT_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_SRV_REPORT_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_SRV_REPORT_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_SRV_REPORT_RES::ArenaDtor(void* object) {
  MSG_SRV_REPORT_RES* _this = reinterpret_cast< MSG_SRV_REPORT_RES* >(object);
  (void)_this;
}
void MSG_SRV_REPORT_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_SRV_REPORT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_SRV_REPORT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_SRV_REPORT_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&srv_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_conn_id_) -
      reinterpret_cast<char*>(&srv_id_)) + sizeof(tcp_conn_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_SRV_REPORT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 srv_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          srv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 tcp_conn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          tcp_conn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_SRV_REPORT_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_SRV_REPORT_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 srv_id = 1;
  if (this->_internal_srv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_srv_id(), target);
  }

  // int64 tcp_conn_id = 2;
  if (this->_internal_tcp_conn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_tcp_conn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_SRV_REPORT_RES)
  return target;
}

size_t MSG_SRV_REPORT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_SRV_REPORT_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 srv_id = 1;
  if (this->_internal_srv_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_srv_id());
  }

  // int64 tcp_conn_id = 2;
  if (this->_internal_tcp_conn_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_tcp_conn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_SRV_REPORT_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_SRV_REPORT_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_SRV_REPORT_RES::GetClassData() const { return &_class_data_; }

void MSG_SRV_REPORT_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_SRV_REPORT_RES *>(to)->MergeFrom(
      static_cast<const MSG_SRV_REPORT_RES &>(from));
}


void MSG_SRV_REPORT_RES::MergeFrom(const MSG_SRV_REPORT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_SRV_REPORT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srv_id() != 0) {
    _internal_set_srv_id(from._internal_srv_id());
  }
  if (from._internal_tcp_conn_id() != 0) {
    _internal_set_tcp_conn_id(from._internal_tcp_conn_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_SRV_REPORT_RES::CopyFrom(const MSG_SRV_REPORT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_SRV_REPORT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SRV_REPORT_RES::IsInitialized() const {
  return true;
}

void MSG_SRV_REPORT_RES::InternalSwap(MSG_SRV_REPORT_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_SRV_REPORT_RES, tcp_conn_id_)
      + sizeof(MSG_SRV_REPORT_RES::tcp_conn_id_)
      - PROTOBUF_FIELD_OFFSET(MSG_SRV_REPORT_RES, srv_id_)>(
          reinterpret_cast<char*>(&srv_id_),
          reinterpret_cast<char*>(&other->srv_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SRV_REPORT_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// ===================================================================

class MSG_HEARTBEAT::_Internal {
 public:
};

MSG_HEARTBEAT::MSG_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_HEARTBEAT)
}
MSG_HEARTBEAT::MSG_HEARTBEAT(const MSG_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_HEARTBEAT)
}

inline void MSG_HEARTBEAT::SharedCtor() {
id_ = int64_t{0};
}

MSG_HEARTBEAT::~MSG_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_HEARTBEAT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_HEARTBEAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_HEARTBEAT::ArenaDtor(void* object) {
  MSG_HEARTBEAT* _this = reinterpret_cast< MSG_HEARTBEAT* >(object);
  (void)_this;
}
void MSG_HEARTBEAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_HEARTBEAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_HEARTBEAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_HEARTBEAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_HEARTBEAT)
  return target;
}

size_t MSG_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_HEARTBEAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_HEARTBEAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_HEARTBEAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_HEARTBEAT::GetClassData() const { return &_class_data_; }

void MSG_HEARTBEAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_HEARTBEAT *>(to)->MergeFrom(
      static_cast<const MSG_HEARTBEAT &>(from));
}


void MSG_HEARTBEAT::MergeFrom(const MSG_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_HEARTBEAT::CopyFrom(const MSG_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_HEARTBEAT::IsInitialized() const {
  return true;
}

void MSG_HEARTBEAT::InternalSwap(MSG_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_HEARTBEAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[4]);
}

// ===================================================================

class MSG_HEARTBEAT_RES::_Internal {
 public:
};

MSG_HEARTBEAT_RES::MSG_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_HEARTBEAT_RES)
}
MSG_HEARTBEAT_RES::MSG_HEARTBEAT_RES(const MSG_HEARTBEAT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_HEARTBEAT_RES)
}

inline void MSG_HEARTBEAT_RES::SharedCtor() {
id_ = int64_t{0};
}

MSG_HEARTBEAT_RES::~MSG_HEARTBEAT_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_HEARTBEAT_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_HEARTBEAT_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_HEARTBEAT_RES::ArenaDtor(void* object) {
  MSG_HEARTBEAT_RES* _this = reinterpret_cast< MSG_HEARTBEAT_RES* >(object);
  (void)_this;
}
void MSG_HEARTBEAT_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_HEARTBEAT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_HEARTBEAT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_HEARTBEAT_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_HEARTBEAT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_HEARTBEAT_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_HEARTBEAT_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_HEARTBEAT_RES)
  return target;
}

size_t MSG_HEARTBEAT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_HEARTBEAT_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_HEARTBEAT_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_HEARTBEAT_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_HEARTBEAT_RES::GetClassData() const { return &_class_data_; }

void MSG_HEARTBEAT_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_HEARTBEAT_RES *>(to)->MergeFrom(
      static_cast<const MSG_HEARTBEAT_RES &>(from));
}


void MSG_HEARTBEAT_RES::MergeFrom(const MSG_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_HEARTBEAT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_HEARTBEAT_RES::CopyFrom(const MSG_HEARTBEAT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_HEARTBEAT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_HEARTBEAT_RES::IsInitialized() const {
  return true;
}

void MSG_HEARTBEAT_RES::InternalSwap(MSG_HEARTBEAT_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_HEARTBEAT_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[5]);
}

// ===================================================================

class MSG_TEST::_Internal {
 public:
};

MSG_TEST::MSG_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TEST)
}
MSG_TEST::MSG_TEST(const MSG_TEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_arrive_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_arrive_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TEST)
}

inline void MSG_TEST::SharedCtor() {
str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_arrive_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_arrive_));
}

MSG_TEST::~MSG_TEST() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_TEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_TEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TEST::ArenaDtor(void* object) {
  MSG_TEST* _this = reinterpret_cast< MSG_TEST* >(object);
  (void)_this;
}
void MSG_TEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_TEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_TEST::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_TEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_arrive_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_arrive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_TEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.MSG_TEST.str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_arrive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_TEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_TEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string str = 2;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.MSG_TEST.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  // int64 seq = 3;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_seq(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp_arrive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_TEST)
  return target;
}

size_t MSG_TEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_TEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 2;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 seq = 3;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_arrive());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_TEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TEST::GetClassData() const { return &_class_data_; }

void MSG_TEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_TEST *>(to)->MergeFrom(
      static_cast<const MSG_TEST &>(from));
}


void MSG_TEST::MergeFrom(const MSG_TEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_TEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _internal_set_str(from._internal_str());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timestamp_arrive() != 0) {
    _internal_set_timestamp_arrive(from._internal_timestamp_arrive());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_TEST::CopyFrom(const MSG_TEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_TEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST::IsInitialized() const {
  return true;
}

void MSG_TEST::InternalSwap(MSG_TEST* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_TEST, timestamp_arrive_)
      + sizeof(MSG_TEST::timestamp_arrive_)
      - PROTOBUF_FIELD_OFFSET(MSG_TEST, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[6]);
}

// ===================================================================

class MSG_TEST_RES::_Internal {
 public:
};

MSG_TEST_RES::MSG_TEST_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TEST_RES)
}
MSG_TEST_RES::MSG_TEST_RES(const MSG_TEST_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_process_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_process_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TEST_RES)
}

inline void MSG_TEST_RES::SharedCtor() {
str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_process_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_process_));
}

MSG_TEST_RES::~MSG_TEST_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_TEST_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_TEST_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TEST_RES::ArenaDtor(void* object) {
  MSG_TEST_RES* _this = reinterpret_cast< MSG_TEST_RES* >(object);
  (void)_this;
}
void MSG_TEST_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_TEST_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_TEST_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_TEST_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_process_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_process_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_TEST_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.MSG_TEST_RES.str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_arrive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timestamp_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_process = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          timestamp_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_TEST_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_TEST_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string str = 2;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.MSG_TEST_RES.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  // int64 seq = 3;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_seq(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp_arrive(), target);
  }

  // int64 timestamp_process = 6;
  if (this->_internal_timestamp_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp_process(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_TEST_RES)
  return target;
}

size_t MSG_TEST_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_TEST_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 2;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 seq = 3;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 timestamp_arrive = 5;
  if (this->_internal_timestamp_arrive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_arrive());
  }

  // int64 timestamp_process = 6;
  if (this->_internal_timestamp_process() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_process());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TEST_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_TEST_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TEST_RES::GetClassData() const { return &_class_data_; }

void MSG_TEST_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_TEST_RES *>(to)->MergeFrom(
      static_cast<const MSG_TEST_RES &>(from));
}


void MSG_TEST_RES::MergeFrom(const MSG_TEST_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_TEST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _internal_set_str(from._internal_str());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_timestamp_arrive() != 0) {
    _internal_set_timestamp_arrive(from._internal_timestamp_arrive());
  }
  if (from._internal_timestamp_process() != 0) {
    _internal_set_timestamp_process(from._internal_timestamp_process());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_TEST_RES::CopyFrom(const MSG_TEST_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_TEST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST_RES::IsInitialized() const {
  return true;
}

void MSG_TEST_RES::InternalSwap(MSG_TEST_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_TEST_RES, timestamp_process_)
      + sizeof(MSG_TEST_RES::timestamp_process_)
      - PROTOBUF_FIELD_OFFSET(MSG_TEST_RES, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[7]);
}

// ===================================================================

class MSG_TEST_RPC::_Internal {
 public:
};

MSG_TEST_RPC::MSG_TEST_RPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TEST_RPC)
}
MSG_TEST_RPC::MSG_TEST_RPC(const MSG_TEST_RPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpc_count_ = from.rpc_count_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TEST_RPC)
}

inline void MSG_TEST_RPC::SharedCtor() {
rpc_count_ = int64_t{0};
}

MSG_TEST_RPC::~MSG_TEST_RPC() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_TEST_RPC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_TEST_RPC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_TEST_RPC::ArenaDtor(void* object) {
  MSG_TEST_RPC* _this = reinterpret_cast< MSG_TEST_RPC* >(object);
  (void)_this;
}
void MSG_TEST_RPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_TEST_RPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_TEST_RPC::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_TEST_RPC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpc_count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_TEST_RPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 rpc_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          rpc_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_TEST_RPC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_TEST_RPC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 rpc_count = 1;
  if (this->_internal_rpc_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_rpc_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_TEST_RPC)
  return target;
}

size_t MSG_TEST_RPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_TEST_RPC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 rpc_count = 1;
  if (this->_internal_rpc_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_rpc_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TEST_RPC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_TEST_RPC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TEST_RPC::GetClassData() const { return &_class_data_; }

void MSG_TEST_RPC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_TEST_RPC *>(to)->MergeFrom(
      static_cast<const MSG_TEST_RPC &>(from));
}


void MSG_TEST_RPC::MergeFrom(const MSG_TEST_RPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_TEST_RPC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rpc_count() != 0) {
    _internal_set_rpc_count(from._internal_rpc_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_TEST_RPC::CopyFrom(const MSG_TEST_RPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_TEST_RPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TEST_RPC::IsInitialized() const {
  return true;
}

void MSG_TEST_RPC::InternalSwap(MSG_TEST_RPC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rpc_count_, other->rpc_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST_RPC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[8]);
}

// ===================================================================

class MSG_TEST_RPC_RES::_Internal {
 public:
};

MSG_TEST_RPC_RES::MSG_TEST_RPC_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TEST_RPC_RES)
}
MSG_TEST_RPC_RES::MSG_TEST_RPC_RES(const MSG_TEST_RPC_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TEST_RPC_RES)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TEST_RPC_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TEST_RPC_RES::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MSG_TEST_RPC_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[9]);
}

// ===================================================================

class MSG_LOGIN::_Internal {
 public:
};

MSG_LOGIN::MSG_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_LOGIN)
}
MSG_LOGIN::MSG_LOGIN(const MSG_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_LOGIN)
}

inline void MSG_LOGIN::SharedCtor() {
id_ = int64_t{0};
}

MSG_LOGIN::~MSG_LOGIN() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_LOGIN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_LOGIN::ArenaDtor(void* object) {
  MSG_LOGIN* _this = reinterpret_cast< MSG_LOGIN* >(object);
  (void)_this;
}
void MSG_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_LOGIN)
  return target;
}

size_t MSG_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_LOGIN::GetClassData() const { return &_class_data_; }

void MSG_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_LOGIN *>(to)->MergeFrom(
      static_cast<const MSG_LOGIN &>(from));
}


void MSG_LOGIN::MergeFrom(const MSG_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_LOGIN::CopyFrom(const MSG_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LOGIN::IsInitialized() const {
  return true;
}

void MSG_LOGIN::InternalSwap(MSG_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[10]);
}

// ===================================================================

class MSG_LOGIN_RES::_Internal {
 public:
};

MSG_LOGIN_RES::MSG_LOGIN_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_LOGIN_RES)
}
MSG_LOGIN_RES::MSG_LOGIN_RES(const MSG_LOGIN_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&id_)) + sizeof(fd_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_LOGIN_RES)
}

inline void MSG_LOGIN_RES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&id_)) + sizeof(fd_));
}

MSG_LOGIN_RES::~MSG_LOGIN_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_LOGIN_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_LOGIN_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_LOGIN_RES::ArenaDtor(void* object) {
  MSG_LOGIN_RES* _this = reinterpret_cast< MSG_LOGIN_RES* >(object);
  (void)_this;
}
void MSG_LOGIN_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_LOGIN_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_LOGIN_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_LOGIN_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fd_) -
      reinterpret_cast<char*>(&id_)) + sizeof(fd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_LOGIN_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 connect_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          connect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_LOGIN_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_LOGIN_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 connect_id = 2;
  if (this->_internal_connect_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_connect_id(), target);
  }

  // int64 fd = 3;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_LOGIN_RES)
  return target;
}

size_t MSG_LOGIN_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_LOGIN_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 connect_id = 2;
  if (this->_internal_connect_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_connect_id());
  }

  // int64 fd = 3;
  if (this->_internal_fd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_LOGIN_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_LOGIN_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_LOGIN_RES::GetClassData() const { return &_class_data_; }

void MSG_LOGIN_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_LOGIN_RES *>(to)->MergeFrom(
      static_cast<const MSG_LOGIN_RES &>(from));
}


void MSG_LOGIN_RES::MergeFrom(const MSG_LOGIN_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_LOGIN_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_connect_id() != 0) {
    _internal_set_connect_id(from._internal_connect_id());
  }
  if (from._internal_fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_LOGIN_RES::CopyFrom(const MSG_LOGIN_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_LOGIN_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LOGIN_RES::IsInitialized() const {
  return true;
}

void MSG_LOGIN_RES::InternalSwap(MSG_LOGIN_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_LOGIN_RES, fd_)
      + sizeof(MSG_LOGIN_RES::fd_)
      - PROTOBUF_FIELD_OFFSET(MSG_LOGIN_RES, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LOGIN_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[11]);
}

// ===================================================================

class MSG_TCP_STATIC::_Internal {
 public:
};

MSG_TCP_STATIC::MSG_TCP_STATIC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TCP_STATIC)
}
MSG_TCP_STATIC::MSG_TCP_STATIC(const MSG_TCP_STATIC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TCP_STATIC)
}

inline void MSG_TCP_STATIC::SharedCtor() {
seq_ = int64_t{0};
}

MSG_TCP_STATIC::~MSG_TCP_STATIC() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_TCP_STATIC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_TCP_STATIC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_TCP_STATIC::ArenaDtor(void* object) {
  MSG_TCP_STATIC* _this = reinterpret_cast< MSG_TCP_STATIC* >(object);
  (void)_this;
}
void MSG_TCP_STATIC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_TCP_STATIC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_TCP_STATIC::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_TCP_STATIC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_TCP_STATIC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_TCP_STATIC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_TCP_STATIC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_TCP_STATIC)
  return target;
}

size_t MSG_TCP_STATIC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_TCP_STATIC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TCP_STATIC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_TCP_STATIC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TCP_STATIC::GetClassData() const { return &_class_data_; }

void MSG_TCP_STATIC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_TCP_STATIC *>(to)->MergeFrom(
      static_cast<const MSG_TCP_STATIC &>(from));
}


void MSG_TCP_STATIC::MergeFrom(const MSG_TCP_STATIC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_TCP_STATIC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_TCP_STATIC::CopyFrom(const MSG_TCP_STATIC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_TCP_STATIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TCP_STATIC::IsInitialized() const {
  return true;
}

void MSG_TCP_STATIC::InternalSwap(MSG_TCP_STATIC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TCP_STATIC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[12]);
}

// ===================================================================

MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse() {}
MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::MergeFrom(const MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[13]);
}

// ===================================================================

class MSG_TCP_STATIC_RES::_Internal {
 public:
};

MSG_TCP_STATIC_RES::MSG_TCP_STATIC_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_static_msg_recv_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_TCP_STATIC_RES)
}
MSG_TCP_STATIC_RES::MSG_TCP_STATIC_RES(const MSG_TCP_STATIC_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_static_msg_recv_.MergeFrom(from.map_static_msg_recv_);
  ::memcpy(&packet_count_, &from.packet_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&byte_send_) -
    reinterpret_cast<char*>(&packet_count_)) + sizeof(byte_send_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_TCP_STATIC_RES)
}

inline void MSG_TCP_STATIC_RES::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packet_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&byte_send_) -
    reinterpret_cast<char*>(&packet_count_)) + sizeof(byte_send_));
}

MSG_TCP_STATIC_RES::~MSG_TCP_STATIC_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_TCP_STATIC_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_TCP_STATIC_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_TCP_STATIC_RES::ArenaDtor(void* object) {
  MSG_TCP_STATIC_RES* _this = reinterpret_cast< MSG_TCP_STATIC_RES* >(object);
  (void)_this;
  _this->map_static_msg_recv_. ~MapField();
}
inline void MSG_TCP_STATIC_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MSG_TCP_STATIC_RES::ArenaDtor);
  }
}
void MSG_TCP_STATIC_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_TCP_STATIC_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_TCP_STATIC_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_static_msg_recv_.Clear();
  ::memset(&packet_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&byte_send_) -
      reinterpret_cast<char*>(&packet_count_)) + sizeof(byte_send_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_TCP_STATIC_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 packet_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 byte_recv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          byte_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 byte_proc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          byte_proc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 byte_send = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          byte_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, int64> map_static_msg_recv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_static_msg_recv_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_TCP_STATIC_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_TCP_STATIC_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 packet_count = 1;
  if (this->_internal_packet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_packet_count(), target);
  }

  // int64 byte_recv = 2;
  if (this->_internal_byte_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_byte_recv(), target);
  }

  // int64 byte_proc = 3;
  if (this->_internal_byte_proc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_byte_proc(), target);
  }

  // int64 byte_send = 4;
  if (this->_internal_byte_send() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_byte_send(), target);
  }

  // map<int32, int64> map_static_msg_recv = 5;
  if (!this->_internal_map_static_msg_recv().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_static_msg_recv().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_static_msg_recv().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >::const_iterator
          it = this->_internal_map_static_msg_recv().begin();
          it != this->_internal_map_static_msg_recv().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >::const_iterator
          it = this->_internal_map_static_msg_recv().begin();
          it != this->_internal_map_static_msg_recv().end(); ++it) {
        target = MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_TCP_STATIC_RES)
  return target;
}

size_t MSG_TCP_STATIC_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_TCP_STATIC_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int64> map_static_msg_recv = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_static_msg_recv_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >::const_iterator
      it = this->_internal_map_static_msg_recv().begin();
      it != this->_internal_map_static_msg_recv().end(); ++it) {
    total_size += MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 packet_count = 1;
  if (this->_internal_packet_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_packet_count());
  }

  // int64 byte_recv = 2;
  if (this->_internal_byte_recv() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_byte_recv());
  }

  // int64 byte_proc = 3;
  if (this->_internal_byte_proc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_byte_proc());
  }

  // int64 byte_send = 4;
  if (this->_internal_byte_send() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_byte_send());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_TCP_STATIC_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_TCP_STATIC_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_TCP_STATIC_RES::GetClassData() const { return &_class_data_; }

void MSG_TCP_STATIC_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_TCP_STATIC_RES *>(to)->MergeFrom(
      static_cast<const MSG_TCP_STATIC_RES &>(from));
}


void MSG_TCP_STATIC_RES::MergeFrom(const MSG_TCP_STATIC_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_TCP_STATIC_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_static_msg_recv_.MergeFrom(from.map_static_msg_recv_);
  if (from._internal_packet_count() != 0) {
    _internal_set_packet_count(from._internal_packet_count());
  }
  if (from._internal_byte_recv() != 0) {
    _internal_set_byte_recv(from._internal_byte_recv());
  }
  if (from._internal_byte_proc() != 0) {
    _internal_set_byte_proc(from._internal_byte_proc());
  }
  if (from._internal_byte_send() != 0) {
    _internal_set_byte_send(from._internal_byte_send());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_TCP_STATIC_RES::CopyFrom(const MSG_TCP_STATIC_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_TCP_STATIC_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TCP_STATIC_RES::IsInitialized() const {
  return true;
}

void MSG_TCP_STATIC_RES::InternalSwap(MSG_TCP_STATIC_RES* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_static_msg_recv_.InternalSwap(&other->map_static_msg_recv_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_TCP_STATIC_RES, byte_send_)
      + sizeof(MSG_TCP_STATIC_RES::byte_send_)
      - PROTOBUF_FIELD_OFFSET(MSG_TCP_STATIC_RES, packet_count_)>(
          reinterpret_cast<char*>(&packet_count_),
          reinterpret_cast<char*>(&other->packet_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TCP_STATIC_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[14]);
}

// ===================================================================

class MSG_CLIENT_ENTER::_Internal {
 public:
};

MSG_CLIENT_ENTER::MSG_CLIENT_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_CLIENT_ENTER)
}
MSG_CLIENT_ENTER::MSG_CLIENT_ENTER(const MSG_CLIENT_ENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_ = from.client_id_;
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_CLIENT_ENTER)
}

inline void MSG_CLIENT_ENTER::SharedCtor() {
client_id_ = int64_t{0};
}

MSG_CLIENT_ENTER::~MSG_CLIENT_ENTER() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_CLIENT_ENTER)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_CLIENT_ENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MSG_CLIENT_ENTER::ArenaDtor(void* object) {
  MSG_CLIENT_ENTER* _this = reinterpret_cast< MSG_CLIENT_ENTER* >(object);
  (void)_this;
}
void MSG_CLIENT_ENTER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_CLIENT_ENTER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_CLIENT_ENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_CLIENT_ENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_CLIENT_ENTER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_CLIENT_ENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_CLIENT_ENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_CLIENT_ENTER)
  return target;
}

size_t MSG_CLIENT_ENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_CLIENT_ENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_CLIENT_ENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_CLIENT_ENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_CLIENT_ENTER::GetClassData() const { return &_class_data_; }

void MSG_CLIENT_ENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_CLIENT_ENTER *>(to)->MergeFrom(
      static_cast<const MSG_CLIENT_ENTER &>(from));
}


void MSG_CLIENT_ENTER::MergeFrom(const MSG_CLIENT_ENTER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_CLIENT_ENTER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_CLIENT_ENTER::CopyFrom(const MSG_CLIENT_ENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_CLIENT_ENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CLIENT_ENTER::IsInitialized() const {
  return true;
}

void MSG_CLIENT_ENTER::InternalSwap(MSG_CLIENT_ENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_CLIENT_ENTER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[15]);
}

// ===================================================================

class MSG_CLIENT_ENTER_RES::_Internal {
 public:
};

MSG_CLIENT_ENTER_RES::MSG_CLIENT_ENTER_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:msgpacket.MSG_CLIENT_ENTER_RES)
}
MSG_CLIENT_ENTER_RES::MSG_CLIENT_ENTER_RES(const MSG_CLIENT_ENTER_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  redirect_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    redirect_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redirect_ip().empty()) {
    redirect_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redirect_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&redirect_port_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(redirect_port_));
  // @@protoc_insertion_point(copy_constructor:msgpacket.MSG_CLIENT_ENTER_RES)
}

inline void MSG_CLIENT_ENTER_RES::SharedCtor() {
redirect_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  redirect_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&redirect_port_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(redirect_port_));
}

MSG_CLIENT_ENTER_RES::~MSG_CLIENT_ENTER_RES() {
  // @@protoc_insertion_point(destructor:msgpacket.MSG_CLIENT_ENTER_RES)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MSG_CLIENT_ENTER_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  redirect_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_CLIENT_ENTER_RES::ArenaDtor(void* object) {
  MSG_CLIENT_ENTER_RES* _this = reinterpret_cast< MSG_CLIENT_ENTER_RES* >(object);
  (void)_this;
}
void MSG_CLIENT_ENTER_RES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MSG_CLIENT_ENTER_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MSG_CLIENT_ENTER_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:msgpacket.MSG_CLIENT_ENTER_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redirect_ip_.ClearToEmpty();
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redirect_port_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(redirect_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MSG_CLIENT_ENTER_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msgpacket.RESPONSE_CODE res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::msgpacket::RESPONSE_CODE>(val));
        } else
          goto handle_unusual;
        continue;
      // string redirect_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_redirect_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msgpacket.MSG_CLIENT_ENTER_RES.redirect_ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 redirect_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          redirect_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MSG_CLIENT_ENTER_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msgpacket.MSG_CLIENT_ENTER_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_client_id(), target);
  }

  // .msgpacket.RESPONSE_CODE res = 2;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_res(), target);
  }

  // string redirect_ip = 4;
  if (!this->_internal_redirect_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redirect_ip().data(), static_cast<int>(this->_internal_redirect_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msgpacket.MSG_CLIENT_ENTER_RES.redirect_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_redirect_ip(), target);
  }

  // int32 redirect_port = 5;
  if (this->_internal_redirect_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_redirect_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msgpacket.MSG_CLIENT_ENTER_RES)
  return target;
}

size_t MSG_CLIENT_ENTER_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msgpacket.MSG_CLIENT_ENTER_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string redirect_ip = 4;
  if (!this->_internal_redirect_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redirect_ip());
  }

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_client_id());
  }

  // .msgpacket.RESPONSE_CODE res = 2;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  // int32 redirect_port = 5;
  if (this->_internal_redirect_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_redirect_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MSG_CLIENT_ENTER_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MSG_CLIENT_ENTER_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MSG_CLIENT_ENTER_RES::GetClassData() const { return &_class_data_; }

void MSG_CLIENT_ENTER_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MSG_CLIENT_ENTER_RES *>(to)->MergeFrom(
      static_cast<const MSG_CLIENT_ENTER_RES &>(from));
}


void MSG_CLIENT_ENTER_RES::MergeFrom(const MSG_CLIENT_ENTER_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msgpacket.MSG_CLIENT_ENTER_RES)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_redirect_ip().empty()) {
    _internal_set_redirect_ip(from._internal_redirect_ip());
  }
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  if (from._internal_redirect_port() != 0) {
    _internal_set_redirect_port(from._internal_redirect_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MSG_CLIENT_ENTER_RES::CopyFrom(const MSG_CLIENT_ENTER_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msgpacket.MSG_CLIENT_ENTER_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CLIENT_ENTER_RES::IsInitialized() const {
  return true;
}

void MSG_CLIENT_ENTER_RES::InternalSwap(MSG_CLIENT_ENTER_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redirect_ip_, lhs_arena,
      &other->redirect_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MSG_CLIENT_ENTER_RES, redirect_port_)
      + sizeof(MSG_CLIENT_ENTER_RES::redirect_port_)
      - PROTOBUF_FIELD_OFFSET(MSG_CLIENT_ENTER_RES, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_CLIENT_ENTER_RES::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msgpacket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_RPC* Arena::CreateMaybeMessage< ::msgpacket::MSG_RPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_RPC >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_RPC_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_RPC_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_RPC_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_SRV_REPORT* Arena::CreateMaybeMessage< ::msgpacket::MSG_SRV_REPORT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_SRV_REPORT >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_SRV_REPORT_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_SRV_REPORT_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_SRV_REPORT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_HEARTBEAT* Arena::CreateMaybeMessage< ::msgpacket::MSG_HEARTBEAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_HEARTBEAT_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_HEARTBEAT_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_HEARTBEAT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TEST* Arena::CreateMaybeMessage< ::msgpacket::MSG_TEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TEST >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TEST_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_TEST_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TEST_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TEST_RPC* Arena::CreateMaybeMessage< ::msgpacket::MSG_TEST_RPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TEST_RPC >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TEST_RPC_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_TEST_RPC_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TEST_RPC_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_LOGIN* Arena::CreateMaybeMessage< ::msgpacket::MSG_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_LOGIN_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_LOGIN_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_LOGIN_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TCP_STATIC* Arena::CreateMaybeMessage< ::msgpacket::MSG_TCP_STATIC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TCP_STATIC >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse* Arena::CreateMaybeMessage< ::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_TCP_STATIC_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_TCP_STATIC_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_TCP_STATIC_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_CLIENT_ENTER* Arena::CreateMaybeMessage< ::msgpacket::MSG_CLIENT_ENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_CLIENT_ENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::msgpacket::MSG_CLIENT_ENTER_RES* Arena::CreateMaybeMessage< ::msgpacket::MSG_CLIENT_ENTER_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msgpacket::MSG_CLIENT_ENTER_RES >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
