// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[36]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace msgpacket {
class MSG_CLIENT_ENTER;
struct MSG_CLIENT_ENTERDefaultTypeInternal;
extern MSG_CLIENT_ENTERDefaultTypeInternal _MSG_CLIENT_ENTER_default_instance_;
class MSG_CLIENT_ENTER_RES;
struct MSG_CLIENT_ENTER_RESDefaultTypeInternal;
extern MSG_CLIENT_ENTER_RESDefaultTypeInternal _MSG_CLIENT_ENTER_RES_default_instance_;
class MSG_GET_MAP;
struct MSG_GET_MAPDefaultTypeInternal;
extern MSG_GET_MAPDefaultTypeInternal _MSG_GET_MAP_default_instance_;
class MSG_GET_MAP_RES;
struct MSG_GET_MAP_RESDefaultTypeInternal;
extern MSG_GET_MAP_RESDefaultTypeInternal _MSG_GET_MAP_RES_default_instance_;
class MSG_HEARTBEAT;
struct MSG_HEARTBEATDefaultTypeInternal;
extern MSG_HEARTBEATDefaultTypeInternal _MSG_HEARTBEAT_default_instance_;
class MSG_HEARTBEAT_RES;
struct MSG_HEARTBEAT_RESDefaultTypeInternal;
extern MSG_HEARTBEAT_RESDefaultTypeInternal _MSG_HEARTBEAT_RES_default_instance_;
class MSG_LOGIN;
struct MSG_LOGINDefaultTypeInternal;
extern MSG_LOGINDefaultTypeInternal _MSG_LOGIN_default_instance_;
class MSG_LOGIN_RES;
struct MSG_LOGIN_RESDefaultTypeInternal;
extern MSG_LOGIN_RESDefaultTypeInternal _MSG_LOGIN_RES_default_instance_;
class MSG_NAV_ADD_OBSTACLE;
struct MSG_NAV_ADD_OBSTACLEDefaultTypeInternal;
extern MSG_NAV_ADD_OBSTACLEDefaultTypeInternal _MSG_NAV_ADD_OBSTACLE_default_instance_;
class MSG_NAV_ADD_OBSTACLE_RES;
struct MSG_NAV_ADD_OBSTACLE_RESDefaultTypeInternal;
extern MSG_NAV_ADD_OBSTACLE_RESDefaultTypeInternal _MSG_NAV_ADD_OBSTACLE_RES_default_instance_;
class MSG_NAV_DEL_OBSTACLE;
struct MSG_NAV_DEL_OBSTACLEDefaultTypeInternal;
extern MSG_NAV_DEL_OBSTACLEDefaultTypeInternal _MSG_NAV_DEL_OBSTACLE_default_instance_;
class MSG_NAV_DEL_OBSTACLE_RES;
struct MSG_NAV_DEL_OBSTACLE_RESDefaultTypeInternal;
extern MSG_NAV_DEL_OBSTACLE_RESDefaultTypeInternal _MSG_NAV_DEL_OBSTACLE_RES_default_instance_;
class MSG_NAV_GET_ALL_OBSTACLE;
struct MSG_NAV_GET_ALL_OBSTACLEDefaultTypeInternal;
extern MSG_NAV_GET_ALL_OBSTACLEDefaultTypeInternal _MSG_NAV_GET_ALL_OBSTACLE_default_instance_;
class MSG_NAV_GET_ALL_OBSTACLE_RES;
struct MSG_NAV_GET_ALL_OBSTACLE_RESDefaultTypeInternal;
extern MSG_NAV_GET_ALL_OBSTACLE_RESDefaultTypeInternal _MSG_NAV_GET_ALL_OBSTACLE_RES_default_instance_;
class MSG_NAV_SEARCH;
struct MSG_NAV_SEARCHDefaultTypeInternal;
extern MSG_NAV_SEARCHDefaultTypeInternal _MSG_NAV_SEARCH_default_instance_;
class MSG_NAV_SEARCH_RES;
struct MSG_NAV_SEARCH_RESDefaultTypeInternal;
extern MSG_NAV_SEARCH_RESDefaultTypeInternal _MSG_NAV_SEARCH_RES_default_instance_;
class MSG_NTF_IN_VIEW;
struct MSG_NTF_IN_VIEWDefaultTypeInternal;
extern MSG_NTF_IN_VIEWDefaultTypeInternal _MSG_NTF_IN_VIEW_default_instance_;
class MSG_NTF_OUT_VIEW;
struct MSG_NTF_OUT_VIEWDefaultTypeInternal;
extern MSG_NTF_OUT_VIEWDefaultTypeInternal _MSG_NTF_OUT_VIEW_default_instance_;
class MSG_PATH_SEARCH;
struct MSG_PATH_SEARCHDefaultTypeInternal;
extern MSG_PATH_SEARCHDefaultTypeInternal _MSG_PATH_SEARCH_default_instance_;
class MSG_PATH_SEARCH_RES;
struct MSG_PATH_SEARCH_RESDefaultTypeInternal;
extern MSG_PATH_SEARCH_RESDefaultTypeInternal _MSG_PATH_SEARCH_RES_default_instance_;
class MSG_RPC;
struct MSG_RPCDefaultTypeInternal;
extern MSG_RPCDefaultTypeInternal _MSG_RPC_default_instance_;
class MSG_RPC_RES;
struct MSG_RPC_RESDefaultTypeInternal;
extern MSG_RPC_RESDefaultTypeInternal _MSG_RPC_RES_default_instance_;
class MSG_SRV_REPORT;
struct MSG_SRV_REPORTDefaultTypeInternal;
extern MSG_SRV_REPORTDefaultTypeInternal _MSG_SRV_REPORT_default_instance_;
class MSG_SRV_REPORT_RES;
struct MSG_SRV_REPORT_RESDefaultTypeInternal;
extern MSG_SRV_REPORT_RESDefaultTypeInternal _MSG_SRV_REPORT_RES_default_instance_;
class MSG_TCP_STATIC;
struct MSG_TCP_STATICDefaultTypeInternal;
extern MSG_TCP_STATICDefaultTypeInternal _MSG_TCP_STATIC_default_instance_;
class MSG_TCP_STATIC_RES;
struct MSG_TCP_STATIC_RESDefaultTypeInternal;
extern MSG_TCP_STATIC_RESDefaultTypeInternal _MSG_TCP_STATIC_RES_default_instance_;
class MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse;
struct MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUseDefaultTypeInternal;
extern MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUseDefaultTypeInternal _MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse_default_instance_;
class MSG_TEST;
struct MSG_TESTDefaultTypeInternal;
extern MSG_TESTDefaultTypeInternal _MSG_TEST_default_instance_;
class MSG_TEST_RES;
struct MSG_TEST_RESDefaultTypeInternal;
extern MSG_TEST_RESDefaultTypeInternal _MSG_TEST_RES_default_instance_;
class MSG_TEST_RPC;
struct MSG_TEST_RPCDefaultTypeInternal;
extern MSG_TEST_RPCDefaultTypeInternal _MSG_TEST_RPC_default_instance_;
class MSG_TEST_RPC_RES;
struct MSG_TEST_RPC_RESDefaultTypeInternal;
extern MSG_TEST_RPC_RESDefaultTypeInternal _MSG_TEST_RPC_RES_default_instance_;
class MSG_UPDATE_POS;
struct MSG_UPDATE_POSDefaultTypeInternal;
extern MSG_UPDATE_POSDefaultTypeInternal _MSG_UPDATE_POS_default_instance_;
class MSG_UPDATE_POS_RES;
struct MSG_UPDATE_POS_RESDefaultTypeInternal;
extern MSG_UPDATE_POS_RESDefaultTypeInternal _MSG_UPDATE_POS_RES_default_instance_;
class NAV_OBSTACLE;
struct NAV_OBSTACLEDefaultTypeInternal;
extern NAV_OBSTACLEDefaultTypeInternal _NAV_OBSTACLE_default_instance_;
class POS_T;
struct POS_TDefaultTypeInternal;
extern POS_TDefaultTypeInternal _POS_T_default_instance_;
class PROTO_VEC_3F;
struct PROTO_VEC_3FDefaultTypeInternal;
extern PROTO_VEC_3FDefaultTypeInternal _PROTO_VEC_3F_default_instance_;
}  // namespace msgpacket
PROTOBUF_NAMESPACE_OPEN
template<> ::msgpacket::MSG_CLIENT_ENTER* Arena::CreateMaybeMessage<::msgpacket::MSG_CLIENT_ENTER>(Arena*);
template<> ::msgpacket::MSG_CLIENT_ENTER_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_CLIENT_ENTER_RES>(Arena*);
template<> ::msgpacket::MSG_GET_MAP* Arena::CreateMaybeMessage<::msgpacket::MSG_GET_MAP>(Arena*);
template<> ::msgpacket::MSG_GET_MAP_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_GET_MAP_RES>(Arena*);
template<> ::msgpacket::MSG_HEARTBEAT* Arena::CreateMaybeMessage<::msgpacket::MSG_HEARTBEAT>(Arena*);
template<> ::msgpacket::MSG_HEARTBEAT_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_HEARTBEAT_RES>(Arena*);
template<> ::msgpacket::MSG_LOGIN* Arena::CreateMaybeMessage<::msgpacket::MSG_LOGIN>(Arena*);
template<> ::msgpacket::MSG_LOGIN_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_LOGIN_RES>(Arena*);
template<> ::msgpacket::MSG_NAV_ADD_OBSTACLE* Arena::CreateMaybeMessage<::msgpacket::MSG_NAV_ADD_OBSTACLE>(Arena*);
template<> ::msgpacket::MSG_NAV_ADD_OBSTACLE_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_NAV_ADD_OBSTACLE_RES>(Arena*);
template<> ::msgpacket::MSG_NAV_DEL_OBSTACLE* Arena::CreateMaybeMessage<::msgpacket::MSG_NAV_DEL_OBSTACLE>(Arena*);
template<> ::msgpacket::MSG_NAV_DEL_OBSTACLE_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_NAV_DEL_OBSTACLE_RES>(Arena*);
template<> ::msgpacket::MSG_NAV_GET_ALL_OBSTACLE* Arena::CreateMaybeMessage<::msgpacket::MSG_NAV_GET_ALL_OBSTACLE>(Arena*);
template<> ::msgpacket::MSG_NAV_GET_ALL_OBSTACLE_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_NAV_GET_ALL_OBSTACLE_RES>(Arena*);
template<> ::msgpacket::MSG_NAV_SEARCH* Arena::CreateMaybeMessage<::msgpacket::MSG_NAV_SEARCH>(Arena*);
template<> ::msgpacket::MSG_NAV_SEARCH_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_NAV_SEARCH_RES>(Arena*);
template<> ::msgpacket::MSG_NTF_IN_VIEW* Arena::CreateMaybeMessage<::msgpacket::MSG_NTF_IN_VIEW>(Arena*);
template<> ::msgpacket::MSG_NTF_OUT_VIEW* Arena::CreateMaybeMessage<::msgpacket::MSG_NTF_OUT_VIEW>(Arena*);
template<> ::msgpacket::MSG_PATH_SEARCH* Arena::CreateMaybeMessage<::msgpacket::MSG_PATH_SEARCH>(Arena*);
template<> ::msgpacket::MSG_PATH_SEARCH_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_PATH_SEARCH_RES>(Arena*);
template<> ::msgpacket::MSG_RPC* Arena::CreateMaybeMessage<::msgpacket::MSG_RPC>(Arena*);
template<> ::msgpacket::MSG_RPC_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_RPC_RES>(Arena*);
template<> ::msgpacket::MSG_SRV_REPORT* Arena::CreateMaybeMessage<::msgpacket::MSG_SRV_REPORT>(Arena*);
template<> ::msgpacket::MSG_SRV_REPORT_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_SRV_REPORT_RES>(Arena*);
template<> ::msgpacket::MSG_TCP_STATIC* Arena::CreateMaybeMessage<::msgpacket::MSG_TCP_STATIC>(Arena*);
template<> ::msgpacket::MSG_TCP_STATIC_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_TCP_STATIC_RES>(Arena*);
template<> ::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse* Arena::CreateMaybeMessage<::msgpacket::MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse>(Arena*);
template<> ::msgpacket::MSG_TEST* Arena::CreateMaybeMessage<::msgpacket::MSG_TEST>(Arena*);
template<> ::msgpacket::MSG_TEST_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_TEST_RES>(Arena*);
template<> ::msgpacket::MSG_TEST_RPC* Arena::CreateMaybeMessage<::msgpacket::MSG_TEST_RPC>(Arena*);
template<> ::msgpacket::MSG_TEST_RPC_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_TEST_RPC_RES>(Arena*);
template<> ::msgpacket::MSG_UPDATE_POS* Arena::CreateMaybeMessage<::msgpacket::MSG_UPDATE_POS>(Arena*);
template<> ::msgpacket::MSG_UPDATE_POS_RES* Arena::CreateMaybeMessage<::msgpacket::MSG_UPDATE_POS_RES>(Arena*);
template<> ::msgpacket::NAV_OBSTACLE* Arena::CreateMaybeMessage<::msgpacket::NAV_OBSTACLE>(Arena*);
template<> ::msgpacket::POS_T* Arena::CreateMaybeMessage<::msgpacket::POS_T>(Arena*);
template<> ::msgpacket::PROTO_VEC_3F* Arena::CreateMaybeMessage<::msgpacket::PROTO_VEC_3F>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msgpacket {

enum MSG_TYPE : int {
  _MSG_NULL = 0,
  _MSG_RPC = 1001,
  _MSG_RPC_RES = 1002,
  _MSG_SRV_REPORT = 1003,
  _MSG_SRV_REPORT_RES = 1004,
  _MSG_HEARTBEAT = 10005,
  _MSG_HEARTBEAT_RES = 1006,
  _MSG_TCP_STATIC = 1007,
  _MSG_TCP_STATIC_RES = 1008,
  _MSG_MAX = 1100,
  _MSG_TEST = 1101,
  _MSG_TEST_RES = 1102,
  _MSG_LOGIN = 1103,
  _MSG_LOGIN_RES = 1104,
  _MSG_TEST_RPC = 1105,
  _MSG_TEST_RPC_RES = 1106,
  _MSG_SERVER_MAX = 2000,
  _MSG_CLIENT_ENTER = 2001,
  _MSG_CLIENT_ENTER_RES = 2002,
  _MSG_GET_MAP = 2003,
  _MSG_GET_MAP_RES = 2004,
  _MSG_PATH_SEARCH = 2005,
  _MSG_PATH_SEARCH_RES = 2006,
  _MSG_NAV_SEARCH = 2007,
  _MSG_NAV_SEARCH_RES = 2008,
  _MSG_NAV_ADD_OBSTACLE = 2009,
  _MSG_NAV_ADD_OBSTACLE_RES = 2010,
  _MSG_NAV_DEL_OBSTACLE = 2011,
  _MSG_NAV_DEL_OBSTACLE_RES = 2012,
  _MSG_NAV_GET_ALL_OBSTACLE = 2013,
  _MSG_NAV_GET_ALL_OBSTACLE_RES = 2014,
  _MSG_UPDATE_POS = 2015,
  _MSG_UPDATE_POS_RES = 2016,
  _MSG_NTF_IN_VIEW = 2017,
  _MSG_NTF_OUT_VIEW = 2018,
  MSG_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MSG_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MSG_TYPE_IsValid(int value);
constexpr MSG_TYPE MSG_TYPE_MIN = _MSG_NULL;
constexpr MSG_TYPE MSG_TYPE_MAX = _MSG_HEARTBEAT;
constexpr int MSG_TYPE_ARRAYSIZE = MSG_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_TYPE_descriptor();
template<typename T>
inline const std::string& MSG_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSG_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSG_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSG_TYPE_descriptor(), enum_t_value);
}
inline bool MSG_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MSG_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSG_TYPE>(
    MSG_TYPE_descriptor(), name, value);
}
enum RESPONSE_CODE : int {
  RESPONSE_CODE_Fail = 0,
  RESPONSE_CODE_OK = 1,
  RESPONSE_CODE_Rpc_not_accept = 2,
  RESPONSE_CODE_redirect = 3,
  RESPONSE_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RESPONSE_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RESPONSE_CODE_IsValid(int value);
constexpr RESPONSE_CODE RESPONSE_CODE_MIN = RESPONSE_CODE_Fail;
constexpr RESPONSE_CODE RESPONSE_CODE_MAX = RESPONSE_CODE_redirect;
constexpr int RESPONSE_CODE_ARRAYSIZE = RESPONSE_CODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RESPONSE_CODE_descriptor();
template<typename T>
inline const std::string& RESPONSE_CODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RESPONSE_CODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RESPONSE_CODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RESPONSE_CODE_descriptor(), enum_t_value);
}
inline bool RESPONSE_CODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RESPONSE_CODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RESPONSE_CODE>(
    RESPONSE_CODE_descriptor(), name, value);
}
// ===================================================================

class POS_T final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.POS_T) */ {
 public:
  inline POS_T() : POS_T(nullptr) {}
  ~POS_T() override;
  explicit constexpr POS_T(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  POS_T(const POS_T& from);
  POS_T(POS_T&& from) noexcept
    : POS_T() {
    *this = ::std::move(from);
  }

  inline POS_T& operator=(const POS_T& from) {
    CopyFrom(from);
    return *this;
  }
  inline POS_T& operator=(POS_T&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const POS_T& default_instance() {
    return *internal_default_instance();
  }
  static inline const POS_T* internal_default_instance() {
    return reinterpret_cast<const POS_T*>(
               &_POS_T_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(POS_T& a, POS_T& b) {
    a.Swap(&b);
  }
  inline void Swap(POS_T* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(POS_T* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  POS_T* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<POS_T>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const POS_T& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const POS_T& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(POS_T* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.POS_T";
  }
  protected:
  explicit POS_T(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
  };
  // int32 pos_x = 1;
  void clear_pos_x();
  int32_t pos_x() const;
  void set_pos_x(int32_t value);
  private:
  int32_t _internal_pos_x() const;
  void _internal_set_pos_x(int32_t value);
  public:

  // int32 pos_y = 2;
  void clear_pos_y();
  int32_t pos_y() const;
  void set_pos_y(int32_t value);
  private:
  int32_t _internal_pos_y() const;
  void _internal_set_pos_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.POS_T)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t pos_x_;
  int32_t pos_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PROTO_VEC_3F final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.PROTO_VEC_3F) */ {
 public:
  inline PROTO_VEC_3F() : PROTO_VEC_3F(nullptr) {}
  ~PROTO_VEC_3F() override;
  explicit constexpr PROTO_VEC_3F(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROTO_VEC_3F(const PROTO_VEC_3F& from);
  PROTO_VEC_3F(PROTO_VEC_3F&& from) noexcept
    : PROTO_VEC_3F() {
    *this = ::std::move(from);
  }

  inline PROTO_VEC_3F& operator=(const PROTO_VEC_3F& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROTO_VEC_3F& operator=(PROTO_VEC_3F&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROTO_VEC_3F& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROTO_VEC_3F* internal_default_instance() {
    return reinterpret_cast<const PROTO_VEC_3F*>(
               &_PROTO_VEC_3F_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PROTO_VEC_3F& a, PROTO_VEC_3F& b) {
    a.Swap(&b);
  }
  inline void Swap(PROTO_VEC_3F* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROTO_VEC_3F* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROTO_VEC_3F* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROTO_VEC_3F>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROTO_VEC_3F& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PROTO_VEC_3F& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROTO_VEC_3F* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.PROTO_VEC_3F";
  }
  protected:
  explicit PROTO_VEC_3F(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.PROTO_VEC_3F)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RPC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_RPC) */ {
 public:
  inline MSG_RPC() : MSG_RPC(nullptr) {}
  ~MSG_RPC() override;
  explicit constexpr MSG_RPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_RPC(const MSG_RPC& from);
  MSG_RPC(MSG_RPC&& from) noexcept
    : MSG_RPC() {
    *this = ::std::move(from);
  }

  inline MSG_RPC& operator=(const MSG_RPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RPC& operator=(MSG_RPC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_RPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_RPC* internal_default_instance() {
    return reinterpret_cast<const MSG_RPC*>(
               &_MSG_RPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_RPC& a, MSG_RPC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RPC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_RPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_RPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_RPC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_RPC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_RPC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RPC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_RPC";
  }
  protected:
  explicit MSG_RPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBinFieldNumber = 3,
    kMsgIdFieldNumber = 1,
    kTimestampFieldNumber = 4,
    kTimestampArriveFieldNumber = 5,
    kTimeoutWaitFieldNumber = 6,
    kMsgTypeFieldNumber = 2,
  };
  // bytes msg_bin = 3;
  void clear_msg_bin();
  const std::string& msg_bin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_bin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_bin();
  PROTOBUF_NODISCARD std::string* release_msg_bin();
  void set_allocated_msg_bin(std::string* msg_bin);
  private:
  const std::string& _internal_msg_bin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_bin(const std::string& value);
  std::string* _internal_mutable_msg_bin();
  public:

  // int64 msg_id = 1;
  void clear_msg_id();
  int64_t msg_id() const;
  void set_msg_id(int64_t value);
  private:
  int64_t _internal_msg_id() const;
  void _internal_set_msg_id(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 timestamp_arrive = 5;
  void clear_timestamp_arrive();
  int64_t timestamp_arrive() const;
  void set_timestamp_arrive(int64_t value);
  private:
  int64_t _internal_timestamp_arrive() const;
  void _internal_set_timestamp_arrive(int64_t value);
  public:

  // int64 timeout_wait = 6;
  void clear_timeout_wait();
  int64_t timeout_wait() const;
  void set_timeout_wait(int64_t value);
  private:
  int64_t _internal_timeout_wait() const;
  void _internal_set_timeout_wait(int64_t value);
  public:

  // int32 msg_type = 2;
  void clear_msg_type();
  int32_t msg_type() const;
  void set_msg_type(int32_t value);
  private:
  int32_t _internal_msg_type() const;
  void _internal_set_msg_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_RPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_bin_;
  int64_t msg_id_;
  int64_t timestamp_;
  int64_t timestamp_arrive_;
  int64_t timeout_wait_;
  int32_t msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_RPC_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_RPC_RES) */ {
 public:
  inline MSG_RPC_RES() : MSG_RPC_RES(nullptr) {}
  ~MSG_RPC_RES() override;
  explicit constexpr MSG_RPC_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_RPC_RES(const MSG_RPC_RES& from);
  MSG_RPC_RES(MSG_RPC_RES&& from) noexcept
    : MSG_RPC_RES() {
    *this = ::std::move(from);
  }

  inline MSG_RPC_RES& operator=(const MSG_RPC_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RPC_RES& operator=(MSG_RPC_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_RPC_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_RPC_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_RPC_RES*>(
               &_MSG_RPC_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_RPC_RES& a, MSG_RPC_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RPC_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_RPC_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_RPC_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_RPC_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_RPC_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_RPC_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RPC_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_RPC_RES";
  }
  protected:
  explicit MSG_RPC_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBinFieldNumber = 4,
    kMsgIdFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
    kResCodeFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kTimestampArriveFieldNumber = 6,
    kTimestampProcessFieldNumber = 7,
  };
  // bytes msg_bin = 4;
  void clear_msg_bin();
  const std::string& msg_bin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_bin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_bin();
  PROTOBUF_NODISCARD std::string* release_msg_bin();
  void set_allocated_msg_bin(std::string* msg_bin);
  private:
  const std::string& _internal_msg_bin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_bin(const std::string& value);
  std::string* _internal_mutable_msg_bin();
  public:

  // int64 msg_id = 1;
  void clear_msg_id();
  int64_t msg_id() const;
  void set_msg_id(int64_t value);
  private:
  int64_t _internal_msg_id() const;
  void _internal_set_msg_id(int64_t value);
  public:

  // int32 msg_type = 2;
  void clear_msg_type();
  int32_t msg_type() const;
  void set_msg_type(int32_t value);
  private:
  int32_t _internal_msg_type() const;
  void _internal_set_msg_type(int32_t value);
  public:

  // .msgpacket.RESPONSE_CODE res_code = 3;
  void clear_res_code();
  ::msgpacket::RESPONSE_CODE res_code() const;
  void set_res_code(::msgpacket::RESPONSE_CODE value);
  private:
  ::msgpacket::RESPONSE_CODE _internal_res_code() const;
  void _internal_set_res_code(::msgpacket::RESPONSE_CODE value);
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 timestamp_arrive = 6;
  void clear_timestamp_arrive();
  int64_t timestamp_arrive() const;
  void set_timestamp_arrive(int64_t value);
  private:
  int64_t _internal_timestamp_arrive() const;
  void _internal_set_timestamp_arrive(int64_t value);
  public:

  // int64 timestamp_process = 7;
  void clear_timestamp_process();
  int64_t timestamp_process() const;
  void set_timestamp_process(int64_t value);
  private:
  int64_t _internal_timestamp_process() const;
  void _internal_set_timestamp_process(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_RPC_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_bin_;
  int64_t msg_id_;
  int32_t msg_type_;
  int res_code_;
  int64_t timestamp_;
  int64_t timestamp_arrive_;
  int64_t timestamp_process_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_SRV_REPORT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_SRV_REPORT) */ {
 public:
  inline MSG_SRV_REPORT() : MSG_SRV_REPORT(nullptr) {}
  ~MSG_SRV_REPORT() override;
  explicit constexpr MSG_SRV_REPORT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_SRV_REPORT(const MSG_SRV_REPORT& from);
  MSG_SRV_REPORT(MSG_SRV_REPORT&& from) noexcept
    : MSG_SRV_REPORT() {
    *this = ::std::move(from);
  }

  inline MSG_SRV_REPORT& operator=(const MSG_SRV_REPORT& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_SRV_REPORT& operator=(MSG_SRV_REPORT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_SRV_REPORT& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_SRV_REPORT* internal_default_instance() {
    return reinterpret_cast<const MSG_SRV_REPORT*>(
               &_MSG_SRV_REPORT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_SRV_REPORT& a, MSG_SRV_REPORT& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_SRV_REPORT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_SRV_REPORT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_SRV_REPORT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_SRV_REPORT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_SRV_REPORT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_SRV_REPORT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_SRV_REPORT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_SRV_REPORT";
  }
  protected:
  explicit MSG_SRV_REPORT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvIdFieldNumber = 1,
    kTcpConnIdFieldNumber = 2,
  };
  // int64 srv_id = 1;
  void clear_srv_id();
  int64_t srv_id() const;
  void set_srv_id(int64_t value);
  private:
  int64_t _internal_srv_id() const;
  void _internal_set_srv_id(int64_t value);
  public:

  // int64 tcp_conn_id = 2;
  void clear_tcp_conn_id();
  int64_t tcp_conn_id() const;
  void set_tcp_conn_id(int64_t value);
  private:
  int64_t _internal_tcp_conn_id() const;
  void _internal_set_tcp_conn_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_SRV_REPORT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t srv_id_;
  int64_t tcp_conn_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_SRV_REPORT_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_SRV_REPORT_RES) */ {
 public:
  inline MSG_SRV_REPORT_RES() : MSG_SRV_REPORT_RES(nullptr) {}
  ~MSG_SRV_REPORT_RES() override;
  explicit constexpr MSG_SRV_REPORT_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_SRV_REPORT_RES(const MSG_SRV_REPORT_RES& from);
  MSG_SRV_REPORT_RES(MSG_SRV_REPORT_RES&& from) noexcept
    : MSG_SRV_REPORT_RES() {
    *this = ::std::move(from);
  }

  inline MSG_SRV_REPORT_RES& operator=(const MSG_SRV_REPORT_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_SRV_REPORT_RES& operator=(MSG_SRV_REPORT_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_SRV_REPORT_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_SRV_REPORT_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_SRV_REPORT_RES*>(
               &_MSG_SRV_REPORT_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_SRV_REPORT_RES& a, MSG_SRV_REPORT_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_SRV_REPORT_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_SRV_REPORT_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_SRV_REPORT_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_SRV_REPORT_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_SRV_REPORT_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_SRV_REPORT_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_SRV_REPORT_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_SRV_REPORT_RES";
  }
  protected:
  explicit MSG_SRV_REPORT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvIdFieldNumber = 1,
    kTcpConnIdFieldNumber = 2,
  };
  // int64 srv_id = 1;
  void clear_srv_id();
  int64_t srv_id() const;
  void set_srv_id(int64_t value);
  private:
  int64_t _internal_srv_id() const;
  void _internal_set_srv_id(int64_t value);
  public:

  // int64 tcp_conn_id = 2;
  void clear_tcp_conn_id();
  int64_t tcp_conn_id() const;
  void set_tcp_conn_id(int64_t value);
  private:
  int64_t _internal_tcp_conn_id() const;
  void _internal_set_tcp_conn_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_SRV_REPORT_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t srv_id_;
  int64_t tcp_conn_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_HEARTBEAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_HEARTBEAT) */ {
 public:
  inline MSG_HEARTBEAT() : MSG_HEARTBEAT(nullptr) {}
  ~MSG_HEARTBEAT() override;
  explicit constexpr MSG_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_HEARTBEAT(const MSG_HEARTBEAT& from);
  MSG_HEARTBEAT(MSG_HEARTBEAT&& from) noexcept
    : MSG_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline MSG_HEARTBEAT& operator=(const MSG_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_HEARTBEAT& operator=(MSG_HEARTBEAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_HEARTBEAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const MSG_HEARTBEAT*>(
               &_MSG_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_HEARTBEAT& a, MSG_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_HEARTBEAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_HEARTBEAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_HEARTBEAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_HEARTBEAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_HEARTBEAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_HEARTBEAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_HEARTBEAT";
  }
  protected:
  explicit MSG_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_HEARTBEAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_HEARTBEAT_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_HEARTBEAT_RES) */ {
 public:
  inline MSG_HEARTBEAT_RES() : MSG_HEARTBEAT_RES(nullptr) {}
  ~MSG_HEARTBEAT_RES() override;
  explicit constexpr MSG_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_HEARTBEAT_RES(const MSG_HEARTBEAT_RES& from);
  MSG_HEARTBEAT_RES(MSG_HEARTBEAT_RES&& from) noexcept
    : MSG_HEARTBEAT_RES() {
    *this = ::std::move(from);
  }

  inline MSG_HEARTBEAT_RES& operator=(const MSG_HEARTBEAT_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_HEARTBEAT_RES& operator=(MSG_HEARTBEAT_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_HEARTBEAT_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_HEARTBEAT_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_HEARTBEAT_RES*>(
               &_MSG_HEARTBEAT_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_HEARTBEAT_RES& a, MSG_HEARTBEAT_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_HEARTBEAT_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_HEARTBEAT_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_HEARTBEAT_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_HEARTBEAT_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_HEARTBEAT_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_HEARTBEAT_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_HEARTBEAT_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_HEARTBEAT_RES";
  }
  protected:
  explicit MSG_HEARTBEAT_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_HEARTBEAT_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_TEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_TEST) */ {
 public:
  inline MSG_TEST() : MSG_TEST(nullptr) {}
  ~MSG_TEST() override;
  explicit constexpr MSG_TEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_TEST(const MSG_TEST& from);
  MSG_TEST(MSG_TEST&& from) noexcept
    : MSG_TEST() {
    *this = ::std::move(from);
  }

  inline MSG_TEST& operator=(const MSG_TEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_TEST& operator=(MSG_TEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_TEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_TEST* internal_default_instance() {
    return reinterpret_cast<const MSG_TEST*>(
               &_MSG_TEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MSG_TEST& a, MSG_TEST& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_TEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_TEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_TEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_TEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_TEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_TEST& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_TEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_TEST";
  }
  protected:
  explicit MSG_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
    kIdFieldNumber = 1,
    kSeqFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kTimestampArriveFieldNumber = 5,
  };
  // string str = 2;
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 seq = 3;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 timestamp_arrive = 5;
  void clear_timestamp_arrive();
  int64_t timestamp_arrive() const;
  void set_timestamp_arrive(int64_t value);
  private:
  int64_t _internal_timestamp_arrive() const;
  void _internal_set_timestamp_arrive(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_TEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  int64_t id_;
  int64_t seq_;
  int64_t timestamp_;
  int64_t timestamp_arrive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_TEST_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_TEST_RES) */ {
 public:
  inline MSG_TEST_RES() : MSG_TEST_RES(nullptr) {}
  ~MSG_TEST_RES() override;
  explicit constexpr MSG_TEST_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_TEST_RES(const MSG_TEST_RES& from);
  MSG_TEST_RES(MSG_TEST_RES&& from) noexcept
    : MSG_TEST_RES() {
    *this = ::std::move(from);
  }

  inline MSG_TEST_RES& operator=(const MSG_TEST_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_TEST_RES& operator=(MSG_TEST_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_TEST_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_TEST_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_TEST_RES*>(
               &_MSG_TEST_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_TEST_RES& a, MSG_TEST_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_TEST_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_TEST_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_TEST_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_TEST_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_TEST_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_TEST_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_TEST_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_TEST_RES";
  }
  protected:
  explicit MSG_TEST_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
    kIdFieldNumber = 1,
    kSeqFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kTimestampArriveFieldNumber = 5,
    kTimestampProcessFieldNumber = 6,
  };
  // string str = 2;
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 seq = 3;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 timestamp_arrive = 5;
  void clear_timestamp_arrive();
  int64_t timestamp_arrive() const;
  void set_timestamp_arrive(int64_t value);
  private:
  int64_t _internal_timestamp_arrive() const;
  void _internal_set_timestamp_arrive(int64_t value);
  public:

  // int64 timestamp_process = 6;
  void clear_timestamp_process();
  int64_t timestamp_process() const;
  void set_timestamp_process(int64_t value);
  private:
  int64_t _internal_timestamp_process() const;
  void _internal_set_timestamp_process(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_TEST_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  int64_t id_;
  int64_t seq_;
  int64_t timestamp_;
  int64_t timestamp_arrive_;
  int64_t timestamp_process_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_TEST_RPC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_TEST_RPC) */ {
 public:
  inline MSG_TEST_RPC() : MSG_TEST_RPC(nullptr) {}
  ~MSG_TEST_RPC() override;
  explicit constexpr MSG_TEST_RPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_TEST_RPC(const MSG_TEST_RPC& from);
  MSG_TEST_RPC(MSG_TEST_RPC&& from) noexcept
    : MSG_TEST_RPC() {
    *this = ::std::move(from);
  }

  inline MSG_TEST_RPC& operator=(const MSG_TEST_RPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_TEST_RPC& operator=(MSG_TEST_RPC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_TEST_RPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_TEST_RPC* internal_default_instance() {
    return reinterpret_cast<const MSG_TEST_RPC*>(
               &_MSG_TEST_RPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_TEST_RPC& a, MSG_TEST_RPC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_TEST_RPC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_TEST_RPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_TEST_RPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_TEST_RPC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_TEST_RPC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_TEST_RPC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_TEST_RPC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_TEST_RPC";
  }
  protected:
  explicit MSG_TEST_RPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpcCountFieldNumber = 1,
  };
  // int64 rpc_count = 1;
  void clear_rpc_count();
  int64_t rpc_count() const;
  void set_rpc_count(int64_t value);
  private:
  int64_t _internal_rpc_count() const;
  void _internal_set_rpc_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_TEST_RPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t rpc_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_TEST_RPC_RES final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msgpacket.MSG_TEST_RPC_RES) */ {
 public:
  inline MSG_TEST_RPC_RES() : MSG_TEST_RPC_RES(nullptr) {}
  explicit constexpr MSG_TEST_RPC_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_TEST_RPC_RES(const MSG_TEST_RPC_RES& from);
  MSG_TEST_RPC_RES(MSG_TEST_RPC_RES&& from) noexcept
    : MSG_TEST_RPC_RES() {
    *this = ::std::move(from);
  }

  inline MSG_TEST_RPC_RES& operator=(const MSG_TEST_RPC_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_TEST_RPC_RES& operator=(MSG_TEST_RPC_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_TEST_RPC_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_TEST_RPC_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_TEST_RPC_RES*>(
               &_MSG_TEST_RPC_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MSG_TEST_RPC_RES& a, MSG_TEST_RPC_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_TEST_RPC_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_TEST_RPC_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_TEST_RPC_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_TEST_RPC_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MSG_TEST_RPC_RES& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MSG_TEST_RPC_RES& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_TEST_RPC_RES";
  }
  protected:
  explicit MSG_TEST_RPC_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_TEST_RPC_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_LOGIN) */ {
 public:
  inline MSG_LOGIN() : MSG_LOGIN(nullptr) {}
  ~MSG_LOGIN() override;
  explicit constexpr MSG_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_LOGIN(const MSG_LOGIN& from);
  MSG_LOGIN(MSG_LOGIN&& from) noexcept
    : MSG_LOGIN() {
    *this = ::std::move(from);
  }

  inline MSG_LOGIN& operator=(const MSG_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_LOGIN& operator=(MSG_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_LOGIN* internal_default_instance() {
    return reinterpret_cast<const MSG_LOGIN*>(
               &_MSG_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MSG_LOGIN& a, MSG_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_LOGIN";
  }
  protected:
  explicit MSG_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kViewRangeFieldNumber = 4,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // float X = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float view_range = 4;
  void clear_view_range();
  float view_range() const;
  void set_view_range(float value);
  private:
  float _internal_view_range() const;
  void _internal_set_view_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  float x_;
  float y_;
  float view_range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_LOGIN_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_LOGIN_RES) */ {
 public:
  inline MSG_LOGIN_RES() : MSG_LOGIN_RES(nullptr) {}
  ~MSG_LOGIN_RES() override;
  explicit constexpr MSG_LOGIN_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_LOGIN_RES(const MSG_LOGIN_RES& from);
  MSG_LOGIN_RES(MSG_LOGIN_RES&& from) noexcept
    : MSG_LOGIN_RES() {
    *this = ::std::move(from);
  }

  inline MSG_LOGIN_RES& operator=(const MSG_LOGIN_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_LOGIN_RES& operator=(MSG_LOGIN_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_LOGIN_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_LOGIN_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_LOGIN_RES*>(
               &_MSG_LOGIN_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MSG_LOGIN_RES& a, MSG_LOGIN_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_LOGIN_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_LOGIN_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_LOGIN_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_LOGIN_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_LOGIN_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_LOGIN_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_LOGIN_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_LOGIN_RES";
  }
  protected:
  explicit MSG_LOGIN_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kConnectIdFieldNumber = 2,
    kFdFieldNumber = 3,
    kObjIdFieldNumber = 4,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 connect_id = 2;
  void clear_connect_id();
  int64_t connect_id() const;
  void set_connect_id(int64_t value);
  private:
  int64_t _internal_connect_id() const;
  void _internal_set_connect_id(int64_t value);
  public:

  // int64 fd = 3;
  void clear_fd();
  int64_t fd() const;
  void set_fd(int64_t value);
  private:
  int64_t _internal_fd() const;
  void _internal_set_fd(int64_t value);
  public:

  // int64 obj_id = 4;
  void clear_obj_id();
  int64_t obj_id() const;
  void set_obj_id(int64_t value);
  private:
  int64_t _internal_obj_id() const;
  void _internal_set_obj_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_LOGIN_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  int64_t connect_id_;
  int64_t fd_;
  int64_t obj_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_TCP_STATIC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_TCP_STATIC) */ {
 public:
  inline MSG_TCP_STATIC() : MSG_TCP_STATIC(nullptr) {}
  ~MSG_TCP_STATIC() override;
  explicit constexpr MSG_TCP_STATIC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_TCP_STATIC(const MSG_TCP_STATIC& from);
  MSG_TCP_STATIC(MSG_TCP_STATIC&& from) noexcept
    : MSG_TCP_STATIC() {
    *this = ::std::move(from);
  }

  inline MSG_TCP_STATIC& operator=(const MSG_TCP_STATIC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_TCP_STATIC& operator=(MSG_TCP_STATIC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_TCP_STATIC& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_TCP_STATIC* internal_default_instance() {
    return reinterpret_cast<const MSG_TCP_STATIC*>(
               &_MSG_TCP_STATIC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MSG_TCP_STATIC& a, MSG_TCP_STATIC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_TCP_STATIC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_TCP_STATIC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_TCP_STATIC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_TCP_STATIC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_TCP_STATIC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_TCP_STATIC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_TCP_STATIC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_TCP_STATIC";
  }
  protected:
  explicit MSG_TCP_STATIC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqFieldNumber = 1,
  };
  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_TCP_STATIC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse, 
    int32_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse, 
    int32_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse();
  explicit constexpr MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse& other);
  static const MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse*>(&_MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class MSG_TCP_STATIC_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_TCP_STATIC_RES) */ {
 public:
  inline MSG_TCP_STATIC_RES() : MSG_TCP_STATIC_RES(nullptr) {}
  ~MSG_TCP_STATIC_RES() override;
  explicit constexpr MSG_TCP_STATIC_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_TCP_STATIC_RES(const MSG_TCP_STATIC_RES& from);
  MSG_TCP_STATIC_RES(MSG_TCP_STATIC_RES&& from) noexcept
    : MSG_TCP_STATIC_RES() {
    *this = ::std::move(from);
  }

  inline MSG_TCP_STATIC_RES& operator=(const MSG_TCP_STATIC_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_TCP_STATIC_RES& operator=(MSG_TCP_STATIC_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_TCP_STATIC_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_TCP_STATIC_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_TCP_STATIC_RES*>(
               &_MSG_TCP_STATIC_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MSG_TCP_STATIC_RES& a, MSG_TCP_STATIC_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_TCP_STATIC_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_TCP_STATIC_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_TCP_STATIC_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_TCP_STATIC_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_TCP_STATIC_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_TCP_STATIC_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_TCP_STATIC_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_TCP_STATIC_RES";
  }
  protected:
  explicit MSG_TCP_STATIC_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapStaticMsgRecvFieldNumber = 5,
    kPacketCountFieldNumber = 1,
    kByteRecvFieldNumber = 2,
    kByteProcFieldNumber = 3,
    kByteSendFieldNumber = 4,
  };
  // map<int32, int64> map_static_msg_recv = 5;
  int map_static_msg_recv_size() const;
  private:
  int _internal_map_static_msg_recv_size() const;
  public:
  void clear_map_static_msg_recv();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >&
      _internal_map_static_msg_recv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >*
      _internal_mutable_map_static_msg_recv();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >&
      map_static_msg_recv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >*
      mutable_map_static_msg_recv();

  // int64 packet_count = 1;
  void clear_packet_count();
  int64_t packet_count() const;
  void set_packet_count(int64_t value);
  private:
  int64_t _internal_packet_count() const;
  void _internal_set_packet_count(int64_t value);
  public:

  // int64 byte_recv = 2;
  void clear_byte_recv();
  int64_t byte_recv() const;
  void set_byte_recv(int64_t value);
  private:
  int64_t _internal_byte_recv() const;
  void _internal_set_byte_recv(int64_t value);
  public:

  // int64 byte_proc = 3;
  void clear_byte_proc();
  int64_t byte_proc() const;
  void set_byte_proc(int64_t value);
  private:
  int64_t _internal_byte_proc() const;
  void _internal_set_byte_proc(int64_t value);
  public:

  // int64 byte_send = 4;
  void clear_byte_send();
  int64_t byte_send() const;
  void set_byte_send(int64_t value);
  private:
  int64_t _internal_byte_send() const;
  void _internal_set_byte_send(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_TCP_STATIC_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MSG_TCP_STATIC_RES_MapStaticMsgRecvEntry_DoNotUse,
      int32_t, int64_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> map_static_msg_recv_;
  int64_t packet_count_;
  int64_t byte_recv_;
  int64_t byte_proc_;
  int64_t byte_send_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_CLIENT_ENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_CLIENT_ENTER) */ {
 public:
  inline MSG_CLIENT_ENTER() : MSG_CLIENT_ENTER(nullptr) {}
  ~MSG_CLIENT_ENTER() override;
  explicit constexpr MSG_CLIENT_ENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_CLIENT_ENTER(const MSG_CLIENT_ENTER& from);
  MSG_CLIENT_ENTER(MSG_CLIENT_ENTER&& from) noexcept
    : MSG_CLIENT_ENTER() {
    *this = ::std::move(from);
  }

  inline MSG_CLIENT_ENTER& operator=(const MSG_CLIENT_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_CLIENT_ENTER& operator=(MSG_CLIENT_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_CLIENT_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_CLIENT_ENTER* internal_default_instance() {
    return reinterpret_cast<const MSG_CLIENT_ENTER*>(
               &_MSG_CLIENT_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MSG_CLIENT_ENTER& a, MSG_CLIENT_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_CLIENT_ENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_CLIENT_ENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_CLIENT_ENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_CLIENT_ENTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_CLIENT_ENTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_CLIENT_ENTER& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_CLIENT_ENTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_CLIENT_ENTER";
  }
  protected:
  explicit MSG_CLIENT_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // int64 client_id = 1;
  void clear_client_id();
  int64_t client_id() const;
  void set_client_id(int64_t value);
  private:
  int64_t _internal_client_id() const;
  void _internal_set_client_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_CLIENT_ENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_CLIENT_ENTER_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_CLIENT_ENTER_RES) */ {
 public:
  inline MSG_CLIENT_ENTER_RES() : MSG_CLIENT_ENTER_RES(nullptr) {}
  ~MSG_CLIENT_ENTER_RES() override;
  explicit constexpr MSG_CLIENT_ENTER_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_CLIENT_ENTER_RES(const MSG_CLIENT_ENTER_RES& from);
  MSG_CLIENT_ENTER_RES(MSG_CLIENT_ENTER_RES&& from) noexcept
    : MSG_CLIENT_ENTER_RES() {
    *this = ::std::move(from);
  }

  inline MSG_CLIENT_ENTER_RES& operator=(const MSG_CLIENT_ENTER_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_CLIENT_ENTER_RES& operator=(MSG_CLIENT_ENTER_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_CLIENT_ENTER_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_CLIENT_ENTER_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_CLIENT_ENTER_RES*>(
               &_MSG_CLIENT_ENTER_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MSG_CLIENT_ENTER_RES& a, MSG_CLIENT_ENTER_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_CLIENT_ENTER_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_CLIENT_ENTER_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_CLIENT_ENTER_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_CLIENT_ENTER_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_CLIENT_ENTER_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_CLIENT_ENTER_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_CLIENT_ENTER_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_CLIENT_ENTER_RES";
  }
  protected:
  explicit MSG_CLIENT_ENTER_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedirectIpFieldNumber = 4,
    kClientIdFieldNumber = 1,
    kResFieldNumber = 2,
    kRedirectPortFieldNumber = 5,
  };
  // string redirect_ip = 4;
  void clear_redirect_ip();
  const std::string& redirect_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redirect_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redirect_ip();
  PROTOBUF_NODISCARD std::string* release_redirect_ip();
  void set_allocated_redirect_ip(std::string* redirect_ip);
  private:
  const std::string& _internal_redirect_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_ip(const std::string& value);
  std::string* _internal_mutable_redirect_ip();
  public:

  // int64 client_id = 1;
  void clear_client_id();
  int64_t client_id() const;
  void set_client_id(int64_t value);
  private:
  int64_t _internal_client_id() const;
  void _internal_set_client_id(int64_t value);
  public:

  // .msgpacket.RESPONSE_CODE res = 2;
  void clear_res();
  ::msgpacket::RESPONSE_CODE res() const;
  void set_res(::msgpacket::RESPONSE_CODE value);
  private:
  ::msgpacket::RESPONSE_CODE _internal_res() const;
  void _internal_set_res(::msgpacket::RESPONSE_CODE value);
  public:

  // int32 redirect_port = 5;
  void clear_redirect_port();
  int32_t redirect_port() const;
  void set_redirect_port(int32_t value);
  private:
  int32_t _internal_redirect_port() const;
  void _internal_set_redirect_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_CLIENT_ENTER_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_ip_;
  int64_t client_id_;
  int res_;
  int32_t redirect_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_GET_MAP final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msgpacket.MSG_GET_MAP) */ {
 public:
  inline MSG_GET_MAP() : MSG_GET_MAP(nullptr) {}
  explicit constexpr MSG_GET_MAP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_GET_MAP(const MSG_GET_MAP& from);
  MSG_GET_MAP(MSG_GET_MAP&& from) noexcept
    : MSG_GET_MAP() {
    *this = ::std::move(from);
  }

  inline MSG_GET_MAP& operator=(const MSG_GET_MAP& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_GET_MAP& operator=(MSG_GET_MAP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_GET_MAP& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_GET_MAP* internal_default_instance() {
    return reinterpret_cast<const MSG_GET_MAP*>(
               &_MSG_GET_MAP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MSG_GET_MAP& a, MSG_GET_MAP& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_GET_MAP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_GET_MAP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_GET_MAP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_GET_MAP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MSG_GET_MAP& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MSG_GET_MAP& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_GET_MAP";
  }
  protected:
  explicit MSG_GET_MAP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_GET_MAP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_GET_MAP_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_GET_MAP_RES) */ {
 public:
  inline MSG_GET_MAP_RES() : MSG_GET_MAP_RES(nullptr) {}
  ~MSG_GET_MAP_RES() override;
  explicit constexpr MSG_GET_MAP_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_GET_MAP_RES(const MSG_GET_MAP_RES& from);
  MSG_GET_MAP_RES(MSG_GET_MAP_RES&& from) noexcept
    : MSG_GET_MAP_RES() {
    *this = ::std::move(from);
  }

  inline MSG_GET_MAP_RES& operator=(const MSG_GET_MAP_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_GET_MAP_RES& operator=(MSG_GET_MAP_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_GET_MAP_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_GET_MAP_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_GET_MAP_RES*>(
               &_MSG_GET_MAP_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MSG_GET_MAP_RES& a, MSG_GET_MAP_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_GET_MAP_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_GET_MAP_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_GET_MAP_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_GET_MAP_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_GET_MAP_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_GET_MAP_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_GET_MAP_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_GET_MAP_RES";
  }
  protected:
  explicit MSG_GET_MAP_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapDataFieldNumber = 4,
    kMapWidFieldNumber = 1,
    kMapHighFieldNumber = 2,
    kMapPitchFieldNumber = 3,
  };
  // bytes map_data = 4;
  void clear_map_data();
  const std::string& map_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_data();
  PROTOBUF_NODISCARD std::string* release_map_data();
  void set_allocated_map_data(std::string* map_data);
  private:
  const std::string& _internal_map_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_data(const std::string& value);
  std::string* _internal_mutable_map_data();
  public:

  // int32 map_wid = 1;
  void clear_map_wid();
  int32_t map_wid() const;
  void set_map_wid(int32_t value);
  private:
  int32_t _internal_map_wid() const;
  void _internal_set_map_wid(int32_t value);
  public:

  // int32 map_high = 2;
  void clear_map_high();
  int32_t map_high() const;
  void set_map_high(int32_t value);
  private:
  int32_t _internal_map_high() const;
  void _internal_set_map_high(int32_t value);
  public:

  // int32 map_pitch = 3;
  void clear_map_pitch();
  int32_t map_pitch() const;
  void set_map_pitch(int32_t value);
  private:
  int32_t _internal_map_pitch() const;
  void _internal_set_map_pitch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_GET_MAP_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_data_;
  int32_t map_wid_;
  int32_t map_high_;
  int32_t map_pitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_PATH_SEARCH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_PATH_SEARCH) */ {
 public:
  inline MSG_PATH_SEARCH() : MSG_PATH_SEARCH(nullptr) {}
  ~MSG_PATH_SEARCH() override;
  explicit constexpr MSG_PATH_SEARCH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_PATH_SEARCH(const MSG_PATH_SEARCH& from);
  MSG_PATH_SEARCH(MSG_PATH_SEARCH&& from) noexcept
    : MSG_PATH_SEARCH() {
    *this = ::std::move(from);
  }

  inline MSG_PATH_SEARCH& operator=(const MSG_PATH_SEARCH& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_PATH_SEARCH& operator=(MSG_PATH_SEARCH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_PATH_SEARCH& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_PATH_SEARCH* internal_default_instance() {
    return reinterpret_cast<const MSG_PATH_SEARCH*>(
               &_MSG_PATH_SEARCH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MSG_PATH_SEARCH& a, MSG_PATH_SEARCH& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_PATH_SEARCH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_PATH_SEARCH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_PATH_SEARCH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_PATH_SEARCH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_PATH_SEARCH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_PATH_SEARCH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_PATH_SEARCH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_PATH_SEARCH";
  }
  protected:
  explicit MSG_PATH_SEARCH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosSrcFieldNumber = 1,
    kPosDstFieldNumber = 2,
  };
  // .msgpacket.POS_T pos_src = 1;
  bool has_pos_src() const;
  private:
  bool _internal_has_pos_src() const;
  public:
  void clear_pos_src();
  const ::msgpacket::POS_T& pos_src() const;
  PROTOBUF_NODISCARD ::msgpacket::POS_T* release_pos_src();
  ::msgpacket::POS_T* mutable_pos_src();
  void set_allocated_pos_src(::msgpacket::POS_T* pos_src);
  private:
  const ::msgpacket::POS_T& _internal_pos_src() const;
  ::msgpacket::POS_T* _internal_mutable_pos_src();
  public:
  void unsafe_arena_set_allocated_pos_src(
      ::msgpacket::POS_T* pos_src);
  ::msgpacket::POS_T* unsafe_arena_release_pos_src();

  // .msgpacket.POS_T pos_dst = 2;
  bool has_pos_dst() const;
  private:
  bool _internal_has_pos_dst() const;
  public:
  void clear_pos_dst();
  const ::msgpacket::POS_T& pos_dst() const;
  PROTOBUF_NODISCARD ::msgpacket::POS_T* release_pos_dst();
  ::msgpacket::POS_T* mutable_pos_dst();
  void set_allocated_pos_dst(::msgpacket::POS_T* pos_dst);
  private:
  const ::msgpacket::POS_T& _internal_pos_dst() const;
  ::msgpacket::POS_T* _internal_mutable_pos_dst();
  public:
  void unsafe_arena_set_allocated_pos_dst(
      ::msgpacket::POS_T* pos_dst);
  ::msgpacket::POS_T* unsafe_arena_release_pos_dst();

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_PATH_SEARCH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::POS_T* pos_src_;
  ::msgpacket::POS_T* pos_dst_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_PATH_SEARCH_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_PATH_SEARCH_RES) */ {
 public:
  inline MSG_PATH_SEARCH_RES() : MSG_PATH_SEARCH_RES(nullptr) {}
  ~MSG_PATH_SEARCH_RES() override;
  explicit constexpr MSG_PATH_SEARCH_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_PATH_SEARCH_RES(const MSG_PATH_SEARCH_RES& from);
  MSG_PATH_SEARCH_RES(MSG_PATH_SEARCH_RES&& from) noexcept
    : MSG_PATH_SEARCH_RES() {
    *this = ::std::move(from);
  }

  inline MSG_PATH_SEARCH_RES& operator=(const MSG_PATH_SEARCH_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_PATH_SEARCH_RES& operator=(MSG_PATH_SEARCH_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_PATH_SEARCH_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_PATH_SEARCH_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_PATH_SEARCH_RES*>(
               &_MSG_PATH_SEARCH_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MSG_PATH_SEARCH_RES& a, MSG_PATH_SEARCH_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_PATH_SEARCH_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_PATH_SEARCH_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_PATH_SEARCH_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_PATH_SEARCH_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_PATH_SEARCH_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_PATH_SEARCH_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_PATH_SEARCH_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_PATH_SEARCH_RES";
  }
  protected:
  explicit MSG_PATH_SEARCH_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathPosFieldNumber = 3,
    kPathKeyPosFieldNumber = 4,
    kPosSrcFieldNumber = 1,
    kPosDstFieldNumber = 2,
  };
  // repeated .msgpacket.POS_T path_pos = 3;
  int path_pos_size() const;
  private:
  int _internal_path_pos_size() const;
  public:
  void clear_path_pos();
  ::msgpacket::POS_T* mutable_path_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::POS_T >*
      mutable_path_pos();
  private:
  const ::msgpacket::POS_T& _internal_path_pos(int index) const;
  ::msgpacket::POS_T* _internal_add_path_pos();
  public:
  const ::msgpacket::POS_T& path_pos(int index) const;
  ::msgpacket::POS_T* add_path_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::POS_T >&
      path_pos() const;

  // repeated .msgpacket.POS_T path_key_pos = 4;
  int path_key_pos_size() const;
  private:
  int _internal_path_key_pos_size() const;
  public:
  void clear_path_key_pos();
  ::msgpacket::POS_T* mutable_path_key_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::POS_T >*
      mutable_path_key_pos();
  private:
  const ::msgpacket::POS_T& _internal_path_key_pos(int index) const;
  ::msgpacket::POS_T* _internal_add_path_key_pos();
  public:
  const ::msgpacket::POS_T& path_key_pos(int index) const;
  ::msgpacket::POS_T* add_path_key_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::POS_T >&
      path_key_pos() const;

  // .msgpacket.POS_T pos_src = 1;
  bool has_pos_src() const;
  private:
  bool _internal_has_pos_src() const;
  public:
  void clear_pos_src();
  const ::msgpacket::POS_T& pos_src() const;
  PROTOBUF_NODISCARD ::msgpacket::POS_T* release_pos_src();
  ::msgpacket::POS_T* mutable_pos_src();
  void set_allocated_pos_src(::msgpacket::POS_T* pos_src);
  private:
  const ::msgpacket::POS_T& _internal_pos_src() const;
  ::msgpacket::POS_T* _internal_mutable_pos_src();
  public:
  void unsafe_arena_set_allocated_pos_src(
      ::msgpacket::POS_T* pos_src);
  ::msgpacket::POS_T* unsafe_arena_release_pos_src();

  // .msgpacket.POS_T pos_dst = 2;
  bool has_pos_dst() const;
  private:
  bool _internal_has_pos_dst() const;
  public:
  void clear_pos_dst();
  const ::msgpacket::POS_T& pos_dst() const;
  PROTOBUF_NODISCARD ::msgpacket::POS_T* release_pos_dst();
  ::msgpacket::POS_T* mutable_pos_dst();
  void set_allocated_pos_dst(::msgpacket::POS_T* pos_dst);
  private:
  const ::msgpacket::POS_T& _internal_pos_dst() const;
  ::msgpacket::POS_T* _internal_mutable_pos_dst();
  public:
  void unsafe_arena_set_allocated_pos_dst(
      ::msgpacket::POS_T* pos_dst);
  ::msgpacket::POS_T* unsafe_arena_release_pos_dst();

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_PATH_SEARCH_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::POS_T > path_pos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::POS_T > path_key_pos_;
  ::msgpacket::POS_T* pos_src_;
  ::msgpacket::POS_T* pos_dst_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_NAV_SEARCH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_NAV_SEARCH) */ {
 public:
  inline MSG_NAV_SEARCH() : MSG_NAV_SEARCH(nullptr) {}
  ~MSG_NAV_SEARCH() override;
  explicit constexpr MSG_NAV_SEARCH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NAV_SEARCH(const MSG_NAV_SEARCH& from);
  MSG_NAV_SEARCH(MSG_NAV_SEARCH&& from) noexcept
    : MSG_NAV_SEARCH() {
    *this = ::std::move(from);
  }

  inline MSG_NAV_SEARCH& operator=(const MSG_NAV_SEARCH& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NAV_SEARCH& operator=(MSG_NAV_SEARCH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NAV_SEARCH& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NAV_SEARCH* internal_default_instance() {
    return reinterpret_cast<const MSG_NAV_SEARCH*>(
               &_MSG_NAV_SEARCH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MSG_NAV_SEARCH& a, MSG_NAV_SEARCH& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NAV_SEARCH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NAV_SEARCH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NAV_SEARCH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NAV_SEARCH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_NAV_SEARCH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_NAV_SEARCH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NAV_SEARCH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_NAV_SEARCH";
  }
  protected:
  explicit MSG_NAV_SEARCH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosSrcFieldNumber = 1,
    kPosDstFieldNumber = 2,
  };
  // .msgpacket.PROTO_VEC_3F pos_src = 1;
  bool has_pos_src() const;
  private:
  bool _internal_has_pos_src() const;
  public:
  void clear_pos_src();
  const ::msgpacket::PROTO_VEC_3F& pos_src() const;
  PROTOBUF_NODISCARD ::msgpacket::PROTO_VEC_3F* release_pos_src();
  ::msgpacket::PROTO_VEC_3F* mutable_pos_src();
  void set_allocated_pos_src(::msgpacket::PROTO_VEC_3F* pos_src);
  private:
  const ::msgpacket::PROTO_VEC_3F& _internal_pos_src() const;
  ::msgpacket::PROTO_VEC_3F* _internal_mutable_pos_src();
  public:
  void unsafe_arena_set_allocated_pos_src(
      ::msgpacket::PROTO_VEC_3F* pos_src);
  ::msgpacket::PROTO_VEC_3F* unsafe_arena_release_pos_src();

  // .msgpacket.PROTO_VEC_3F pos_dst = 2;
  bool has_pos_dst() const;
  private:
  bool _internal_has_pos_dst() const;
  public:
  void clear_pos_dst();
  const ::msgpacket::PROTO_VEC_3F& pos_dst() const;
  PROTOBUF_NODISCARD ::msgpacket::PROTO_VEC_3F* release_pos_dst();
  ::msgpacket::PROTO_VEC_3F* mutable_pos_dst();
  void set_allocated_pos_dst(::msgpacket::PROTO_VEC_3F* pos_dst);
  private:
  const ::msgpacket::PROTO_VEC_3F& _internal_pos_dst() const;
  ::msgpacket::PROTO_VEC_3F* _internal_mutable_pos_dst();
  public:
  void unsafe_arena_set_allocated_pos_dst(
      ::msgpacket::PROTO_VEC_3F* pos_dst);
  ::msgpacket::PROTO_VEC_3F* unsafe_arena_release_pos_dst();

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_NAV_SEARCH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::PROTO_VEC_3F* pos_src_;
  ::msgpacket::PROTO_VEC_3F* pos_dst_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_NAV_SEARCH_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_NAV_SEARCH_RES) */ {
 public:
  inline MSG_NAV_SEARCH_RES() : MSG_NAV_SEARCH_RES(nullptr) {}
  ~MSG_NAV_SEARCH_RES() override;
  explicit constexpr MSG_NAV_SEARCH_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NAV_SEARCH_RES(const MSG_NAV_SEARCH_RES& from);
  MSG_NAV_SEARCH_RES(MSG_NAV_SEARCH_RES&& from) noexcept
    : MSG_NAV_SEARCH_RES() {
    *this = ::std::move(from);
  }

  inline MSG_NAV_SEARCH_RES& operator=(const MSG_NAV_SEARCH_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NAV_SEARCH_RES& operator=(MSG_NAV_SEARCH_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NAV_SEARCH_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NAV_SEARCH_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_NAV_SEARCH_RES*>(
               &_MSG_NAV_SEARCH_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MSG_NAV_SEARCH_RES& a, MSG_NAV_SEARCH_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NAV_SEARCH_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NAV_SEARCH_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NAV_SEARCH_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NAV_SEARCH_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_NAV_SEARCH_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_NAV_SEARCH_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NAV_SEARCH_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_NAV_SEARCH_RES";
  }
  protected:
  explicit MSG_NAV_SEARCH_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathPosFieldNumber = 1,
  };
  // repeated .msgpacket.PROTO_VEC_3F path_pos = 1;
  int path_pos_size() const;
  private:
  int _internal_path_pos_size() const;
  public:
  void clear_path_pos();
  ::msgpacket::PROTO_VEC_3F* mutable_path_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PROTO_VEC_3F >*
      mutable_path_pos();
  private:
  const ::msgpacket::PROTO_VEC_3F& _internal_path_pos(int index) const;
  ::msgpacket::PROTO_VEC_3F* _internal_add_path_pos();
  public:
  const ::msgpacket::PROTO_VEC_3F& path_pos(int index) const;
  ::msgpacket::PROTO_VEC_3F* add_path_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PROTO_VEC_3F >&
      path_pos() const;

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_NAV_SEARCH_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PROTO_VEC_3F > path_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NAV_OBSTACLE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.NAV_OBSTACLE) */ {
 public:
  inline NAV_OBSTACLE() : NAV_OBSTACLE(nullptr) {}
  ~NAV_OBSTACLE() override;
  explicit constexpr NAV_OBSTACLE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NAV_OBSTACLE(const NAV_OBSTACLE& from);
  NAV_OBSTACLE(NAV_OBSTACLE&& from) noexcept
    : NAV_OBSTACLE() {
    *this = ::std::move(from);
  }

  inline NAV_OBSTACLE& operator=(const NAV_OBSTACLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline NAV_OBSTACLE& operator=(NAV_OBSTACLE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NAV_OBSTACLE& default_instance() {
    return *internal_default_instance();
  }
  static inline const NAV_OBSTACLE* internal_default_instance() {
    return reinterpret_cast<const NAV_OBSTACLE*>(
               &_NAV_OBSTACLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(NAV_OBSTACLE& a, NAV_OBSTACLE& b) {
    a.Swap(&b);
  }
  inline void Swap(NAV_OBSTACLE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NAV_OBSTACLE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NAV_OBSTACLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NAV_OBSTACLE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NAV_OBSTACLE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NAV_OBSTACLE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NAV_OBSTACLE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.NAV_OBSTACLE";
  }
  protected:
  explicit NAV_OBSTACLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 2,
    kHalfExtFieldNumber = 3,
    kObstacleIdFieldNumber = 1,
    kYRadianFieldNumber = 4,
  };
  // .msgpacket.PROTO_VEC_3F center = 2;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::msgpacket::PROTO_VEC_3F& center() const;
  PROTOBUF_NODISCARD ::msgpacket::PROTO_VEC_3F* release_center();
  ::msgpacket::PROTO_VEC_3F* mutable_center();
  void set_allocated_center(::msgpacket::PROTO_VEC_3F* center);
  private:
  const ::msgpacket::PROTO_VEC_3F& _internal_center() const;
  ::msgpacket::PROTO_VEC_3F* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::msgpacket::PROTO_VEC_3F* center);
  ::msgpacket::PROTO_VEC_3F* unsafe_arena_release_center();

  // .msgpacket.PROTO_VEC_3F half_ext = 3;
  bool has_half_ext() const;
  private:
  bool _internal_has_half_ext() const;
  public:
  void clear_half_ext();
  const ::msgpacket::PROTO_VEC_3F& half_ext() const;
  PROTOBUF_NODISCARD ::msgpacket::PROTO_VEC_3F* release_half_ext();
  ::msgpacket::PROTO_VEC_3F* mutable_half_ext();
  void set_allocated_half_ext(::msgpacket::PROTO_VEC_3F* half_ext);
  private:
  const ::msgpacket::PROTO_VEC_3F& _internal_half_ext() const;
  ::msgpacket::PROTO_VEC_3F* _internal_mutable_half_ext();
  public:
  void unsafe_arena_set_allocated_half_ext(
      ::msgpacket::PROTO_VEC_3F* half_ext);
  ::msgpacket::PROTO_VEC_3F* unsafe_arena_release_half_ext();

  // uint32 obstacle_id = 1;
  void clear_obstacle_id();
  uint32_t obstacle_id() const;
  void set_obstacle_id(uint32_t value);
  private:
  uint32_t _internal_obstacle_id() const;
  void _internal_set_obstacle_id(uint32_t value);
  public:

  // float y_radian = 4;
  void clear_y_radian();
  float y_radian() const;
  void set_y_radian(float value);
  private:
  float _internal_y_radian() const;
  void _internal_set_y_radian(float value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.NAV_OBSTACLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::PROTO_VEC_3F* center_;
  ::msgpacket::PROTO_VEC_3F* half_ext_;
  uint32_t obstacle_id_;
  float y_radian_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_NAV_ADD_OBSTACLE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_NAV_ADD_OBSTACLE) */ {
 public:
  inline MSG_NAV_ADD_OBSTACLE() : MSG_NAV_ADD_OBSTACLE(nullptr) {}
  ~MSG_NAV_ADD_OBSTACLE() override;
  explicit constexpr MSG_NAV_ADD_OBSTACLE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NAV_ADD_OBSTACLE(const MSG_NAV_ADD_OBSTACLE& from);
  MSG_NAV_ADD_OBSTACLE(MSG_NAV_ADD_OBSTACLE&& from) noexcept
    : MSG_NAV_ADD_OBSTACLE() {
    *this = ::std::move(from);
  }

  inline MSG_NAV_ADD_OBSTACLE& operator=(const MSG_NAV_ADD_OBSTACLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NAV_ADD_OBSTACLE& operator=(MSG_NAV_ADD_OBSTACLE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NAV_ADD_OBSTACLE& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NAV_ADD_OBSTACLE* internal_default_instance() {
    return reinterpret_cast<const MSG_NAV_ADD_OBSTACLE*>(
               &_MSG_NAV_ADD_OBSTACLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MSG_NAV_ADD_OBSTACLE& a, MSG_NAV_ADD_OBSTACLE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NAV_ADD_OBSTACLE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NAV_ADD_OBSTACLE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NAV_ADD_OBSTACLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NAV_ADD_OBSTACLE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_NAV_ADD_OBSTACLE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_NAV_ADD_OBSTACLE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NAV_ADD_OBSTACLE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_NAV_ADD_OBSTACLE";
  }
  protected:
  explicit MSG_NAV_ADD_OBSTACLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 1,
  };
  // .msgpacket.NAV_OBSTACLE obstacle = 1;
  bool has_obstacle() const;
  private:
  bool _internal_has_obstacle() const;
  public:
  void clear_obstacle();
  const ::msgpacket::NAV_OBSTACLE& obstacle() const;
  PROTOBUF_NODISCARD ::msgpacket::NAV_OBSTACLE* release_obstacle();
  ::msgpacket::NAV_OBSTACLE* mutable_obstacle();
  void set_allocated_obstacle(::msgpacket::NAV_OBSTACLE* obstacle);
  private:
  const ::msgpacket::NAV_OBSTACLE& _internal_obstacle() const;
  ::msgpacket::NAV_OBSTACLE* _internal_mutable_obstacle();
  public:
  void unsafe_arena_set_allocated_obstacle(
      ::msgpacket::NAV_OBSTACLE* obstacle);
  ::msgpacket::NAV_OBSTACLE* unsafe_arena_release_obstacle();

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_NAV_ADD_OBSTACLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::NAV_OBSTACLE* obstacle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_NAV_ADD_OBSTACLE_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_NAV_ADD_OBSTACLE_RES) */ {
 public:
  inline MSG_NAV_ADD_OBSTACLE_RES() : MSG_NAV_ADD_OBSTACLE_RES(nullptr) {}
  ~MSG_NAV_ADD_OBSTACLE_RES() override;
  explicit constexpr MSG_NAV_ADD_OBSTACLE_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NAV_ADD_OBSTACLE_RES(const MSG_NAV_ADD_OBSTACLE_RES& from);
  MSG_NAV_ADD_OBSTACLE_RES(MSG_NAV_ADD_OBSTACLE_RES&& from) noexcept
    : MSG_NAV_ADD_OBSTACLE_RES() {
    *this = ::std::move(from);
  }

  inline MSG_NAV_ADD_OBSTACLE_RES& operator=(const MSG_NAV_ADD_OBSTACLE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NAV_ADD_OBSTACLE_RES& operator=(MSG_NAV_ADD_OBSTACLE_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NAV_ADD_OBSTACLE_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NAV_ADD_OBSTACLE_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_NAV_ADD_OBSTACLE_RES*>(
               &_MSG_NAV_ADD_OBSTACLE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MSG_NAV_ADD_OBSTACLE_RES& a, MSG_NAV_ADD_OBSTACLE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NAV_ADD_OBSTACLE_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NAV_ADD_OBSTACLE_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NAV_ADD_OBSTACLE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NAV_ADD_OBSTACLE_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_NAV_ADD_OBSTACLE_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_NAV_ADD_OBSTACLE_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NAV_ADD_OBSTACLE_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_NAV_ADD_OBSTACLE_RES";
  }
  protected:
  explicit MSG_NAV_ADD_OBSTACLE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 2,
  };
  // .msgpacket.NAV_OBSTACLE obstacle = 2;
  bool has_obstacle() const;
  private:
  bool _internal_has_obstacle() const;
  public:
  void clear_obstacle();
  const ::msgpacket::NAV_OBSTACLE& obstacle() const;
  PROTOBUF_NODISCARD ::msgpacket::NAV_OBSTACLE* release_obstacle();
  ::msgpacket::NAV_OBSTACLE* mutable_obstacle();
  void set_allocated_obstacle(::msgpacket::NAV_OBSTACLE* obstacle);
  private:
  const ::msgpacket::NAV_OBSTACLE& _internal_obstacle() const;
  ::msgpacket::NAV_OBSTACLE* _internal_mutable_obstacle();
  public:
  void unsafe_arena_set_allocated_obstacle(
      ::msgpacket::NAV_OBSTACLE* obstacle);
  ::msgpacket::NAV_OBSTACLE* unsafe_arena_release_obstacle();

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_NAV_ADD_OBSTACLE_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::NAV_OBSTACLE* obstacle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_NAV_DEL_OBSTACLE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_NAV_DEL_OBSTACLE) */ {
 public:
  inline MSG_NAV_DEL_OBSTACLE() : MSG_NAV_DEL_OBSTACLE(nullptr) {}
  ~MSG_NAV_DEL_OBSTACLE() override;
  explicit constexpr MSG_NAV_DEL_OBSTACLE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NAV_DEL_OBSTACLE(const MSG_NAV_DEL_OBSTACLE& from);
  MSG_NAV_DEL_OBSTACLE(MSG_NAV_DEL_OBSTACLE&& from) noexcept
    : MSG_NAV_DEL_OBSTACLE() {
    *this = ::std::move(from);
  }

  inline MSG_NAV_DEL_OBSTACLE& operator=(const MSG_NAV_DEL_OBSTACLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NAV_DEL_OBSTACLE& operator=(MSG_NAV_DEL_OBSTACLE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NAV_DEL_OBSTACLE& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NAV_DEL_OBSTACLE* internal_default_instance() {
    return reinterpret_cast<const MSG_NAV_DEL_OBSTACLE*>(
               &_MSG_NAV_DEL_OBSTACLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MSG_NAV_DEL_OBSTACLE& a, MSG_NAV_DEL_OBSTACLE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NAV_DEL_OBSTACLE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NAV_DEL_OBSTACLE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NAV_DEL_OBSTACLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NAV_DEL_OBSTACLE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_NAV_DEL_OBSTACLE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_NAV_DEL_OBSTACLE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NAV_DEL_OBSTACLE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_NAV_DEL_OBSTACLE";
  }
  protected:
  explicit MSG_NAV_DEL_OBSTACLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleIdFieldNumber = 1,
  };
  // uint32 obstacle_id = 1;
  void clear_obstacle_id();
  uint32_t obstacle_id() const;
  void set_obstacle_id(uint32_t value);
  private:
  uint32_t _internal_obstacle_id() const;
  void _internal_set_obstacle_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_NAV_DEL_OBSTACLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t obstacle_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_NAV_DEL_OBSTACLE_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_NAV_DEL_OBSTACLE_RES) */ {
 public:
  inline MSG_NAV_DEL_OBSTACLE_RES() : MSG_NAV_DEL_OBSTACLE_RES(nullptr) {}
  ~MSG_NAV_DEL_OBSTACLE_RES() override;
  explicit constexpr MSG_NAV_DEL_OBSTACLE_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NAV_DEL_OBSTACLE_RES(const MSG_NAV_DEL_OBSTACLE_RES& from);
  MSG_NAV_DEL_OBSTACLE_RES(MSG_NAV_DEL_OBSTACLE_RES&& from) noexcept
    : MSG_NAV_DEL_OBSTACLE_RES() {
    *this = ::std::move(from);
  }

  inline MSG_NAV_DEL_OBSTACLE_RES& operator=(const MSG_NAV_DEL_OBSTACLE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NAV_DEL_OBSTACLE_RES& operator=(MSG_NAV_DEL_OBSTACLE_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NAV_DEL_OBSTACLE_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NAV_DEL_OBSTACLE_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_NAV_DEL_OBSTACLE_RES*>(
               &_MSG_NAV_DEL_OBSTACLE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MSG_NAV_DEL_OBSTACLE_RES& a, MSG_NAV_DEL_OBSTACLE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NAV_DEL_OBSTACLE_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NAV_DEL_OBSTACLE_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NAV_DEL_OBSTACLE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NAV_DEL_OBSTACLE_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_NAV_DEL_OBSTACLE_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_NAV_DEL_OBSTACLE_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NAV_DEL_OBSTACLE_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_NAV_DEL_OBSTACLE_RES";
  }
  protected:
  explicit MSG_NAV_DEL_OBSTACLE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleIdFieldNumber = 1,
  };
  // uint32 obstacle_id = 1;
  void clear_obstacle_id();
  uint32_t obstacle_id() const;
  void set_obstacle_id(uint32_t value);
  private:
  uint32_t _internal_obstacle_id() const;
  void _internal_set_obstacle_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_NAV_DEL_OBSTACLE_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t obstacle_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_NAV_GET_ALL_OBSTACLE final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msgpacket.MSG_NAV_GET_ALL_OBSTACLE) */ {
 public:
  inline MSG_NAV_GET_ALL_OBSTACLE() : MSG_NAV_GET_ALL_OBSTACLE(nullptr) {}
  explicit constexpr MSG_NAV_GET_ALL_OBSTACLE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NAV_GET_ALL_OBSTACLE(const MSG_NAV_GET_ALL_OBSTACLE& from);
  MSG_NAV_GET_ALL_OBSTACLE(MSG_NAV_GET_ALL_OBSTACLE&& from) noexcept
    : MSG_NAV_GET_ALL_OBSTACLE() {
    *this = ::std::move(from);
  }

  inline MSG_NAV_GET_ALL_OBSTACLE& operator=(const MSG_NAV_GET_ALL_OBSTACLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NAV_GET_ALL_OBSTACLE& operator=(MSG_NAV_GET_ALL_OBSTACLE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NAV_GET_ALL_OBSTACLE& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NAV_GET_ALL_OBSTACLE* internal_default_instance() {
    return reinterpret_cast<const MSG_NAV_GET_ALL_OBSTACLE*>(
               &_MSG_NAV_GET_ALL_OBSTACLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(MSG_NAV_GET_ALL_OBSTACLE& a, MSG_NAV_GET_ALL_OBSTACLE& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NAV_GET_ALL_OBSTACLE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NAV_GET_ALL_OBSTACLE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NAV_GET_ALL_OBSTACLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NAV_GET_ALL_OBSTACLE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MSG_NAV_GET_ALL_OBSTACLE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MSG_NAV_GET_ALL_OBSTACLE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_NAV_GET_ALL_OBSTACLE";
  }
  protected:
  explicit MSG_NAV_GET_ALL_OBSTACLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_NAV_GET_ALL_OBSTACLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_NAV_GET_ALL_OBSTACLE_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES) */ {
 public:
  inline MSG_NAV_GET_ALL_OBSTACLE_RES() : MSG_NAV_GET_ALL_OBSTACLE_RES(nullptr) {}
  ~MSG_NAV_GET_ALL_OBSTACLE_RES() override;
  explicit constexpr MSG_NAV_GET_ALL_OBSTACLE_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NAV_GET_ALL_OBSTACLE_RES(const MSG_NAV_GET_ALL_OBSTACLE_RES& from);
  MSG_NAV_GET_ALL_OBSTACLE_RES(MSG_NAV_GET_ALL_OBSTACLE_RES&& from) noexcept
    : MSG_NAV_GET_ALL_OBSTACLE_RES() {
    *this = ::std::move(from);
  }

  inline MSG_NAV_GET_ALL_OBSTACLE_RES& operator=(const MSG_NAV_GET_ALL_OBSTACLE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NAV_GET_ALL_OBSTACLE_RES& operator=(MSG_NAV_GET_ALL_OBSTACLE_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NAV_GET_ALL_OBSTACLE_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NAV_GET_ALL_OBSTACLE_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_NAV_GET_ALL_OBSTACLE_RES*>(
               &_MSG_NAV_GET_ALL_OBSTACLE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(MSG_NAV_GET_ALL_OBSTACLE_RES& a, MSG_NAV_GET_ALL_OBSTACLE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NAV_GET_ALL_OBSTACLE_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NAV_GET_ALL_OBSTACLE_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NAV_GET_ALL_OBSTACLE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NAV_GET_ALL_OBSTACLE_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_NAV_GET_ALL_OBSTACLE_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_NAV_GET_ALL_OBSTACLE_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NAV_GET_ALL_OBSTACLE_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES";
  }
  protected:
  explicit MSG_NAV_GET_ALL_OBSTACLE_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleFieldNumber = 1,
  };
  // repeated .msgpacket.NAV_OBSTACLE obstacle = 1;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::msgpacket::NAV_OBSTACLE* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::NAV_OBSTACLE >*
      mutable_obstacle();
  private:
  const ::msgpacket::NAV_OBSTACLE& _internal_obstacle(int index) const;
  ::msgpacket::NAV_OBSTACLE* _internal_add_obstacle();
  public:
  const ::msgpacket::NAV_OBSTACLE& obstacle(int index) const;
  ::msgpacket::NAV_OBSTACLE* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::NAV_OBSTACLE >&
      obstacle() const;

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::NAV_OBSTACLE > obstacle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_UPDATE_POS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_UPDATE_POS) */ {
 public:
  inline MSG_UPDATE_POS() : MSG_UPDATE_POS(nullptr) {}
  ~MSG_UPDATE_POS() override;
  explicit constexpr MSG_UPDATE_POS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_UPDATE_POS(const MSG_UPDATE_POS& from);
  MSG_UPDATE_POS(MSG_UPDATE_POS&& from) noexcept
    : MSG_UPDATE_POS() {
    *this = ::std::move(from);
  }

  inline MSG_UPDATE_POS& operator=(const MSG_UPDATE_POS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_UPDATE_POS& operator=(MSG_UPDATE_POS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_UPDATE_POS& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_UPDATE_POS* internal_default_instance() {
    return reinterpret_cast<const MSG_UPDATE_POS*>(
               &_MSG_UPDATE_POS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(MSG_UPDATE_POS& a, MSG_UPDATE_POS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_UPDATE_POS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_UPDATE_POS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_UPDATE_POS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_UPDATE_POS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_UPDATE_POS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_UPDATE_POS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_UPDATE_POS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_UPDATE_POS";
  }
  protected:
  explicit MSG_UPDATE_POS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewPosFieldNumber = 1,
  };
  // .msgpacket.PROTO_VEC_3F new_pos = 1;
  bool has_new_pos() const;
  private:
  bool _internal_has_new_pos() const;
  public:
  void clear_new_pos();
  const ::msgpacket::PROTO_VEC_3F& new_pos() const;
  PROTOBUF_NODISCARD ::msgpacket::PROTO_VEC_3F* release_new_pos();
  ::msgpacket::PROTO_VEC_3F* mutable_new_pos();
  void set_allocated_new_pos(::msgpacket::PROTO_VEC_3F* new_pos);
  private:
  const ::msgpacket::PROTO_VEC_3F& _internal_new_pos() const;
  ::msgpacket::PROTO_VEC_3F* _internal_mutable_new_pos();
  public:
  void unsafe_arena_set_allocated_new_pos(
      ::msgpacket::PROTO_VEC_3F* new_pos);
  ::msgpacket::PROTO_VEC_3F* unsafe_arena_release_new_pos();

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_UPDATE_POS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::PROTO_VEC_3F* new_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_UPDATE_POS_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_UPDATE_POS_RES) */ {
 public:
  inline MSG_UPDATE_POS_RES() : MSG_UPDATE_POS_RES(nullptr) {}
  ~MSG_UPDATE_POS_RES() override;
  explicit constexpr MSG_UPDATE_POS_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_UPDATE_POS_RES(const MSG_UPDATE_POS_RES& from);
  MSG_UPDATE_POS_RES(MSG_UPDATE_POS_RES&& from) noexcept
    : MSG_UPDATE_POS_RES() {
    *this = ::std::move(from);
  }

  inline MSG_UPDATE_POS_RES& operator=(const MSG_UPDATE_POS_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_UPDATE_POS_RES& operator=(MSG_UPDATE_POS_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_UPDATE_POS_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_UPDATE_POS_RES* internal_default_instance() {
    return reinterpret_cast<const MSG_UPDATE_POS_RES*>(
               &_MSG_UPDATE_POS_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(MSG_UPDATE_POS_RES& a, MSG_UPDATE_POS_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_UPDATE_POS_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_UPDATE_POS_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_UPDATE_POS_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_UPDATE_POS_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_UPDATE_POS_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_UPDATE_POS_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_UPDATE_POS_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_UPDATE_POS_RES";
  }
  protected:
  explicit MSG_UPDATE_POS_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewPosFieldNumber = 1,
  };
  // .msgpacket.PROTO_VEC_3F new_pos = 1;
  bool has_new_pos() const;
  private:
  bool _internal_has_new_pos() const;
  public:
  void clear_new_pos();
  const ::msgpacket::PROTO_VEC_3F& new_pos() const;
  PROTOBUF_NODISCARD ::msgpacket::PROTO_VEC_3F* release_new_pos();
  ::msgpacket::PROTO_VEC_3F* mutable_new_pos();
  void set_allocated_new_pos(::msgpacket::PROTO_VEC_3F* new_pos);
  private:
  const ::msgpacket::PROTO_VEC_3F& _internal_new_pos() const;
  ::msgpacket::PROTO_VEC_3F* _internal_mutable_new_pos();
  public:
  void unsafe_arena_set_allocated_new_pos(
      ::msgpacket::PROTO_VEC_3F* new_pos);
  ::msgpacket::PROTO_VEC_3F* unsafe_arena_release_new_pos();

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_UPDATE_POS_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msgpacket::PROTO_VEC_3F* new_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_NTF_IN_VIEW final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_NTF_IN_VIEW) */ {
 public:
  inline MSG_NTF_IN_VIEW() : MSG_NTF_IN_VIEW(nullptr) {}
  ~MSG_NTF_IN_VIEW() override;
  explicit constexpr MSG_NTF_IN_VIEW(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NTF_IN_VIEW(const MSG_NTF_IN_VIEW& from);
  MSG_NTF_IN_VIEW(MSG_NTF_IN_VIEW&& from) noexcept
    : MSG_NTF_IN_VIEW() {
    *this = ::std::move(from);
  }

  inline MSG_NTF_IN_VIEW& operator=(const MSG_NTF_IN_VIEW& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NTF_IN_VIEW& operator=(MSG_NTF_IN_VIEW&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NTF_IN_VIEW& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NTF_IN_VIEW* internal_default_instance() {
    return reinterpret_cast<const MSG_NTF_IN_VIEW*>(
               &_MSG_NTF_IN_VIEW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(MSG_NTF_IN_VIEW& a, MSG_NTF_IN_VIEW& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NTF_IN_VIEW* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NTF_IN_VIEW* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NTF_IN_VIEW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NTF_IN_VIEW>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_NTF_IN_VIEW& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_NTF_IN_VIEW& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NTF_IN_VIEW* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_NTF_IN_VIEW";
  }
  protected:
  explicit MSG_NTF_IN_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjIdFieldNumber = 1,
  };
  // int64 obj_id = 1;
  void clear_obj_id();
  int64_t obj_id() const;
  void set_obj_id(int64_t value);
  private:
  int64_t _internal_obj_id() const;
  void _internal_set_obj_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_NTF_IN_VIEW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t obj_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MSG_NTF_OUT_VIEW final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msgpacket.MSG_NTF_OUT_VIEW) */ {
 public:
  inline MSG_NTF_OUT_VIEW() : MSG_NTF_OUT_VIEW(nullptr) {}
  ~MSG_NTF_OUT_VIEW() override;
  explicit constexpr MSG_NTF_OUT_VIEW(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSG_NTF_OUT_VIEW(const MSG_NTF_OUT_VIEW& from);
  MSG_NTF_OUT_VIEW(MSG_NTF_OUT_VIEW&& from) noexcept
    : MSG_NTF_OUT_VIEW() {
    *this = ::std::move(from);
  }

  inline MSG_NTF_OUT_VIEW& operator=(const MSG_NTF_OUT_VIEW& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NTF_OUT_VIEW& operator=(MSG_NTF_OUT_VIEW&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSG_NTF_OUT_VIEW& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSG_NTF_OUT_VIEW* internal_default_instance() {
    return reinterpret_cast<const MSG_NTF_OUT_VIEW*>(
               &_MSG_NTF_OUT_VIEW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(MSG_NTF_OUT_VIEW& a, MSG_NTF_OUT_VIEW& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NTF_OUT_VIEW* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSG_NTF_OUT_VIEW* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSG_NTF_OUT_VIEW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSG_NTF_OUT_VIEW>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSG_NTF_OUT_VIEW& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSG_NTF_OUT_VIEW& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NTF_OUT_VIEW* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msgpacket.MSG_NTF_OUT_VIEW";
  }
  protected:
  explicit MSG_NTF_OUT_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjIdFieldNumber = 1,
  };
  // int64 obj_id = 1;
  void clear_obj_id();
  int64_t obj_id() const;
  void set_obj_id(int64_t value);
  private:
  int64_t _internal_obj_id() const;
  void _internal_set_obj_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msgpacket.MSG_NTF_OUT_VIEW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t obj_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// POS_T

// int32 pos_x = 1;
inline void POS_T::clear_pos_x() {
  pos_x_ = 0;
}
inline int32_t POS_T::_internal_pos_x() const {
  return pos_x_;
}
inline int32_t POS_T::pos_x() const {
  // @@protoc_insertion_point(field_get:msgpacket.POS_T.pos_x)
  return _internal_pos_x();
}
inline void POS_T::_internal_set_pos_x(int32_t value) {
  
  pos_x_ = value;
}
inline void POS_T::set_pos_x(int32_t value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:msgpacket.POS_T.pos_x)
}

// int32 pos_y = 2;
inline void POS_T::clear_pos_y() {
  pos_y_ = 0;
}
inline int32_t POS_T::_internal_pos_y() const {
  return pos_y_;
}
inline int32_t POS_T::pos_y() const {
  // @@protoc_insertion_point(field_get:msgpacket.POS_T.pos_y)
  return _internal_pos_y();
}
inline void POS_T::_internal_set_pos_y(int32_t value) {
  
  pos_y_ = value;
}
inline void POS_T::set_pos_y(int32_t value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:msgpacket.POS_T.pos_y)
}

// -------------------------------------------------------------------

// PROTO_VEC_3F

// float x = 1;
inline void PROTO_VEC_3F::clear_x() {
  x_ = 0;
}
inline float PROTO_VEC_3F::_internal_x() const {
  return x_;
}
inline float PROTO_VEC_3F::x() const {
  // @@protoc_insertion_point(field_get:msgpacket.PROTO_VEC_3F.x)
  return _internal_x();
}
inline void PROTO_VEC_3F::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PROTO_VEC_3F::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msgpacket.PROTO_VEC_3F.x)
}

// float y = 2;
inline void PROTO_VEC_3F::clear_y() {
  y_ = 0;
}
inline float PROTO_VEC_3F::_internal_y() const {
  return y_;
}
inline float PROTO_VEC_3F::y() const {
  // @@protoc_insertion_point(field_get:msgpacket.PROTO_VEC_3F.y)
  return _internal_y();
}
inline void PROTO_VEC_3F::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PROTO_VEC_3F::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msgpacket.PROTO_VEC_3F.y)
}

// float z = 3;
inline void PROTO_VEC_3F::clear_z() {
  z_ = 0;
}
inline float PROTO_VEC_3F::_internal_z() const {
  return z_;
}
inline float PROTO_VEC_3F::z() const {
  // @@protoc_insertion_point(field_get:msgpacket.PROTO_VEC_3F.z)
  return _internal_z();
}
inline void PROTO_VEC_3F::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PROTO_VEC_3F::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:msgpacket.PROTO_VEC_3F.z)
}

// -------------------------------------------------------------------

// MSG_RPC

// int64 msg_id = 1;
inline void MSG_RPC::clear_msg_id() {
  msg_id_ = int64_t{0};
}
inline int64_t MSG_RPC::_internal_msg_id() const {
  return msg_id_;
}
inline int64_t MSG_RPC::msg_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC.msg_id)
  return _internal_msg_id();
}
inline void MSG_RPC::_internal_set_msg_id(int64_t value) {
  
  msg_id_ = value;
}
inline void MSG_RPC::set_msg_id(int64_t value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC.msg_id)
}

// int32 msg_type = 2;
inline void MSG_RPC::clear_msg_type() {
  msg_type_ = 0;
}
inline int32_t MSG_RPC::_internal_msg_type() const {
  return msg_type_;
}
inline int32_t MSG_RPC::msg_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC.msg_type)
  return _internal_msg_type();
}
inline void MSG_RPC::_internal_set_msg_type(int32_t value) {
  
  msg_type_ = value;
}
inline void MSG_RPC::set_msg_type(int32_t value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC.msg_type)
}

// bytes msg_bin = 3;
inline void MSG_RPC::clear_msg_bin() {
  msg_bin_.ClearToEmpty();
}
inline const std::string& MSG_RPC::msg_bin() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC.msg_bin)
  return _internal_msg_bin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_RPC::set_msg_bin(ArgT0&& arg0, ArgT... args) {
 
 msg_bin_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC.msg_bin)
}
inline std::string* MSG_RPC::mutable_msg_bin() {
  std::string* _s = _internal_mutable_msg_bin();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_RPC.msg_bin)
  return _s;
}
inline const std::string& MSG_RPC::_internal_msg_bin() const {
  return msg_bin_.Get();
}
inline void MSG_RPC::_internal_set_msg_bin(const std::string& value) {
  
  msg_bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MSG_RPC::_internal_mutable_msg_bin() {
  
  return msg_bin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MSG_RPC::release_msg_bin() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_RPC.msg_bin)
  return msg_bin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MSG_RPC::set_allocated_msg_bin(std::string* msg_bin) {
  if (msg_bin != nullptr) {
    
  } else {
    
  }
  msg_bin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_bin,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_bin_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_RPC.msg_bin)
}

// int64 timestamp = 4;
inline void MSG_RPC::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t MSG_RPC::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t MSG_RPC::timestamp() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC.timestamp)
  return _internal_timestamp();
}
inline void MSG_RPC::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void MSG_RPC::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC.timestamp)
}

// int64 timestamp_arrive = 5;
inline void MSG_RPC::clear_timestamp_arrive() {
  timestamp_arrive_ = int64_t{0};
}
inline int64_t MSG_RPC::_internal_timestamp_arrive() const {
  return timestamp_arrive_;
}
inline int64_t MSG_RPC::timestamp_arrive() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC.timestamp_arrive)
  return _internal_timestamp_arrive();
}
inline void MSG_RPC::_internal_set_timestamp_arrive(int64_t value) {
  
  timestamp_arrive_ = value;
}
inline void MSG_RPC::set_timestamp_arrive(int64_t value) {
  _internal_set_timestamp_arrive(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC.timestamp_arrive)
}

// int64 timeout_wait = 6;
inline void MSG_RPC::clear_timeout_wait() {
  timeout_wait_ = int64_t{0};
}
inline int64_t MSG_RPC::_internal_timeout_wait() const {
  return timeout_wait_;
}
inline int64_t MSG_RPC::timeout_wait() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC.timeout_wait)
  return _internal_timeout_wait();
}
inline void MSG_RPC::_internal_set_timeout_wait(int64_t value) {
  
  timeout_wait_ = value;
}
inline void MSG_RPC::set_timeout_wait(int64_t value) {
  _internal_set_timeout_wait(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC.timeout_wait)
}

// -------------------------------------------------------------------

// MSG_RPC_RES

// int64 msg_id = 1;
inline void MSG_RPC_RES::clear_msg_id() {
  msg_id_ = int64_t{0};
}
inline int64_t MSG_RPC_RES::_internal_msg_id() const {
  return msg_id_;
}
inline int64_t MSG_RPC_RES::msg_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC_RES.msg_id)
  return _internal_msg_id();
}
inline void MSG_RPC_RES::_internal_set_msg_id(int64_t value) {
  
  msg_id_ = value;
}
inline void MSG_RPC_RES::set_msg_id(int64_t value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC_RES.msg_id)
}

// int32 msg_type = 2;
inline void MSG_RPC_RES::clear_msg_type() {
  msg_type_ = 0;
}
inline int32_t MSG_RPC_RES::_internal_msg_type() const {
  return msg_type_;
}
inline int32_t MSG_RPC_RES::msg_type() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC_RES.msg_type)
  return _internal_msg_type();
}
inline void MSG_RPC_RES::_internal_set_msg_type(int32_t value) {
  
  msg_type_ = value;
}
inline void MSG_RPC_RES::set_msg_type(int32_t value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC_RES.msg_type)
}

// .msgpacket.RESPONSE_CODE res_code = 3;
inline void MSG_RPC_RES::clear_res_code() {
  res_code_ = 0;
}
inline ::msgpacket::RESPONSE_CODE MSG_RPC_RES::_internal_res_code() const {
  return static_cast< ::msgpacket::RESPONSE_CODE >(res_code_);
}
inline ::msgpacket::RESPONSE_CODE MSG_RPC_RES::res_code() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC_RES.res_code)
  return _internal_res_code();
}
inline void MSG_RPC_RES::_internal_set_res_code(::msgpacket::RESPONSE_CODE value) {
  
  res_code_ = value;
}
inline void MSG_RPC_RES::set_res_code(::msgpacket::RESPONSE_CODE value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC_RES.res_code)
}

// bytes msg_bin = 4;
inline void MSG_RPC_RES::clear_msg_bin() {
  msg_bin_.ClearToEmpty();
}
inline const std::string& MSG_RPC_RES::msg_bin() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC_RES.msg_bin)
  return _internal_msg_bin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_RPC_RES::set_msg_bin(ArgT0&& arg0, ArgT... args) {
 
 msg_bin_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC_RES.msg_bin)
}
inline std::string* MSG_RPC_RES::mutable_msg_bin() {
  std::string* _s = _internal_mutable_msg_bin();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_RPC_RES.msg_bin)
  return _s;
}
inline const std::string& MSG_RPC_RES::_internal_msg_bin() const {
  return msg_bin_.Get();
}
inline void MSG_RPC_RES::_internal_set_msg_bin(const std::string& value) {
  
  msg_bin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MSG_RPC_RES::_internal_mutable_msg_bin() {
  
  return msg_bin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MSG_RPC_RES::release_msg_bin() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_RPC_RES.msg_bin)
  return msg_bin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MSG_RPC_RES::set_allocated_msg_bin(std::string* msg_bin) {
  if (msg_bin != nullptr) {
    
  } else {
    
  }
  msg_bin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_bin,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_bin_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_RPC_RES.msg_bin)
}

// int64 timestamp = 5;
inline void MSG_RPC_RES::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t MSG_RPC_RES::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t MSG_RPC_RES::timestamp() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC_RES.timestamp)
  return _internal_timestamp();
}
inline void MSG_RPC_RES::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void MSG_RPC_RES::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC_RES.timestamp)
}

// int64 timestamp_arrive = 6;
inline void MSG_RPC_RES::clear_timestamp_arrive() {
  timestamp_arrive_ = int64_t{0};
}
inline int64_t MSG_RPC_RES::_internal_timestamp_arrive() const {
  return timestamp_arrive_;
}
inline int64_t MSG_RPC_RES::timestamp_arrive() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC_RES.timestamp_arrive)
  return _internal_timestamp_arrive();
}
inline void MSG_RPC_RES::_internal_set_timestamp_arrive(int64_t value) {
  
  timestamp_arrive_ = value;
}
inline void MSG_RPC_RES::set_timestamp_arrive(int64_t value) {
  _internal_set_timestamp_arrive(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC_RES.timestamp_arrive)
}

// int64 timestamp_process = 7;
inline void MSG_RPC_RES::clear_timestamp_process() {
  timestamp_process_ = int64_t{0};
}
inline int64_t MSG_RPC_RES::_internal_timestamp_process() const {
  return timestamp_process_;
}
inline int64_t MSG_RPC_RES::timestamp_process() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_RPC_RES.timestamp_process)
  return _internal_timestamp_process();
}
inline void MSG_RPC_RES::_internal_set_timestamp_process(int64_t value) {
  
  timestamp_process_ = value;
}
inline void MSG_RPC_RES::set_timestamp_process(int64_t value) {
  _internal_set_timestamp_process(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_RPC_RES.timestamp_process)
}

// -------------------------------------------------------------------

// MSG_SRV_REPORT

// int64 srv_id = 1;
inline void MSG_SRV_REPORT::clear_srv_id() {
  srv_id_ = int64_t{0};
}
inline int64_t MSG_SRV_REPORT::_internal_srv_id() const {
  return srv_id_;
}
inline int64_t MSG_SRV_REPORT::srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_SRV_REPORT.srv_id)
  return _internal_srv_id();
}
inline void MSG_SRV_REPORT::_internal_set_srv_id(int64_t value) {
  
  srv_id_ = value;
}
inline void MSG_SRV_REPORT::set_srv_id(int64_t value) {
  _internal_set_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_SRV_REPORT.srv_id)
}

// int64 tcp_conn_id = 2;
inline void MSG_SRV_REPORT::clear_tcp_conn_id() {
  tcp_conn_id_ = int64_t{0};
}
inline int64_t MSG_SRV_REPORT::_internal_tcp_conn_id() const {
  return tcp_conn_id_;
}
inline int64_t MSG_SRV_REPORT::tcp_conn_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_SRV_REPORT.tcp_conn_id)
  return _internal_tcp_conn_id();
}
inline void MSG_SRV_REPORT::_internal_set_tcp_conn_id(int64_t value) {
  
  tcp_conn_id_ = value;
}
inline void MSG_SRV_REPORT::set_tcp_conn_id(int64_t value) {
  _internal_set_tcp_conn_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_SRV_REPORT.tcp_conn_id)
}

// -------------------------------------------------------------------

// MSG_SRV_REPORT_RES

// int64 srv_id = 1;
inline void MSG_SRV_REPORT_RES::clear_srv_id() {
  srv_id_ = int64_t{0};
}
inline int64_t MSG_SRV_REPORT_RES::_internal_srv_id() const {
  return srv_id_;
}
inline int64_t MSG_SRV_REPORT_RES::srv_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_SRV_REPORT_RES.srv_id)
  return _internal_srv_id();
}
inline void MSG_SRV_REPORT_RES::_internal_set_srv_id(int64_t value) {
  
  srv_id_ = value;
}
inline void MSG_SRV_REPORT_RES::set_srv_id(int64_t value) {
  _internal_set_srv_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_SRV_REPORT_RES.srv_id)
}

// int64 tcp_conn_id = 2;
inline void MSG_SRV_REPORT_RES::clear_tcp_conn_id() {
  tcp_conn_id_ = int64_t{0};
}
inline int64_t MSG_SRV_REPORT_RES::_internal_tcp_conn_id() const {
  return tcp_conn_id_;
}
inline int64_t MSG_SRV_REPORT_RES::tcp_conn_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_SRV_REPORT_RES.tcp_conn_id)
  return _internal_tcp_conn_id();
}
inline void MSG_SRV_REPORT_RES::_internal_set_tcp_conn_id(int64_t value) {
  
  tcp_conn_id_ = value;
}
inline void MSG_SRV_REPORT_RES::set_tcp_conn_id(int64_t value) {
  _internal_set_tcp_conn_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_SRV_REPORT_RES.tcp_conn_id)
}

// -------------------------------------------------------------------

// MSG_HEARTBEAT

// int64 id = 1;
inline void MSG_HEARTBEAT::clear_id() {
  id_ = int64_t{0};
}
inline int64_t MSG_HEARTBEAT::_internal_id() const {
  return id_;
}
inline int64_t MSG_HEARTBEAT::id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_HEARTBEAT.id)
  return _internal_id();
}
inline void MSG_HEARTBEAT::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void MSG_HEARTBEAT::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_HEARTBEAT.id)
}

// -------------------------------------------------------------------

// MSG_HEARTBEAT_RES

// int64 id = 1;
inline void MSG_HEARTBEAT_RES::clear_id() {
  id_ = int64_t{0};
}
inline int64_t MSG_HEARTBEAT_RES::_internal_id() const {
  return id_;
}
inline int64_t MSG_HEARTBEAT_RES::id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_HEARTBEAT_RES.id)
  return _internal_id();
}
inline void MSG_HEARTBEAT_RES::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void MSG_HEARTBEAT_RES::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_HEARTBEAT_RES.id)
}

// -------------------------------------------------------------------

// MSG_TEST

// int64 id = 1;
inline void MSG_TEST::clear_id() {
  id_ = int64_t{0};
}
inline int64_t MSG_TEST::_internal_id() const {
  return id_;
}
inline int64_t MSG_TEST::id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST.id)
  return _internal_id();
}
inline void MSG_TEST::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void MSG_TEST::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST.id)
}

// string str = 2;
inline void MSG_TEST::clear_str() {
  str_.ClearToEmpty();
}
inline const std::string& MSG_TEST::str() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_TEST::set_str(ArgT0&& arg0, ArgT... args) {
 
 str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST.str)
}
inline std::string* MSG_TEST::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_TEST.str)
  return _s;
}
inline const std::string& MSG_TEST::_internal_str() const {
  return str_.Get();
}
inline void MSG_TEST::_internal_set_str(const std::string& value) {
  
  str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MSG_TEST::_internal_mutable_str() {
  
  return str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MSG_TEST::release_str() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_TEST.str)
  return str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MSG_TEST::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_TEST.str)
}

// int64 seq = 3;
inline void MSG_TEST::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t MSG_TEST::_internal_seq() const {
  return seq_;
}
inline int64_t MSG_TEST::seq() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST.seq)
  return _internal_seq();
}
inline void MSG_TEST::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void MSG_TEST::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST.seq)
}

// int64 timestamp = 4;
inline void MSG_TEST::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t MSG_TEST::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t MSG_TEST::timestamp() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST.timestamp)
  return _internal_timestamp();
}
inline void MSG_TEST::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void MSG_TEST::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST.timestamp)
}

// int64 timestamp_arrive = 5;
inline void MSG_TEST::clear_timestamp_arrive() {
  timestamp_arrive_ = int64_t{0};
}
inline int64_t MSG_TEST::_internal_timestamp_arrive() const {
  return timestamp_arrive_;
}
inline int64_t MSG_TEST::timestamp_arrive() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST.timestamp_arrive)
  return _internal_timestamp_arrive();
}
inline void MSG_TEST::_internal_set_timestamp_arrive(int64_t value) {
  
  timestamp_arrive_ = value;
}
inline void MSG_TEST::set_timestamp_arrive(int64_t value) {
  _internal_set_timestamp_arrive(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST.timestamp_arrive)
}

// -------------------------------------------------------------------

// MSG_TEST_RES

// int64 id = 1;
inline void MSG_TEST_RES::clear_id() {
  id_ = int64_t{0};
}
inline int64_t MSG_TEST_RES::_internal_id() const {
  return id_;
}
inline int64_t MSG_TEST_RES::id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST_RES.id)
  return _internal_id();
}
inline void MSG_TEST_RES::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void MSG_TEST_RES::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST_RES.id)
}

// string str = 2;
inline void MSG_TEST_RES::clear_str() {
  str_.ClearToEmpty();
}
inline const std::string& MSG_TEST_RES::str() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST_RES.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_TEST_RES::set_str(ArgT0&& arg0, ArgT... args) {
 
 str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST_RES.str)
}
inline std::string* MSG_TEST_RES::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_TEST_RES.str)
  return _s;
}
inline const std::string& MSG_TEST_RES::_internal_str() const {
  return str_.Get();
}
inline void MSG_TEST_RES::_internal_set_str(const std::string& value) {
  
  str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MSG_TEST_RES::_internal_mutable_str() {
  
  return str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MSG_TEST_RES::release_str() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_TEST_RES.str)
  return str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MSG_TEST_RES::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_TEST_RES.str)
}

// int64 seq = 3;
inline void MSG_TEST_RES::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t MSG_TEST_RES::_internal_seq() const {
  return seq_;
}
inline int64_t MSG_TEST_RES::seq() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST_RES.seq)
  return _internal_seq();
}
inline void MSG_TEST_RES::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void MSG_TEST_RES::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST_RES.seq)
}

// int64 timestamp = 4;
inline void MSG_TEST_RES::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t MSG_TEST_RES::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t MSG_TEST_RES::timestamp() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST_RES.timestamp)
  return _internal_timestamp();
}
inline void MSG_TEST_RES::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void MSG_TEST_RES::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST_RES.timestamp)
}

// int64 timestamp_arrive = 5;
inline void MSG_TEST_RES::clear_timestamp_arrive() {
  timestamp_arrive_ = int64_t{0};
}
inline int64_t MSG_TEST_RES::_internal_timestamp_arrive() const {
  return timestamp_arrive_;
}
inline int64_t MSG_TEST_RES::timestamp_arrive() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST_RES.timestamp_arrive)
  return _internal_timestamp_arrive();
}
inline void MSG_TEST_RES::_internal_set_timestamp_arrive(int64_t value) {
  
  timestamp_arrive_ = value;
}
inline void MSG_TEST_RES::set_timestamp_arrive(int64_t value) {
  _internal_set_timestamp_arrive(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST_RES.timestamp_arrive)
}

// int64 timestamp_process = 6;
inline void MSG_TEST_RES::clear_timestamp_process() {
  timestamp_process_ = int64_t{0};
}
inline int64_t MSG_TEST_RES::_internal_timestamp_process() const {
  return timestamp_process_;
}
inline int64_t MSG_TEST_RES::timestamp_process() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST_RES.timestamp_process)
  return _internal_timestamp_process();
}
inline void MSG_TEST_RES::_internal_set_timestamp_process(int64_t value) {
  
  timestamp_process_ = value;
}
inline void MSG_TEST_RES::set_timestamp_process(int64_t value) {
  _internal_set_timestamp_process(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST_RES.timestamp_process)
}

// -------------------------------------------------------------------

// MSG_TEST_RPC

// int64 rpc_count = 1;
inline void MSG_TEST_RPC::clear_rpc_count() {
  rpc_count_ = int64_t{0};
}
inline int64_t MSG_TEST_RPC::_internal_rpc_count() const {
  return rpc_count_;
}
inline int64_t MSG_TEST_RPC::rpc_count() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TEST_RPC.rpc_count)
  return _internal_rpc_count();
}
inline void MSG_TEST_RPC::_internal_set_rpc_count(int64_t value) {
  
  rpc_count_ = value;
}
inline void MSG_TEST_RPC::set_rpc_count(int64_t value) {
  _internal_set_rpc_count(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TEST_RPC.rpc_count)
}

// -------------------------------------------------------------------

// MSG_TEST_RPC_RES

// -------------------------------------------------------------------

// MSG_LOGIN

// int64 id = 1;
inline void MSG_LOGIN::clear_id() {
  id_ = int64_t{0};
}
inline int64_t MSG_LOGIN::_internal_id() const {
  return id_;
}
inline int64_t MSG_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_LOGIN.id)
  return _internal_id();
}
inline void MSG_LOGIN::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void MSG_LOGIN::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_LOGIN.id)
}

// float X = 2;
inline void MSG_LOGIN::clear_x() {
  x_ = 0;
}
inline float MSG_LOGIN::_internal_x() const {
  return x_;
}
inline float MSG_LOGIN::x() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_LOGIN.X)
  return _internal_x();
}
inline void MSG_LOGIN::_internal_set_x(float value) {
  
  x_ = value;
}
inline void MSG_LOGIN::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_LOGIN.X)
}

// float Y = 3;
inline void MSG_LOGIN::clear_y() {
  y_ = 0;
}
inline float MSG_LOGIN::_internal_y() const {
  return y_;
}
inline float MSG_LOGIN::y() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_LOGIN.Y)
  return _internal_y();
}
inline void MSG_LOGIN::_internal_set_y(float value) {
  
  y_ = value;
}
inline void MSG_LOGIN::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_LOGIN.Y)
}

// float view_range = 4;
inline void MSG_LOGIN::clear_view_range() {
  view_range_ = 0;
}
inline float MSG_LOGIN::_internal_view_range() const {
  return view_range_;
}
inline float MSG_LOGIN::view_range() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_LOGIN.view_range)
  return _internal_view_range();
}
inline void MSG_LOGIN::_internal_set_view_range(float value) {
  
  view_range_ = value;
}
inline void MSG_LOGIN::set_view_range(float value) {
  _internal_set_view_range(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_LOGIN.view_range)
}

// -------------------------------------------------------------------

// MSG_LOGIN_RES

// int64 id = 1;
inline void MSG_LOGIN_RES::clear_id() {
  id_ = int64_t{0};
}
inline int64_t MSG_LOGIN_RES::_internal_id() const {
  return id_;
}
inline int64_t MSG_LOGIN_RES::id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_LOGIN_RES.id)
  return _internal_id();
}
inline void MSG_LOGIN_RES::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void MSG_LOGIN_RES::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_LOGIN_RES.id)
}

// int64 connect_id = 2;
inline void MSG_LOGIN_RES::clear_connect_id() {
  connect_id_ = int64_t{0};
}
inline int64_t MSG_LOGIN_RES::_internal_connect_id() const {
  return connect_id_;
}
inline int64_t MSG_LOGIN_RES::connect_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_LOGIN_RES.connect_id)
  return _internal_connect_id();
}
inline void MSG_LOGIN_RES::_internal_set_connect_id(int64_t value) {
  
  connect_id_ = value;
}
inline void MSG_LOGIN_RES::set_connect_id(int64_t value) {
  _internal_set_connect_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_LOGIN_RES.connect_id)
}

// int64 fd = 3;
inline void MSG_LOGIN_RES::clear_fd() {
  fd_ = int64_t{0};
}
inline int64_t MSG_LOGIN_RES::_internal_fd() const {
  return fd_;
}
inline int64_t MSG_LOGIN_RES::fd() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_LOGIN_RES.fd)
  return _internal_fd();
}
inline void MSG_LOGIN_RES::_internal_set_fd(int64_t value) {
  
  fd_ = value;
}
inline void MSG_LOGIN_RES::set_fd(int64_t value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_LOGIN_RES.fd)
}

// int64 obj_id = 4;
inline void MSG_LOGIN_RES::clear_obj_id() {
  obj_id_ = int64_t{0};
}
inline int64_t MSG_LOGIN_RES::_internal_obj_id() const {
  return obj_id_;
}
inline int64_t MSG_LOGIN_RES::obj_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_LOGIN_RES.obj_id)
  return _internal_obj_id();
}
inline void MSG_LOGIN_RES::_internal_set_obj_id(int64_t value) {
  
  obj_id_ = value;
}
inline void MSG_LOGIN_RES::set_obj_id(int64_t value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_LOGIN_RES.obj_id)
}

// -------------------------------------------------------------------

// MSG_TCP_STATIC

// int64 seq = 1;
inline void MSG_TCP_STATIC::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t MSG_TCP_STATIC::_internal_seq() const {
  return seq_;
}
inline int64_t MSG_TCP_STATIC::seq() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TCP_STATIC.seq)
  return _internal_seq();
}
inline void MSG_TCP_STATIC::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void MSG_TCP_STATIC::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TCP_STATIC.seq)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MSG_TCP_STATIC_RES

// int64 packet_count = 1;
inline void MSG_TCP_STATIC_RES::clear_packet_count() {
  packet_count_ = int64_t{0};
}
inline int64_t MSG_TCP_STATIC_RES::_internal_packet_count() const {
  return packet_count_;
}
inline int64_t MSG_TCP_STATIC_RES::packet_count() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TCP_STATIC_RES.packet_count)
  return _internal_packet_count();
}
inline void MSG_TCP_STATIC_RES::_internal_set_packet_count(int64_t value) {
  
  packet_count_ = value;
}
inline void MSG_TCP_STATIC_RES::set_packet_count(int64_t value) {
  _internal_set_packet_count(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TCP_STATIC_RES.packet_count)
}

// int64 byte_recv = 2;
inline void MSG_TCP_STATIC_RES::clear_byte_recv() {
  byte_recv_ = int64_t{0};
}
inline int64_t MSG_TCP_STATIC_RES::_internal_byte_recv() const {
  return byte_recv_;
}
inline int64_t MSG_TCP_STATIC_RES::byte_recv() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TCP_STATIC_RES.byte_recv)
  return _internal_byte_recv();
}
inline void MSG_TCP_STATIC_RES::_internal_set_byte_recv(int64_t value) {
  
  byte_recv_ = value;
}
inline void MSG_TCP_STATIC_RES::set_byte_recv(int64_t value) {
  _internal_set_byte_recv(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TCP_STATIC_RES.byte_recv)
}

// int64 byte_proc = 3;
inline void MSG_TCP_STATIC_RES::clear_byte_proc() {
  byte_proc_ = int64_t{0};
}
inline int64_t MSG_TCP_STATIC_RES::_internal_byte_proc() const {
  return byte_proc_;
}
inline int64_t MSG_TCP_STATIC_RES::byte_proc() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TCP_STATIC_RES.byte_proc)
  return _internal_byte_proc();
}
inline void MSG_TCP_STATIC_RES::_internal_set_byte_proc(int64_t value) {
  
  byte_proc_ = value;
}
inline void MSG_TCP_STATIC_RES::set_byte_proc(int64_t value) {
  _internal_set_byte_proc(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TCP_STATIC_RES.byte_proc)
}

// int64 byte_send = 4;
inline void MSG_TCP_STATIC_RES::clear_byte_send() {
  byte_send_ = int64_t{0};
}
inline int64_t MSG_TCP_STATIC_RES::_internal_byte_send() const {
  return byte_send_;
}
inline int64_t MSG_TCP_STATIC_RES::byte_send() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_TCP_STATIC_RES.byte_send)
  return _internal_byte_send();
}
inline void MSG_TCP_STATIC_RES::_internal_set_byte_send(int64_t value) {
  
  byte_send_ = value;
}
inline void MSG_TCP_STATIC_RES::set_byte_send(int64_t value) {
  _internal_set_byte_send(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_TCP_STATIC_RES.byte_send)
}

// map<int32, int64> map_static_msg_recv = 5;
inline int MSG_TCP_STATIC_RES::_internal_map_static_msg_recv_size() const {
  return map_static_msg_recv_.size();
}
inline int MSG_TCP_STATIC_RES::map_static_msg_recv_size() const {
  return _internal_map_static_msg_recv_size();
}
inline void MSG_TCP_STATIC_RES::clear_map_static_msg_recv() {
  map_static_msg_recv_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >&
MSG_TCP_STATIC_RES::_internal_map_static_msg_recv() const {
  return map_static_msg_recv_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >&
MSG_TCP_STATIC_RES::map_static_msg_recv() const {
  // @@protoc_insertion_point(field_map:msgpacket.MSG_TCP_STATIC_RES.map_static_msg_recv)
  return _internal_map_static_msg_recv();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >*
MSG_TCP_STATIC_RES::_internal_mutable_map_static_msg_recv() {
  return map_static_msg_recv_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int64_t >*
MSG_TCP_STATIC_RES::mutable_map_static_msg_recv() {
  // @@protoc_insertion_point(field_mutable_map:msgpacket.MSG_TCP_STATIC_RES.map_static_msg_recv)
  return _internal_mutable_map_static_msg_recv();
}

// -------------------------------------------------------------------

// MSG_CLIENT_ENTER

// int64 client_id = 1;
inline void MSG_CLIENT_ENTER::clear_client_id() {
  client_id_ = int64_t{0};
}
inline int64_t MSG_CLIENT_ENTER::_internal_client_id() const {
  return client_id_;
}
inline int64_t MSG_CLIENT_ENTER::client_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_CLIENT_ENTER.client_id)
  return _internal_client_id();
}
inline void MSG_CLIENT_ENTER::_internal_set_client_id(int64_t value) {
  
  client_id_ = value;
}
inline void MSG_CLIENT_ENTER::set_client_id(int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_CLIENT_ENTER.client_id)
}

// -------------------------------------------------------------------

// MSG_CLIENT_ENTER_RES

// int64 client_id = 1;
inline void MSG_CLIENT_ENTER_RES::clear_client_id() {
  client_id_ = int64_t{0};
}
inline int64_t MSG_CLIENT_ENTER_RES::_internal_client_id() const {
  return client_id_;
}
inline int64_t MSG_CLIENT_ENTER_RES::client_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_CLIENT_ENTER_RES.client_id)
  return _internal_client_id();
}
inline void MSG_CLIENT_ENTER_RES::_internal_set_client_id(int64_t value) {
  
  client_id_ = value;
}
inline void MSG_CLIENT_ENTER_RES::set_client_id(int64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_CLIENT_ENTER_RES.client_id)
}

// .msgpacket.RESPONSE_CODE res = 2;
inline void MSG_CLIENT_ENTER_RES::clear_res() {
  res_ = 0;
}
inline ::msgpacket::RESPONSE_CODE MSG_CLIENT_ENTER_RES::_internal_res() const {
  return static_cast< ::msgpacket::RESPONSE_CODE >(res_);
}
inline ::msgpacket::RESPONSE_CODE MSG_CLIENT_ENTER_RES::res() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_CLIENT_ENTER_RES.res)
  return _internal_res();
}
inline void MSG_CLIENT_ENTER_RES::_internal_set_res(::msgpacket::RESPONSE_CODE value) {
  
  res_ = value;
}
inline void MSG_CLIENT_ENTER_RES::set_res(::msgpacket::RESPONSE_CODE value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_CLIENT_ENTER_RES.res)
}

// string redirect_ip = 4;
inline void MSG_CLIENT_ENTER_RES::clear_redirect_ip() {
  redirect_ip_.ClearToEmpty();
}
inline const std::string& MSG_CLIENT_ENTER_RES::redirect_ip() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_CLIENT_ENTER_RES.redirect_ip)
  return _internal_redirect_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_CLIENT_ENTER_RES::set_redirect_ip(ArgT0&& arg0, ArgT... args) {
 
 redirect_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.MSG_CLIENT_ENTER_RES.redirect_ip)
}
inline std::string* MSG_CLIENT_ENTER_RES::mutable_redirect_ip() {
  std::string* _s = _internal_mutable_redirect_ip();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_CLIENT_ENTER_RES.redirect_ip)
  return _s;
}
inline const std::string& MSG_CLIENT_ENTER_RES::_internal_redirect_ip() const {
  return redirect_ip_.Get();
}
inline void MSG_CLIENT_ENTER_RES::_internal_set_redirect_ip(const std::string& value) {
  
  redirect_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MSG_CLIENT_ENTER_RES::_internal_mutable_redirect_ip() {
  
  return redirect_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MSG_CLIENT_ENTER_RES::release_redirect_ip() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_CLIENT_ENTER_RES.redirect_ip)
  return redirect_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MSG_CLIENT_ENTER_RES::set_allocated_redirect_ip(std::string* redirect_ip) {
  if (redirect_ip != nullptr) {
    
  } else {
    
  }
  redirect_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (redirect_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    redirect_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_CLIENT_ENTER_RES.redirect_ip)
}

// int32 redirect_port = 5;
inline void MSG_CLIENT_ENTER_RES::clear_redirect_port() {
  redirect_port_ = 0;
}
inline int32_t MSG_CLIENT_ENTER_RES::_internal_redirect_port() const {
  return redirect_port_;
}
inline int32_t MSG_CLIENT_ENTER_RES::redirect_port() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_CLIENT_ENTER_RES.redirect_port)
  return _internal_redirect_port();
}
inline void MSG_CLIENT_ENTER_RES::_internal_set_redirect_port(int32_t value) {
  
  redirect_port_ = value;
}
inline void MSG_CLIENT_ENTER_RES::set_redirect_port(int32_t value) {
  _internal_set_redirect_port(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_CLIENT_ENTER_RES.redirect_port)
}

// -------------------------------------------------------------------

// MSG_GET_MAP

// -------------------------------------------------------------------

// MSG_GET_MAP_RES

// int32 map_wid = 1;
inline void MSG_GET_MAP_RES::clear_map_wid() {
  map_wid_ = 0;
}
inline int32_t MSG_GET_MAP_RES::_internal_map_wid() const {
  return map_wid_;
}
inline int32_t MSG_GET_MAP_RES::map_wid() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_GET_MAP_RES.map_wid)
  return _internal_map_wid();
}
inline void MSG_GET_MAP_RES::_internal_set_map_wid(int32_t value) {
  
  map_wid_ = value;
}
inline void MSG_GET_MAP_RES::set_map_wid(int32_t value) {
  _internal_set_map_wid(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_GET_MAP_RES.map_wid)
}

// int32 map_high = 2;
inline void MSG_GET_MAP_RES::clear_map_high() {
  map_high_ = 0;
}
inline int32_t MSG_GET_MAP_RES::_internal_map_high() const {
  return map_high_;
}
inline int32_t MSG_GET_MAP_RES::map_high() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_GET_MAP_RES.map_high)
  return _internal_map_high();
}
inline void MSG_GET_MAP_RES::_internal_set_map_high(int32_t value) {
  
  map_high_ = value;
}
inline void MSG_GET_MAP_RES::set_map_high(int32_t value) {
  _internal_set_map_high(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_GET_MAP_RES.map_high)
}

// int32 map_pitch = 3;
inline void MSG_GET_MAP_RES::clear_map_pitch() {
  map_pitch_ = 0;
}
inline int32_t MSG_GET_MAP_RES::_internal_map_pitch() const {
  return map_pitch_;
}
inline int32_t MSG_GET_MAP_RES::map_pitch() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_GET_MAP_RES.map_pitch)
  return _internal_map_pitch();
}
inline void MSG_GET_MAP_RES::_internal_set_map_pitch(int32_t value) {
  
  map_pitch_ = value;
}
inline void MSG_GET_MAP_RES::set_map_pitch(int32_t value) {
  _internal_set_map_pitch(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_GET_MAP_RES.map_pitch)
}

// bytes map_data = 4;
inline void MSG_GET_MAP_RES::clear_map_data() {
  map_data_.ClearToEmpty();
}
inline const std::string& MSG_GET_MAP_RES::map_data() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_GET_MAP_RES.map_data)
  return _internal_map_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MSG_GET_MAP_RES::set_map_data(ArgT0&& arg0, ArgT... args) {
 
 map_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msgpacket.MSG_GET_MAP_RES.map_data)
}
inline std::string* MSG_GET_MAP_RES::mutable_map_data() {
  std::string* _s = _internal_mutable_map_data();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_GET_MAP_RES.map_data)
  return _s;
}
inline const std::string& MSG_GET_MAP_RES::_internal_map_data() const {
  return map_data_.Get();
}
inline void MSG_GET_MAP_RES::_internal_set_map_data(const std::string& value) {
  
  map_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MSG_GET_MAP_RES::_internal_mutable_map_data() {
  
  return map_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MSG_GET_MAP_RES::release_map_data() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_GET_MAP_RES.map_data)
  return map_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MSG_GET_MAP_RES::set_allocated_map_data(std::string* map_data) {
  if (map_data != nullptr) {
    
  } else {
    
  }
  map_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    map_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_GET_MAP_RES.map_data)
}

// -------------------------------------------------------------------

// MSG_PATH_SEARCH

// .msgpacket.POS_T pos_src = 1;
inline bool MSG_PATH_SEARCH::_internal_has_pos_src() const {
  return this != internal_default_instance() && pos_src_ != nullptr;
}
inline bool MSG_PATH_SEARCH::has_pos_src() const {
  return _internal_has_pos_src();
}
inline void MSG_PATH_SEARCH::clear_pos_src() {
  if (GetArenaForAllocation() == nullptr && pos_src_ != nullptr) {
    delete pos_src_;
  }
  pos_src_ = nullptr;
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH::_internal_pos_src() const {
  const ::msgpacket::POS_T* p = pos_src_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::POS_T&>(
      ::msgpacket::_POS_T_default_instance_);
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH::pos_src() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_PATH_SEARCH.pos_src)
  return _internal_pos_src();
}
inline void MSG_PATH_SEARCH::unsafe_arena_set_allocated_pos_src(
    ::msgpacket::POS_T* pos_src) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_src_);
  }
  pos_src_ = pos_src;
  if (pos_src) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.MSG_PATH_SEARCH.pos_src)
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH::release_pos_src() {
  
  ::msgpacket::POS_T* temp = pos_src_;
  pos_src_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH::unsafe_arena_release_pos_src() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_PATH_SEARCH.pos_src)
  
  ::msgpacket::POS_T* temp = pos_src_;
  pos_src_ = nullptr;
  return temp;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH::_internal_mutable_pos_src() {
  
  if (pos_src_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::POS_T>(GetArenaForAllocation());
    pos_src_ = p;
  }
  return pos_src_;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH::mutable_pos_src() {
  ::msgpacket::POS_T* _msg = _internal_mutable_pos_src();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_PATH_SEARCH.pos_src)
  return _msg;
}
inline void MSG_PATH_SEARCH::set_allocated_pos_src(::msgpacket::POS_T* pos_src) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_src_;
  }
  if (pos_src) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::POS_T>::GetOwningArena(pos_src);
    if (message_arena != submessage_arena) {
      pos_src = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_src, submessage_arena);
    }
    
  } else {
    
  }
  pos_src_ = pos_src;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_PATH_SEARCH.pos_src)
}

// .msgpacket.POS_T pos_dst = 2;
inline bool MSG_PATH_SEARCH::_internal_has_pos_dst() const {
  return this != internal_default_instance() && pos_dst_ != nullptr;
}
inline bool MSG_PATH_SEARCH::has_pos_dst() const {
  return _internal_has_pos_dst();
}
inline void MSG_PATH_SEARCH::clear_pos_dst() {
  if (GetArenaForAllocation() == nullptr && pos_dst_ != nullptr) {
    delete pos_dst_;
  }
  pos_dst_ = nullptr;
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH::_internal_pos_dst() const {
  const ::msgpacket::POS_T* p = pos_dst_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::POS_T&>(
      ::msgpacket::_POS_T_default_instance_);
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH::pos_dst() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_PATH_SEARCH.pos_dst)
  return _internal_pos_dst();
}
inline void MSG_PATH_SEARCH::unsafe_arena_set_allocated_pos_dst(
    ::msgpacket::POS_T* pos_dst) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_dst_);
  }
  pos_dst_ = pos_dst;
  if (pos_dst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.MSG_PATH_SEARCH.pos_dst)
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH::release_pos_dst() {
  
  ::msgpacket::POS_T* temp = pos_dst_;
  pos_dst_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH::unsafe_arena_release_pos_dst() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_PATH_SEARCH.pos_dst)
  
  ::msgpacket::POS_T* temp = pos_dst_;
  pos_dst_ = nullptr;
  return temp;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH::_internal_mutable_pos_dst() {
  
  if (pos_dst_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::POS_T>(GetArenaForAllocation());
    pos_dst_ = p;
  }
  return pos_dst_;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH::mutable_pos_dst() {
  ::msgpacket::POS_T* _msg = _internal_mutable_pos_dst();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_PATH_SEARCH.pos_dst)
  return _msg;
}
inline void MSG_PATH_SEARCH::set_allocated_pos_dst(::msgpacket::POS_T* pos_dst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_dst_;
  }
  if (pos_dst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::POS_T>::GetOwningArena(pos_dst);
    if (message_arena != submessage_arena) {
      pos_dst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_dst, submessage_arena);
    }
    
  } else {
    
  }
  pos_dst_ = pos_dst;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_PATH_SEARCH.pos_dst)
}

// -------------------------------------------------------------------

// MSG_PATH_SEARCH_RES

// .msgpacket.POS_T pos_src = 1;
inline bool MSG_PATH_SEARCH_RES::_internal_has_pos_src() const {
  return this != internal_default_instance() && pos_src_ != nullptr;
}
inline bool MSG_PATH_SEARCH_RES::has_pos_src() const {
  return _internal_has_pos_src();
}
inline void MSG_PATH_SEARCH_RES::clear_pos_src() {
  if (GetArenaForAllocation() == nullptr && pos_src_ != nullptr) {
    delete pos_src_;
  }
  pos_src_ = nullptr;
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH_RES::_internal_pos_src() const {
  const ::msgpacket::POS_T* p = pos_src_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::POS_T&>(
      ::msgpacket::_POS_T_default_instance_);
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH_RES::pos_src() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_PATH_SEARCH_RES.pos_src)
  return _internal_pos_src();
}
inline void MSG_PATH_SEARCH_RES::unsafe_arena_set_allocated_pos_src(
    ::msgpacket::POS_T* pos_src) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_src_);
  }
  pos_src_ = pos_src;
  if (pos_src) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.MSG_PATH_SEARCH_RES.pos_src)
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::release_pos_src() {
  
  ::msgpacket::POS_T* temp = pos_src_;
  pos_src_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::unsafe_arena_release_pos_src() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_PATH_SEARCH_RES.pos_src)
  
  ::msgpacket::POS_T* temp = pos_src_;
  pos_src_ = nullptr;
  return temp;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::_internal_mutable_pos_src() {
  
  if (pos_src_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::POS_T>(GetArenaForAllocation());
    pos_src_ = p;
  }
  return pos_src_;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::mutable_pos_src() {
  ::msgpacket::POS_T* _msg = _internal_mutable_pos_src();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_PATH_SEARCH_RES.pos_src)
  return _msg;
}
inline void MSG_PATH_SEARCH_RES::set_allocated_pos_src(::msgpacket::POS_T* pos_src) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_src_;
  }
  if (pos_src) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::POS_T>::GetOwningArena(pos_src);
    if (message_arena != submessage_arena) {
      pos_src = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_src, submessage_arena);
    }
    
  } else {
    
  }
  pos_src_ = pos_src;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_PATH_SEARCH_RES.pos_src)
}

// .msgpacket.POS_T pos_dst = 2;
inline bool MSG_PATH_SEARCH_RES::_internal_has_pos_dst() const {
  return this != internal_default_instance() && pos_dst_ != nullptr;
}
inline bool MSG_PATH_SEARCH_RES::has_pos_dst() const {
  return _internal_has_pos_dst();
}
inline void MSG_PATH_SEARCH_RES::clear_pos_dst() {
  if (GetArenaForAllocation() == nullptr && pos_dst_ != nullptr) {
    delete pos_dst_;
  }
  pos_dst_ = nullptr;
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH_RES::_internal_pos_dst() const {
  const ::msgpacket::POS_T* p = pos_dst_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::POS_T&>(
      ::msgpacket::_POS_T_default_instance_);
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH_RES::pos_dst() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_PATH_SEARCH_RES.pos_dst)
  return _internal_pos_dst();
}
inline void MSG_PATH_SEARCH_RES::unsafe_arena_set_allocated_pos_dst(
    ::msgpacket::POS_T* pos_dst) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_dst_);
  }
  pos_dst_ = pos_dst;
  if (pos_dst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.MSG_PATH_SEARCH_RES.pos_dst)
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::release_pos_dst() {
  
  ::msgpacket::POS_T* temp = pos_dst_;
  pos_dst_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::unsafe_arena_release_pos_dst() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_PATH_SEARCH_RES.pos_dst)
  
  ::msgpacket::POS_T* temp = pos_dst_;
  pos_dst_ = nullptr;
  return temp;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::_internal_mutable_pos_dst() {
  
  if (pos_dst_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::POS_T>(GetArenaForAllocation());
    pos_dst_ = p;
  }
  return pos_dst_;
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::mutable_pos_dst() {
  ::msgpacket::POS_T* _msg = _internal_mutable_pos_dst();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_PATH_SEARCH_RES.pos_dst)
  return _msg;
}
inline void MSG_PATH_SEARCH_RES::set_allocated_pos_dst(::msgpacket::POS_T* pos_dst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_dst_;
  }
  if (pos_dst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::POS_T>::GetOwningArena(pos_dst);
    if (message_arena != submessage_arena) {
      pos_dst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_dst, submessage_arena);
    }
    
  } else {
    
  }
  pos_dst_ = pos_dst;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_PATH_SEARCH_RES.pos_dst)
}

// repeated .msgpacket.POS_T path_pos = 3;
inline int MSG_PATH_SEARCH_RES::_internal_path_pos_size() const {
  return path_pos_.size();
}
inline int MSG_PATH_SEARCH_RES::path_pos_size() const {
  return _internal_path_pos_size();
}
inline void MSG_PATH_SEARCH_RES::clear_path_pos() {
  path_pos_.Clear();
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::mutable_path_pos(int index) {
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_PATH_SEARCH_RES.path_pos)
  return path_pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::POS_T >*
MSG_PATH_SEARCH_RES::mutable_path_pos() {
  // @@protoc_insertion_point(field_mutable_list:msgpacket.MSG_PATH_SEARCH_RES.path_pos)
  return &path_pos_;
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH_RES::_internal_path_pos(int index) const {
  return path_pos_.Get(index);
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH_RES::path_pos(int index) const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_PATH_SEARCH_RES.path_pos)
  return _internal_path_pos(index);
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::_internal_add_path_pos() {
  return path_pos_.Add();
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::add_path_pos() {
  ::msgpacket::POS_T* _add = _internal_add_path_pos();
  // @@protoc_insertion_point(field_add:msgpacket.MSG_PATH_SEARCH_RES.path_pos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::POS_T >&
MSG_PATH_SEARCH_RES::path_pos() const {
  // @@protoc_insertion_point(field_list:msgpacket.MSG_PATH_SEARCH_RES.path_pos)
  return path_pos_;
}

// repeated .msgpacket.POS_T path_key_pos = 4;
inline int MSG_PATH_SEARCH_RES::_internal_path_key_pos_size() const {
  return path_key_pos_.size();
}
inline int MSG_PATH_SEARCH_RES::path_key_pos_size() const {
  return _internal_path_key_pos_size();
}
inline void MSG_PATH_SEARCH_RES::clear_path_key_pos() {
  path_key_pos_.Clear();
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::mutable_path_key_pos(int index) {
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_PATH_SEARCH_RES.path_key_pos)
  return path_key_pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::POS_T >*
MSG_PATH_SEARCH_RES::mutable_path_key_pos() {
  // @@protoc_insertion_point(field_mutable_list:msgpacket.MSG_PATH_SEARCH_RES.path_key_pos)
  return &path_key_pos_;
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH_RES::_internal_path_key_pos(int index) const {
  return path_key_pos_.Get(index);
}
inline const ::msgpacket::POS_T& MSG_PATH_SEARCH_RES::path_key_pos(int index) const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_PATH_SEARCH_RES.path_key_pos)
  return _internal_path_key_pos(index);
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::_internal_add_path_key_pos() {
  return path_key_pos_.Add();
}
inline ::msgpacket::POS_T* MSG_PATH_SEARCH_RES::add_path_key_pos() {
  ::msgpacket::POS_T* _add = _internal_add_path_key_pos();
  // @@protoc_insertion_point(field_add:msgpacket.MSG_PATH_SEARCH_RES.path_key_pos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::POS_T >&
MSG_PATH_SEARCH_RES::path_key_pos() const {
  // @@protoc_insertion_point(field_list:msgpacket.MSG_PATH_SEARCH_RES.path_key_pos)
  return path_key_pos_;
}

// -------------------------------------------------------------------

// MSG_NAV_SEARCH

// .msgpacket.PROTO_VEC_3F pos_src = 1;
inline bool MSG_NAV_SEARCH::_internal_has_pos_src() const {
  return this != internal_default_instance() && pos_src_ != nullptr;
}
inline bool MSG_NAV_SEARCH::has_pos_src() const {
  return _internal_has_pos_src();
}
inline void MSG_NAV_SEARCH::clear_pos_src() {
  if (GetArenaForAllocation() == nullptr && pos_src_ != nullptr) {
    delete pos_src_;
  }
  pos_src_ = nullptr;
}
inline const ::msgpacket::PROTO_VEC_3F& MSG_NAV_SEARCH::_internal_pos_src() const {
  const ::msgpacket::PROTO_VEC_3F* p = pos_src_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PROTO_VEC_3F&>(
      ::msgpacket::_PROTO_VEC_3F_default_instance_);
}
inline const ::msgpacket::PROTO_VEC_3F& MSG_NAV_SEARCH::pos_src() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_NAV_SEARCH.pos_src)
  return _internal_pos_src();
}
inline void MSG_NAV_SEARCH::unsafe_arena_set_allocated_pos_src(
    ::msgpacket::PROTO_VEC_3F* pos_src) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_src_);
  }
  pos_src_ = pos_src;
  if (pos_src) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.MSG_NAV_SEARCH.pos_src)
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH::release_pos_src() {
  
  ::msgpacket::PROTO_VEC_3F* temp = pos_src_;
  pos_src_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH::unsafe_arena_release_pos_src() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_NAV_SEARCH.pos_src)
  
  ::msgpacket::PROTO_VEC_3F* temp = pos_src_;
  pos_src_ = nullptr;
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH::_internal_mutable_pos_src() {
  
  if (pos_src_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PROTO_VEC_3F>(GetArenaForAllocation());
    pos_src_ = p;
  }
  return pos_src_;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH::mutable_pos_src() {
  ::msgpacket::PROTO_VEC_3F* _msg = _internal_mutable_pos_src();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_NAV_SEARCH.pos_src)
  return _msg;
}
inline void MSG_NAV_SEARCH::set_allocated_pos_src(::msgpacket::PROTO_VEC_3F* pos_src) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_src_;
  }
  if (pos_src) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PROTO_VEC_3F>::GetOwningArena(pos_src);
    if (message_arena != submessage_arena) {
      pos_src = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_src, submessage_arena);
    }
    
  } else {
    
  }
  pos_src_ = pos_src;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_NAV_SEARCH.pos_src)
}

// .msgpacket.PROTO_VEC_3F pos_dst = 2;
inline bool MSG_NAV_SEARCH::_internal_has_pos_dst() const {
  return this != internal_default_instance() && pos_dst_ != nullptr;
}
inline bool MSG_NAV_SEARCH::has_pos_dst() const {
  return _internal_has_pos_dst();
}
inline void MSG_NAV_SEARCH::clear_pos_dst() {
  if (GetArenaForAllocation() == nullptr && pos_dst_ != nullptr) {
    delete pos_dst_;
  }
  pos_dst_ = nullptr;
}
inline const ::msgpacket::PROTO_VEC_3F& MSG_NAV_SEARCH::_internal_pos_dst() const {
  const ::msgpacket::PROTO_VEC_3F* p = pos_dst_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PROTO_VEC_3F&>(
      ::msgpacket::_PROTO_VEC_3F_default_instance_);
}
inline const ::msgpacket::PROTO_VEC_3F& MSG_NAV_SEARCH::pos_dst() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_NAV_SEARCH.pos_dst)
  return _internal_pos_dst();
}
inline void MSG_NAV_SEARCH::unsafe_arena_set_allocated_pos_dst(
    ::msgpacket::PROTO_VEC_3F* pos_dst) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_dst_);
  }
  pos_dst_ = pos_dst;
  if (pos_dst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.MSG_NAV_SEARCH.pos_dst)
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH::release_pos_dst() {
  
  ::msgpacket::PROTO_VEC_3F* temp = pos_dst_;
  pos_dst_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH::unsafe_arena_release_pos_dst() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_NAV_SEARCH.pos_dst)
  
  ::msgpacket::PROTO_VEC_3F* temp = pos_dst_;
  pos_dst_ = nullptr;
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH::_internal_mutable_pos_dst() {
  
  if (pos_dst_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PROTO_VEC_3F>(GetArenaForAllocation());
    pos_dst_ = p;
  }
  return pos_dst_;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH::mutable_pos_dst() {
  ::msgpacket::PROTO_VEC_3F* _msg = _internal_mutable_pos_dst();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_NAV_SEARCH.pos_dst)
  return _msg;
}
inline void MSG_NAV_SEARCH::set_allocated_pos_dst(::msgpacket::PROTO_VEC_3F* pos_dst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_dst_;
  }
  if (pos_dst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PROTO_VEC_3F>::GetOwningArena(pos_dst);
    if (message_arena != submessage_arena) {
      pos_dst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_dst, submessage_arena);
    }
    
  } else {
    
  }
  pos_dst_ = pos_dst;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_NAV_SEARCH.pos_dst)
}

// -------------------------------------------------------------------

// MSG_NAV_SEARCH_RES

// repeated .msgpacket.PROTO_VEC_3F path_pos = 1;
inline int MSG_NAV_SEARCH_RES::_internal_path_pos_size() const {
  return path_pos_.size();
}
inline int MSG_NAV_SEARCH_RES::path_pos_size() const {
  return _internal_path_pos_size();
}
inline void MSG_NAV_SEARCH_RES::clear_path_pos() {
  path_pos_.Clear();
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH_RES::mutable_path_pos(int index) {
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_NAV_SEARCH_RES.path_pos)
  return path_pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PROTO_VEC_3F >*
MSG_NAV_SEARCH_RES::mutable_path_pos() {
  // @@protoc_insertion_point(field_mutable_list:msgpacket.MSG_NAV_SEARCH_RES.path_pos)
  return &path_pos_;
}
inline const ::msgpacket::PROTO_VEC_3F& MSG_NAV_SEARCH_RES::_internal_path_pos(int index) const {
  return path_pos_.Get(index);
}
inline const ::msgpacket::PROTO_VEC_3F& MSG_NAV_SEARCH_RES::path_pos(int index) const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_NAV_SEARCH_RES.path_pos)
  return _internal_path_pos(index);
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH_RES::_internal_add_path_pos() {
  return path_pos_.Add();
}
inline ::msgpacket::PROTO_VEC_3F* MSG_NAV_SEARCH_RES::add_path_pos() {
  ::msgpacket::PROTO_VEC_3F* _add = _internal_add_path_pos();
  // @@protoc_insertion_point(field_add:msgpacket.MSG_NAV_SEARCH_RES.path_pos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::PROTO_VEC_3F >&
MSG_NAV_SEARCH_RES::path_pos() const {
  // @@protoc_insertion_point(field_list:msgpacket.MSG_NAV_SEARCH_RES.path_pos)
  return path_pos_;
}

// -------------------------------------------------------------------

// NAV_OBSTACLE

// uint32 obstacle_id = 1;
inline void NAV_OBSTACLE::clear_obstacle_id() {
  obstacle_id_ = 0u;
}
inline uint32_t NAV_OBSTACLE::_internal_obstacle_id() const {
  return obstacle_id_;
}
inline uint32_t NAV_OBSTACLE::obstacle_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.NAV_OBSTACLE.obstacle_id)
  return _internal_obstacle_id();
}
inline void NAV_OBSTACLE::_internal_set_obstacle_id(uint32_t value) {
  
  obstacle_id_ = value;
}
inline void NAV_OBSTACLE::set_obstacle_id(uint32_t value) {
  _internal_set_obstacle_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.NAV_OBSTACLE.obstacle_id)
}

// .msgpacket.PROTO_VEC_3F center = 2;
inline bool NAV_OBSTACLE::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool NAV_OBSTACLE::has_center() const {
  return _internal_has_center();
}
inline void NAV_OBSTACLE::clear_center() {
  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::msgpacket::PROTO_VEC_3F& NAV_OBSTACLE::_internal_center() const {
  const ::msgpacket::PROTO_VEC_3F* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PROTO_VEC_3F&>(
      ::msgpacket::_PROTO_VEC_3F_default_instance_);
}
inline const ::msgpacket::PROTO_VEC_3F& NAV_OBSTACLE::center() const {
  // @@protoc_insertion_point(field_get:msgpacket.NAV_OBSTACLE.center)
  return _internal_center();
}
inline void NAV_OBSTACLE::unsafe_arena_set_allocated_center(
    ::msgpacket::PROTO_VEC_3F* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.NAV_OBSTACLE.center)
}
inline ::msgpacket::PROTO_VEC_3F* NAV_OBSTACLE::release_center() {
  
  ::msgpacket::PROTO_VEC_3F* temp = center_;
  center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* NAV_OBSTACLE::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:msgpacket.NAV_OBSTACLE.center)
  
  ::msgpacket::PROTO_VEC_3F* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* NAV_OBSTACLE::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PROTO_VEC_3F>(GetArenaForAllocation());
    center_ = p;
  }
  return center_;
}
inline ::msgpacket::PROTO_VEC_3F* NAV_OBSTACLE::mutable_center() {
  ::msgpacket::PROTO_VEC_3F* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:msgpacket.NAV_OBSTACLE.center)
  return _msg;
}
inline void NAV_OBSTACLE::set_allocated_center(::msgpacket::PROTO_VEC_3F* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PROTO_VEC_3F>::GetOwningArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.NAV_OBSTACLE.center)
}

// .msgpacket.PROTO_VEC_3F half_ext = 3;
inline bool NAV_OBSTACLE::_internal_has_half_ext() const {
  return this != internal_default_instance() && half_ext_ != nullptr;
}
inline bool NAV_OBSTACLE::has_half_ext() const {
  return _internal_has_half_ext();
}
inline void NAV_OBSTACLE::clear_half_ext() {
  if (GetArenaForAllocation() == nullptr && half_ext_ != nullptr) {
    delete half_ext_;
  }
  half_ext_ = nullptr;
}
inline const ::msgpacket::PROTO_VEC_3F& NAV_OBSTACLE::_internal_half_ext() const {
  const ::msgpacket::PROTO_VEC_3F* p = half_ext_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PROTO_VEC_3F&>(
      ::msgpacket::_PROTO_VEC_3F_default_instance_);
}
inline const ::msgpacket::PROTO_VEC_3F& NAV_OBSTACLE::half_ext() const {
  // @@protoc_insertion_point(field_get:msgpacket.NAV_OBSTACLE.half_ext)
  return _internal_half_ext();
}
inline void NAV_OBSTACLE::unsafe_arena_set_allocated_half_ext(
    ::msgpacket::PROTO_VEC_3F* half_ext) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(half_ext_);
  }
  half_ext_ = half_ext;
  if (half_ext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.NAV_OBSTACLE.half_ext)
}
inline ::msgpacket::PROTO_VEC_3F* NAV_OBSTACLE::release_half_ext() {
  
  ::msgpacket::PROTO_VEC_3F* temp = half_ext_;
  half_ext_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* NAV_OBSTACLE::unsafe_arena_release_half_ext() {
  // @@protoc_insertion_point(field_release:msgpacket.NAV_OBSTACLE.half_ext)
  
  ::msgpacket::PROTO_VEC_3F* temp = half_ext_;
  half_ext_ = nullptr;
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* NAV_OBSTACLE::_internal_mutable_half_ext() {
  
  if (half_ext_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PROTO_VEC_3F>(GetArenaForAllocation());
    half_ext_ = p;
  }
  return half_ext_;
}
inline ::msgpacket::PROTO_VEC_3F* NAV_OBSTACLE::mutable_half_ext() {
  ::msgpacket::PROTO_VEC_3F* _msg = _internal_mutable_half_ext();
  // @@protoc_insertion_point(field_mutable:msgpacket.NAV_OBSTACLE.half_ext)
  return _msg;
}
inline void NAV_OBSTACLE::set_allocated_half_ext(::msgpacket::PROTO_VEC_3F* half_ext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete half_ext_;
  }
  if (half_ext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PROTO_VEC_3F>::GetOwningArena(half_ext);
    if (message_arena != submessage_arena) {
      half_ext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, half_ext, submessage_arena);
    }
    
  } else {
    
  }
  half_ext_ = half_ext;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.NAV_OBSTACLE.half_ext)
}

// float y_radian = 4;
inline void NAV_OBSTACLE::clear_y_radian() {
  y_radian_ = 0;
}
inline float NAV_OBSTACLE::_internal_y_radian() const {
  return y_radian_;
}
inline float NAV_OBSTACLE::y_radian() const {
  // @@protoc_insertion_point(field_get:msgpacket.NAV_OBSTACLE.y_radian)
  return _internal_y_radian();
}
inline void NAV_OBSTACLE::_internal_set_y_radian(float value) {
  
  y_radian_ = value;
}
inline void NAV_OBSTACLE::set_y_radian(float value) {
  _internal_set_y_radian(value);
  // @@protoc_insertion_point(field_set:msgpacket.NAV_OBSTACLE.y_radian)
}

// -------------------------------------------------------------------

// MSG_NAV_ADD_OBSTACLE

// .msgpacket.NAV_OBSTACLE obstacle = 1;
inline bool MSG_NAV_ADD_OBSTACLE::_internal_has_obstacle() const {
  return this != internal_default_instance() && obstacle_ != nullptr;
}
inline bool MSG_NAV_ADD_OBSTACLE::has_obstacle() const {
  return _internal_has_obstacle();
}
inline void MSG_NAV_ADD_OBSTACLE::clear_obstacle() {
  if (GetArenaForAllocation() == nullptr && obstacle_ != nullptr) {
    delete obstacle_;
  }
  obstacle_ = nullptr;
}
inline const ::msgpacket::NAV_OBSTACLE& MSG_NAV_ADD_OBSTACLE::_internal_obstacle() const {
  const ::msgpacket::NAV_OBSTACLE* p = obstacle_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::NAV_OBSTACLE&>(
      ::msgpacket::_NAV_OBSTACLE_default_instance_);
}
inline const ::msgpacket::NAV_OBSTACLE& MSG_NAV_ADD_OBSTACLE::obstacle() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_NAV_ADD_OBSTACLE.obstacle)
  return _internal_obstacle();
}
inline void MSG_NAV_ADD_OBSTACLE::unsafe_arena_set_allocated_obstacle(
    ::msgpacket::NAV_OBSTACLE* obstacle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obstacle_);
  }
  obstacle_ = obstacle;
  if (obstacle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.MSG_NAV_ADD_OBSTACLE.obstacle)
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_ADD_OBSTACLE::release_obstacle() {
  
  ::msgpacket::NAV_OBSTACLE* temp = obstacle_;
  obstacle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_ADD_OBSTACLE::unsafe_arena_release_obstacle() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_NAV_ADD_OBSTACLE.obstacle)
  
  ::msgpacket::NAV_OBSTACLE* temp = obstacle_;
  obstacle_ = nullptr;
  return temp;
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_ADD_OBSTACLE::_internal_mutable_obstacle() {
  
  if (obstacle_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::NAV_OBSTACLE>(GetArenaForAllocation());
    obstacle_ = p;
  }
  return obstacle_;
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_ADD_OBSTACLE::mutable_obstacle() {
  ::msgpacket::NAV_OBSTACLE* _msg = _internal_mutable_obstacle();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_NAV_ADD_OBSTACLE.obstacle)
  return _msg;
}
inline void MSG_NAV_ADD_OBSTACLE::set_allocated_obstacle(::msgpacket::NAV_OBSTACLE* obstacle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete obstacle_;
  }
  if (obstacle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::NAV_OBSTACLE>::GetOwningArena(obstacle);
    if (message_arena != submessage_arena) {
      obstacle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obstacle, submessage_arena);
    }
    
  } else {
    
  }
  obstacle_ = obstacle;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_NAV_ADD_OBSTACLE.obstacle)
}

// -------------------------------------------------------------------

// MSG_NAV_ADD_OBSTACLE_RES

// .msgpacket.NAV_OBSTACLE obstacle = 2;
inline bool MSG_NAV_ADD_OBSTACLE_RES::_internal_has_obstacle() const {
  return this != internal_default_instance() && obstacle_ != nullptr;
}
inline bool MSG_NAV_ADD_OBSTACLE_RES::has_obstacle() const {
  return _internal_has_obstacle();
}
inline void MSG_NAV_ADD_OBSTACLE_RES::clear_obstacle() {
  if (GetArenaForAllocation() == nullptr && obstacle_ != nullptr) {
    delete obstacle_;
  }
  obstacle_ = nullptr;
}
inline const ::msgpacket::NAV_OBSTACLE& MSG_NAV_ADD_OBSTACLE_RES::_internal_obstacle() const {
  const ::msgpacket::NAV_OBSTACLE* p = obstacle_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::NAV_OBSTACLE&>(
      ::msgpacket::_NAV_OBSTACLE_default_instance_);
}
inline const ::msgpacket::NAV_OBSTACLE& MSG_NAV_ADD_OBSTACLE_RES::obstacle() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_NAV_ADD_OBSTACLE_RES.obstacle)
  return _internal_obstacle();
}
inline void MSG_NAV_ADD_OBSTACLE_RES::unsafe_arena_set_allocated_obstacle(
    ::msgpacket::NAV_OBSTACLE* obstacle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obstacle_);
  }
  obstacle_ = obstacle;
  if (obstacle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.MSG_NAV_ADD_OBSTACLE_RES.obstacle)
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_ADD_OBSTACLE_RES::release_obstacle() {
  
  ::msgpacket::NAV_OBSTACLE* temp = obstacle_;
  obstacle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_ADD_OBSTACLE_RES::unsafe_arena_release_obstacle() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_NAV_ADD_OBSTACLE_RES.obstacle)
  
  ::msgpacket::NAV_OBSTACLE* temp = obstacle_;
  obstacle_ = nullptr;
  return temp;
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_ADD_OBSTACLE_RES::_internal_mutable_obstacle() {
  
  if (obstacle_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::NAV_OBSTACLE>(GetArenaForAllocation());
    obstacle_ = p;
  }
  return obstacle_;
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_ADD_OBSTACLE_RES::mutable_obstacle() {
  ::msgpacket::NAV_OBSTACLE* _msg = _internal_mutable_obstacle();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_NAV_ADD_OBSTACLE_RES.obstacle)
  return _msg;
}
inline void MSG_NAV_ADD_OBSTACLE_RES::set_allocated_obstacle(::msgpacket::NAV_OBSTACLE* obstacle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete obstacle_;
  }
  if (obstacle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::NAV_OBSTACLE>::GetOwningArena(obstacle);
    if (message_arena != submessage_arena) {
      obstacle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obstacle, submessage_arena);
    }
    
  } else {
    
  }
  obstacle_ = obstacle;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_NAV_ADD_OBSTACLE_RES.obstacle)
}

// -------------------------------------------------------------------

// MSG_NAV_DEL_OBSTACLE

// uint32 obstacle_id = 1;
inline void MSG_NAV_DEL_OBSTACLE::clear_obstacle_id() {
  obstacle_id_ = 0u;
}
inline uint32_t MSG_NAV_DEL_OBSTACLE::_internal_obstacle_id() const {
  return obstacle_id_;
}
inline uint32_t MSG_NAV_DEL_OBSTACLE::obstacle_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_NAV_DEL_OBSTACLE.obstacle_id)
  return _internal_obstacle_id();
}
inline void MSG_NAV_DEL_OBSTACLE::_internal_set_obstacle_id(uint32_t value) {
  
  obstacle_id_ = value;
}
inline void MSG_NAV_DEL_OBSTACLE::set_obstacle_id(uint32_t value) {
  _internal_set_obstacle_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_NAV_DEL_OBSTACLE.obstacle_id)
}

// -------------------------------------------------------------------

// MSG_NAV_DEL_OBSTACLE_RES

// uint32 obstacle_id = 1;
inline void MSG_NAV_DEL_OBSTACLE_RES::clear_obstacle_id() {
  obstacle_id_ = 0u;
}
inline uint32_t MSG_NAV_DEL_OBSTACLE_RES::_internal_obstacle_id() const {
  return obstacle_id_;
}
inline uint32_t MSG_NAV_DEL_OBSTACLE_RES::obstacle_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_NAV_DEL_OBSTACLE_RES.obstacle_id)
  return _internal_obstacle_id();
}
inline void MSG_NAV_DEL_OBSTACLE_RES::_internal_set_obstacle_id(uint32_t value) {
  
  obstacle_id_ = value;
}
inline void MSG_NAV_DEL_OBSTACLE_RES::set_obstacle_id(uint32_t value) {
  _internal_set_obstacle_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_NAV_DEL_OBSTACLE_RES.obstacle_id)
}

// -------------------------------------------------------------------

// MSG_NAV_GET_ALL_OBSTACLE

// -------------------------------------------------------------------

// MSG_NAV_GET_ALL_OBSTACLE_RES

// repeated .msgpacket.NAV_OBSTACLE obstacle = 1;
inline int MSG_NAV_GET_ALL_OBSTACLE_RES::_internal_obstacle_size() const {
  return obstacle_.size();
}
inline int MSG_NAV_GET_ALL_OBSTACLE_RES::obstacle_size() const {
  return _internal_obstacle_size();
}
inline void MSG_NAV_GET_ALL_OBSTACLE_RES::clear_obstacle() {
  obstacle_.Clear();
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_GET_ALL_OBSTACLE_RES::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES.obstacle)
  return obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::NAV_OBSTACLE >*
MSG_NAV_GET_ALL_OBSTACLE_RES::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES.obstacle)
  return &obstacle_;
}
inline const ::msgpacket::NAV_OBSTACLE& MSG_NAV_GET_ALL_OBSTACLE_RES::_internal_obstacle(int index) const {
  return obstacle_.Get(index);
}
inline const ::msgpacket::NAV_OBSTACLE& MSG_NAV_GET_ALL_OBSTACLE_RES::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES.obstacle)
  return _internal_obstacle(index);
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_GET_ALL_OBSTACLE_RES::_internal_add_obstacle() {
  return obstacle_.Add();
}
inline ::msgpacket::NAV_OBSTACLE* MSG_NAV_GET_ALL_OBSTACLE_RES::add_obstacle() {
  ::msgpacket::NAV_OBSTACLE* _add = _internal_add_obstacle();
  // @@protoc_insertion_point(field_add:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES.obstacle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msgpacket::NAV_OBSTACLE >&
MSG_NAV_GET_ALL_OBSTACLE_RES::obstacle() const {
  // @@protoc_insertion_point(field_list:msgpacket.MSG_NAV_GET_ALL_OBSTACLE_RES.obstacle)
  return obstacle_;
}

// -------------------------------------------------------------------

// MSG_UPDATE_POS

// .msgpacket.PROTO_VEC_3F new_pos = 1;
inline bool MSG_UPDATE_POS::_internal_has_new_pos() const {
  return this != internal_default_instance() && new_pos_ != nullptr;
}
inline bool MSG_UPDATE_POS::has_new_pos() const {
  return _internal_has_new_pos();
}
inline void MSG_UPDATE_POS::clear_new_pos() {
  if (GetArenaForAllocation() == nullptr && new_pos_ != nullptr) {
    delete new_pos_;
  }
  new_pos_ = nullptr;
}
inline const ::msgpacket::PROTO_VEC_3F& MSG_UPDATE_POS::_internal_new_pos() const {
  const ::msgpacket::PROTO_VEC_3F* p = new_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PROTO_VEC_3F&>(
      ::msgpacket::_PROTO_VEC_3F_default_instance_);
}
inline const ::msgpacket::PROTO_VEC_3F& MSG_UPDATE_POS::new_pos() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_UPDATE_POS.new_pos)
  return _internal_new_pos();
}
inline void MSG_UPDATE_POS::unsafe_arena_set_allocated_new_pos(
    ::msgpacket::PROTO_VEC_3F* new_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_pos_);
  }
  new_pos_ = new_pos;
  if (new_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.MSG_UPDATE_POS.new_pos)
}
inline ::msgpacket::PROTO_VEC_3F* MSG_UPDATE_POS::release_new_pos() {
  
  ::msgpacket::PROTO_VEC_3F* temp = new_pos_;
  new_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_UPDATE_POS::unsafe_arena_release_new_pos() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_UPDATE_POS.new_pos)
  
  ::msgpacket::PROTO_VEC_3F* temp = new_pos_;
  new_pos_ = nullptr;
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_UPDATE_POS::_internal_mutable_new_pos() {
  
  if (new_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PROTO_VEC_3F>(GetArenaForAllocation());
    new_pos_ = p;
  }
  return new_pos_;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_UPDATE_POS::mutable_new_pos() {
  ::msgpacket::PROTO_VEC_3F* _msg = _internal_mutable_new_pos();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_UPDATE_POS.new_pos)
  return _msg;
}
inline void MSG_UPDATE_POS::set_allocated_new_pos(::msgpacket::PROTO_VEC_3F* new_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete new_pos_;
  }
  if (new_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PROTO_VEC_3F>::GetOwningArena(new_pos);
    if (message_arena != submessage_arena) {
      new_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_pos, submessage_arena);
    }
    
  } else {
    
  }
  new_pos_ = new_pos;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_UPDATE_POS.new_pos)
}

// -------------------------------------------------------------------

// MSG_UPDATE_POS_RES

// .msgpacket.PROTO_VEC_3F new_pos = 1;
inline bool MSG_UPDATE_POS_RES::_internal_has_new_pos() const {
  return this != internal_default_instance() && new_pos_ != nullptr;
}
inline bool MSG_UPDATE_POS_RES::has_new_pos() const {
  return _internal_has_new_pos();
}
inline void MSG_UPDATE_POS_RES::clear_new_pos() {
  if (GetArenaForAllocation() == nullptr && new_pos_ != nullptr) {
    delete new_pos_;
  }
  new_pos_ = nullptr;
}
inline const ::msgpacket::PROTO_VEC_3F& MSG_UPDATE_POS_RES::_internal_new_pos() const {
  const ::msgpacket::PROTO_VEC_3F* p = new_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msgpacket::PROTO_VEC_3F&>(
      ::msgpacket::_PROTO_VEC_3F_default_instance_);
}
inline const ::msgpacket::PROTO_VEC_3F& MSG_UPDATE_POS_RES::new_pos() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_UPDATE_POS_RES.new_pos)
  return _internal_new_pos();
}
inline void MSG_UPDATE_POS_RES::unsafe_arena_set_allocated_new_pos(
    ::msgpacket::PROTO_VEC_3F* new_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_pos_);
  }
  new_pos_ = new_pos;
  if (new_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msgpacket.MSG_UPDATE_POS_RES.new_pos)
}
inline ::msgpacket::PROTO_VEC_3F* MSG_UPDATE_POS_RES::release_new_pos() {
  
  ::msgpacket::PROTO_VEC_3F* temp = new_pos_;
  new_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_UPDATE_POS_RES::unsafe_arena_release_new_pos() {
  // @@protoc_insertion_point(field_release:msgpacket.MSG_UPDATE_POS_RES.new_pos)
  
  ::msgpacket::PROTO_VEC_3F* temp = new_pos_;
  new_pos_ = nullptr;
  return temp;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_UPDATE_POS_RES::_internal_mutable_new_pos() {
  
  if (new_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msgpacket::PROTO_VEC_3F>(GetArenaForAllocation());
    new_pos_ = p;
  }
  return new_pos_;
}
inline ::msgpacket::PROTO_VEC_3F* MSG_UPDATE_POS_RES::mutable_new_pos() {
  ::msgpacket::PROTO_VEC_3F* _msg = _internal_mutable_new_pos();
  // @@protoc_insertion_point(field_mutable:msgpacket.MSG_UPDATE_POS_RES.new_pos)
  return _msg;
}
inline void MSG_UPDATE_POS_RES::set_allocated_new_pos(::msgpacket::PROTO_VEC_3F* new_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete new_pos_;
  }
  if (new_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::msgpacket::PROTO_VEC_3F>::GetOwningArena(new_pos);
    if (message_arena != submessage_arena) {
      new_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_pos, submessage_arena);
    }
    
  } else {
    
  }
  new_pos_ = new_pos;
  // @@protoc_insertion_point(field_set_allocated:msgpacket.MSG_UPDATE_POS_RES.new_pos)
}

// -------------------------------------------------------------------

// MSG_NTF_IN_VIEW

// int64 obj_id = 1;
inline void MSG_NTF_IN_VIEW::clear_obj_id() {
  obj_id_ = int64_t{0};
}
inline int64_t MSG_NTF_IN_VIEW::_internal_obj_id() const {
  return obj_id_;
}
inline int64_t MSG_NTF_IN_VIEW::obj_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_NTF_IN_VIEW.obj_id)
  return _internal_obj_id();
}
inline void MSG_NTF_IN_VIEW::_internal_set_obj_id(int64_t value) {
  
  obj_id_ = value;
}
inline void MSG_NTF_IN_VIEW::set_obj_id(int64_t value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_NTF_IN_VIEW.obj_id)
}

// -------------------------------------------------------------------

// MSG_NTF_OUT_VIEW

// int64 obj_id = 1;
inline void MSG_NTF_OUT_VIEW::clear_obj_id() {
  obj_id_ = int64_t{0};
}
inline int64_t MSG_NTF_OUT_VIEW::_internal_obj_id() const {
  return obj_id_;
}
inline int64_t MSG_NTF_OUT_VIEW::obj_id() const {
  // @@protoc_insertion_point(field_get:msgpacket.MSG_NTF_OUT_VIEW.obj_id)
  return _internal_obj_id();
}
inline void MSG_NTF_OUT_VIEW::_internal_set_obj_id(int64_t value) {
  
  obj_id_ = value;
}
inline void MSG_NTF_OUT_VIEW::set_obj_id(int64_t value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:msgpacket.MSG_NTF_OUT_VIEW.obj_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgpacket

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msgpacket::MSG_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msgpacket::MSG_TYPE>() {
  return ::msgpacket::MSG_TYPE_descriptor();
}
template <> struct is_proto_enum< ::msgpacket::RESPONSE_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msgpacket::RESPONSE_CODE>() {
  return ::msgpacket::RESPONSE_CODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
